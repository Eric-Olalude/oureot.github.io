WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.800
In the last video, we looked at

00:00:01.800 --> 00:00:05.099
this HTML page that we created for our front-end of the Dapp.

00:00:05.099 --> 00:00:07.519
Again, we just took the boilerplate code, made some changes,

00:00:07.519 --> 00:00:09.480
we just have some basic buttons and stuff,

00:00:09.480 --> 00:00:10.980
a very simple front-end page.

00:00:10.980 --> 00:00:13.650
In this video, let's look at the index.js file.

00:00:13.650 --> 00:00:16.484
This is where the scripts are coming from for our HTML page.

00:00:16.484 --> 00:00:19.259
So, in the scripts folder, of course, we can have multiple scripts.

00:00:19.260 --> 00:00:20.970
In our case, we just have index dot js.

00:00:20.969 --> 00:00:22.814
So, let's go open this over here.

00:00:22.815 --> 00:00:26.429
So, I have my own version here very similar to what the boilerplate code came

00:00:26.429 --> 00:00:28.109
with and all I've done is

00:00:28.109 --> 00:00:31.320
some little changes and I'm going to walk you through those shortly over here.

00:00:31.320 --> 00:00:34.530
But let me show you the web3 object.

00:00:34.530 --> 00:00:37.640
Now, this is where we're actually importing the web3 library here.

00:00:37.640 --> 00:00:39.259
Remember, web3 is the only way you can

00:00:39.259 --> 00:00:41.570
programmatically connect with the world of a theorem.

00:00:41.570 --> 00:00:45.590
So in case a is not injected by the browser coming from MetaMask,

00:00:45.590 --> 00:00:47.360
then we're just importing web3 module,

00:00:47.359 --> 00:00:51.320
and you'll see what that means just in a second once I scroll down.

00:00:51.320 --> 00:00:54.149
Then we're also having the contract module and remember it,

00:00:54.149 --> 00:00:55.799
we used this in the testing files,

00:00:55.799 --> 00:00:57.000
do it initiative contracts.

00:00:57.000 --> 00:00:59.844
So, once you get the contract model from truffle-contract,

00:00:59.844 --> 00:01:03.064
we're just using that to deploy the artifact.

00:01:03.064 --> 00:01:06.724
So, we're importing the artifacts just the way like we did the JSON representation,

00:01:06.724 --> 00:01:08.869
like we did in the testing files so that we can have

00:01:08.870 --> 00:01:11.810
a usable abstraction that we can use all throughout the code now.

00:01:11.810 --> 00:01:13.250
So now, this is something that is

00:01:13.250 --> 00:01:16.084
an instance of the contract that we can call functions on.

00:01:16.084 --> 00:01:17.864
Of course, we're going to deploy it first.

00:01:17.864 --> 00:01:20.354
So, that's that. Then we have the app object.

00:01:20.355 --> 00:01:23.150
Okay, so if you look in this app object which has a bunch of

00:01:23.150 --> 00:01:26.600
methods like the start method and walking through,

00:01:26.599 --> 00:01:28.089
there is set status methods,

00:01:28.090 --> 00:01:29.270
star name, star owner,

00:01:29.269 --> 00:01:32.284
claim star, all those functions they're coming from right here.

00:01:32.284 --> 00:01:35.189
Then, what we're doing is we're attaching the objects to a Window.

00:01:35.189 --> 00:01:36.289
So this app object,

00:01:36.290 --> 00:01:38.990
we're attaching it to the window, window.App.

00:01:38.989 --> 00:01:42.324
Once we do that, then we're adding an event listener to our window,

00:01:42.325 --> 00:01:45.780
so that when anyone opens the front page of a Dapp,

00:01:45.780 --> 00:01:47.340
event listener clicks in.

00:01:47.340 --> 00:01:51.140
Now, this is all that just came with the boilerplate code, I'm just walking you through.

00:01:51.140 --> 00:01:54.560
So again, we have the app object with all the functions that we call,

00:01:54.560 --> 00:01:57.950
then we're attaching it to the Window and then we're adding an event listener,

00:01:57.950 --> 00:02:00.469
so that all these functions can click in whenever

00:02:00.469 --> 00:02:04.120
someone does anything on the Window or the Window front object, okay?

00:02:04.120 --> 00:02:05.545
A Window's Dapp starts.

00:02:05.545 --> 00:02:07.969
So, what we're doing is that the first thing when this Dapp starts,

00:02:07.969 --> 00:02:12.469
if you see there's a function here called window.start, or app.start.

00:02:12.469 --> 00:02:15.715
So, this is the function that gets automatically cold if you see,

00:02:15.715 --> 00:02:18.270
as soon as the EventListener clicks in.

00:02:18.270 --> 00:02:21.300
So, as soon as EventListener clicks in,

00:02:21.300 --> 00:02:23.040
you're going to call the app.start.

00:02:23.039 --> 00:02:24.269
Now, before we do that,

00:02:24.270 --> 00:02:27.010
you remember again we have this only programmatic way.

00:02:27.009 --> 00:02:28.280
So what we're doing is that,

00:02:28.280 --> 00:02:30.719
we're seeing if there is web3 available, okay?

00:02:30.719 --> 00:02:33.194
So, we're just checking if there's web3 available.

00:02:33.194 --> 00:02:35.250
If no web3 is detected,

00:02:35.250 --> 00:02:38.245
then we are using the web3 that comes along with a truffle

00:02:38.245 --> 00:02:41.990
or you're just getting a copy that come from MetaMask. So, it's simple as that.

00:02:41.990 --> 00:02:45.680
So, it's seeking if there is a web3 version available and if it's not undefined,

00:02:45.680 --> 00:02:46.985
that means it is available.

00:02:46.985 --> 00:02:48.335
You can just use the window.

00:02:48.335 --> 00:02:50.580
If not, we're using our own web3

00:02:50.580 --> 00:02:53.280
that is coming along with the module that we just imported in.

00:02:53.280 --> 00:02:55.460
So, pretty simple, look through it, you'll just understand again.

00:02:55.460 --> 00:02:56.885
This is all boilerplate code,

00:02:56.884 --> 00:02:58.419
I didn't change anything at all.

00:02:58.419 --> 00:03:02.209
So, once we have that and also this is where the port is coming from.

00:03:02.210 --> 00:03:03.740
Remember, this is 95,

00:03:03.740 --> 00:03:07.055
45 is a port with a truffle development console, runs by default.

00:03:07.055 --> 00:03:09.650
So, it's checking if web3 was injected.

00:03:09.650 --> 00:03:13.659
If not, it's getting its own version and it's getting the version.

00:03:13.659 --> 00:03:15.829
Of course, it needs where it's running because

00:03:15.830 --> 00:03:18.440
that's where the truffle port, the console, is running.

00:03:18.439 --> 00:03:20.270
So, we're getting that again, all boilerplate code,

00:03:20.270 --> 00:03:21.745
I have not changed anything at all.

00:03:21.745 --> 00:03:23.580
Now, once we have web3 setup,

00:03:23.580 --> 00:03:25.830
then we're calling the app.start method.

00:03:25.830 --> 00:03:27.150
This is where if you look,

00:03:27.150 --> 00:03:30.525
let's go look in the app.start method. So, app.start.

00:03:30.525 --> 00:03:32.189
All we're doing here is first of all,

00:03:32.189 --> 00:03:33.710
we're fetching accounts to make sure we

00:03:33.710 --> 00:03:36.230
have all the accounts available that we need to set up,

00:03:36.229 --> 00:03:38.840
and then also configuring our provider.

00:03:38.840 --> 00:03:42.170
The provider, you've probably learned about this in our previous lessons.

00:03:42.169 --> 00:03:44.794
The provider is how web3 talks to the block chain.

00:03:44.794 --> 00:03:46.099
So, once we have the provider,

00:03:46.099 --> 00:03:48.199
we need to now configure the provider, okay,

00:03:48.199 --> 00:03:52.139
and then we are fetching accounts to make sure we have available accounts to work with.

00:03:52.139 --> 00:03:53.429
Now, you can keep this code,

00:03:53.430 --> 00:03:54.890
whatever came with the boilerplate code,

00:03:54.889 --> 00:03:57.589
or I'm actually going to give all this code in the bottom of this page,

00:03:57.590 --> 00:03:59.150
pretty simple to understand.

00:03:59.150 --> 00:04:00.605
One thing I wanted to mention,

00:04:00.604 --> 00:04:04.294
I like to use a sync await syntax just because it makes the code very clean.

00:04:04.294 --> 00:04:06.604
So, what I'm doing in my app object,

00:04:06.604 --> 00:04:07.909
I'm just having functions.

00:04:07.909 --> 00:04:09.764
So, let's look at for example a function star name,

00:04:09.764 --> 00:04:10.829
star owner, claim star.

00:04:10.830 --> 00:04:13.755
So, remember these are the functions recalling from our HTML,

00:04:13.754 --> 00:04:16.094
app.star name, app.star owner.

00:04:16.095 --> 00:04:17.580
But inside these function,

00:04:17.579 --> 00:04:19.414
you're really not doing anything just because within

00:04:19.415 --> 00:04:21.860
object you'd actually use a sync await syntax,

00:04:21.860 --> 00:04:23.150
so I'm just calling a function.

00:04:23.149 --> 00:04:26.125
That's it. So, I can outside now use a sync await syntax.

00:04:26.125 --> 00:04:28.564
So, that just makes my code quite a bit clean.

00:04:28.564 --> 00:04:32.089
So, inside this function, let's go for example to get star name function.

00:04:32.089 --> 00:04:35.464
So, we're calling the star name function from inside that and that's it.

00:04:35.464 --> 00:04:37.669
So, now I can actually use a sync await

00:04:37.670 --> 00:04:40.865
syntax and it just makes my code quite a bit cleaner.

00:04:40.865 --> 00:04:42.650
Just like the way if you look in the test,

00:04:42.649 --> 00:04:44.750
if you remember from the tests, very similar.

00:04:44.750 --> 00:04:47.540
So, we get an instance of the contract by deploying it,

00:04:47.540 --> 00:04:50.390
then it returns a reusable deployed address and

00:04:50.389 --> 00:04:53.854
then we can call functions or sent transactions just the way we did in the test.

00:04:53.855 --> 00:04:55.790
So, in the star name function, we're deploying it,

00:04:55.790 --> 00:04:57.035
we're getting an instance back,

00:04:57.035 --> 00:04:59.380
and then we are calling functions using either call.

00:04:59.379 --> 00:05:03.480
Then, what we're doing is that using get the element ID by whatever the HTML.

00:05:03.480 --> 00:05:04.634
For example in this case,

00:05:04.634 --> 00:05:06.704
this element had an ID of name.

00:05:06.704 --> 00:05:08.269
So, we want to put something in that name,

00:05:08.269 --> 00:05:10.805
so we're just calling it element ID name and then

00:05:10.805 --> 00:05:14.120
changing that in our HTML and writing whatever the responses.

00:05:14.120 --> 00:05:15.725
So, that's how you get the Star name back,

00:05:15.725 --> 00:05:17.629
and same thing happening in start owner,

00:05:17.629 --> 00:05:19.399
same thing happening in claim star.

00:05:19.399 --> 00:05:20.554
Once we claim a star,

00:05:20.555 --> 00:05:25.790
we have a set status area in our HTML page where we're putting whatever the status is.

00:05:25.790 --> 00:05:27.020
So, that's how it looks like.

00:05:27.019 --> 00:05:28.579
Now, we've done the task,

00:05:28.579 --> 00:05:30.379
we've written and done all that stuff.

00:05:30.379 --> 00:05:33.889
So, let's go and now see how our front page and front end looks like.

