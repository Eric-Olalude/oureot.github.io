WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.019
Okay. So now once we have the contract abstract and the deployed address,

00:00:04.019 --> 00:00:07.139
we can easily execute the contract functions on the Ethereum network.

00:00:07.139 --> 00:00:10.875
Also, everything almost in blockchain is not instantaneous.

00:00:10.875 --> 00:00:12.589
That means it is asynchronous.

00:00:12.589 --> 00:00:15.750
So, we will use the async of each syntax that you see here,

00:00:15.750 --> 00:00:17.280
and I'll explain that in just a second.

00:00:17.280 --> 00:00:19.650
Now, let's look at the first test that we are writing here.

00:00:19.649 --> 00:00:21.494
If you look at this it block on the screen,

00:00:21.495 --> 00:00:25.200
and if you see this it function just like the way contract function was,

00:00:25.199 --> 00:00:26.744
it accepts two different arguments,

00:00:26.745 --> 00:00:30.825
and the first one is just a description of the test and the second is a function.

00:00:30.824 --> 00:00:32.144
So, if you see this is a function,

00:00:32.145 --> 00:00:36.015
and all we're doing is that we're putting the async keyword in front of the function.

00:00:36.015 --> 00:00:38.789
This allows us to use await syntax,

00:00:38.789 --> 00:00:42.325
the keyword await in front of the asynchronous functions calls.

00:00:42.325 --> 00:00:44.929
Also, we're using the fact arrow notation and then we

00:00:44.929 --> 00:00:47.689
have the function definition right there, so that's the function.

00:00:47.689 --> 00:00:50.000
Fact arrow notation, you can always use the function key.

00:00:50.000 --> 00:00:51.424
Would it be comfortable using that,

00:00:51.424 --> 00:00:52.729
but again, when use a fact arrow,

00:00:52.729 --> 00:00:54.959
you don't have to use that, and then inside that,

00:00:54.960 --> 00:00:56.660
we have our function definition.

00:00:56.659 --> 00:00:58.924
Now, also wanted a Latino in Solidity,

00:00:58.924 --> 00:01:00.649
there are two damp function calls.

00:01:00.649 --> 00:01:05.030
The first one is when a function does not change the state of the network.

00:01:05.030 --> 00:01:07.579
It only read some information and we call

00:01:07.579 --> 00:01:10.379
these basic function calls which is this example,

00:01:10.379 --> 00:01:12.500
and the second one are transaction costs.

00:01:12.500 --> 00:01:14.359
Let's talk about function calls first.

00:01:14.359 --> 00:01:17.838
Now, function calls can be used to execute code on the network,

00:01:17.838 --> 00:01:20.515
though no data will be permanently changed.

00:01:20.515 --> 00:01:22.004
Calls are free to run,

00:01:22.004 --> 00:01:25.189
and the defining characteristic is that they only read the data.

00:01:25.189 --> 00:01:26.299
So, if you see in this function,

00:01:26.299 --> 00:01:27.515
we're just reading the data,

00:01:27.515 --> 00:01:28.924
the name of the star. That's it.

00:01:28.924 --> 00:01:31.909
So, when you execute a contract function via a call,

00:01:31.909 --> 00:01:35.200
you will resolve a receive a return value immediately back.

00:01:35.200 --> 00:01:37.314
So, once that return value gets back,

00:01:37.314 --> 00:01:40.924
you're actually just comparing it if this return value is equal to this value,

00:01:40.924 --> 00:01:42.799
and then of course, assert.equal.

00:01:42.799 --> 00:01:46.340
See if that value is equal to this and the outputs should be true or false either way.

00:01:46.340 --> 00:01:47.960
Of course, it should be true because that's what

00:01:47.959 --> 00:01:49.849
we gave it in the initial constructor function.

00:01:49.849 --> 00:01:52.909
To summarize, when you do function calls, they are free.

00:01:52.909 --> 00:01:54.155
They do not cause cast.

00:01:54.155 --> 00:01:56.045
Do not change the state of the network.

00:01:56.045 --> 00:02:00.230
They are processed immediately and they will also expose the return value.

00:02:00.230 --> 00:02:03.484
Of course, I'll explain about the transaction calls in my next test.

00:02:03.484 --> 00:02:05.344
So now, this is the test that we have,

00:02:05.344 --> 00:02:07.084
that we are seeing, like I said, the starName.

00:02:07.084 --> 00:02:11.269
Remember, we set it to the awesome Udacity star in a constructor function.

00:02:11.270 --> 00:02:13.850
So, what we do is that we just get this value back,

00:02:13.849 --> 00:02:15.864
and then be we call the starName function,

00:02:15.865 --> 00:02:17.975
and if you see there's an interesting thing here,

00:02:17.974 --> 00:02:20.495
we're using.calls. So, we're doing instance.

00:02:20.495 --> 00:02:22.534
the name of the function.call.

00:02:22.534 --> 00:02:25.549
Now, we have to execute the.call function explicitly to let

00:02:25.550 --> 00:02:29.795
the Ethereum network know that we are not intending to persist any changes.

00:02:29.794 --> 00:02:31.759
We can skip the.call truffle,

00:02:31.759 --> 00:02:32.995
will still going to work fine,

00:02:32.995 --> 00:02:35.629
as long as the functions of the contract are pure,

00:02:35.629 --> 00:02:37.370
and we're not trying to change anything.

00:02:37.370 --> 00:02:42.025
But, it is advisable to use.call since it really makes the code easier to understand,

00:02:42.025 --> 00:02:44.060
and also what I am using the call function

00:02:44.060 --> 00:02:46.974
versus where I'm not using a call function, or a transaction.

00:02:46.974 --> 00:02:50.530
So, I'm going to really stick to using the.call all throughout my examples,

00:02:50.530 --> 00:02:52.099
and I would encourage you to do the same.

00:02:52.099 --> 00:02:54.769
The reason, of course, I wanted to mention this because you might see

00:02:54.770 --> 00:02:58.625
code examples outside where the.call right here is not added,

00:02:58.625 --> 00:03:00.319
so I do not want you to get confused,

00:03:00.319 --> 00:03:02.030
but it is a nice practice to use it,

00:03:02.030 --> 00:03:03.319
and also again, like I said,

00:03:03.319 --> 00:03:06.209
we do get a transaction ID back on success.

00:03:06.210 --> 00:03:08.250
So,.equal like I said, that's what we're doing.

00:03:08.250 --> 00:03:10.939
So, now let's go run this test, and for running the test,

00:03:10.939 --> 00:03:13.969
you want to make sure that you have the Truffle develop console open,

00:03:13.969 --> 00:03:16.539
and let's go and open a terminal now.

00:03:16.539 --> 00:03:19.560
So, we are here in a Truffle developed consoles.

00:03:19.560 --> 00:03:21.064
We're already in the console right now.

00:03:21.064 --> 00:03:22.685
Of course, we can compile the contract.

00:03:22.685 --> 00:03:24.784
Well, so let's go compile it.

00:03:24.784 --> 00:03:28.174
I know we already did that before and once you're done,

00:03:28.175 --> 00:03:30.080
then you're just going to hit this, see the word test,

00:03:30.080 --> 00:03:32.600
that's it, and that's going to run the tests that are available.

00:03:32.599 --> 00:03:34.549
So, if you see, it says one test passing.

00:03:34.550 --> 00:03:37.295
So, all that means is that if you go back here,

00:03:37.294 --> 00:03:38.644
this function is passing.

00:03:38.645 --> 00:03:43.080
So, that's the first test. So, let's go write another test in our next video.

