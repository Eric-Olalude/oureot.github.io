WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.210
Our next topic is multi-party consensus.

00:00:03.210 --> 00:00:06.480
Now, the multi-signature feature we just described

00:00:06.480 --> 00:00:10.950
is an inherent feature of some block chains including Bitcoin,

00:00:10.950 --> 00:00:15.390
but for Ethereum, this feature must be implemented in a smart contract.

00:00:15.390 --> 00:00:16.845
There is no built-in way to do it,

00:00:16.845 --> 00:00:19.335
you have to implement it through code.

00:00:19.335 --> 00:00:25.740
We will distinguish between the inherent multi-signature capability of a block chain and

00:00:25.740 --> 00:00:33.165
the implemented version through code as multi-party consensus just to avoid confusion.

00:00:33.165 --> 00:00:35.520
The best way to understand

00:00:35.520 --> 00:00:40.775
multi-party consensus is to look at this common Hollywood movie scene.

00:00:40.775 --> 00:00:44.270
So we all familiar with the missile silo where there are

00:00:44.270 --> 00:00:46.910
multiple operators who each have to turn

00:00:46.910 --> 00:00:49.910
a key in order to successfully launch the missile.

00:00:49.910 --> 00:00:52.160
This is a common feature.

00:00:52.160 --> 00:00:57.380
They will also have a card which they break and there's a code that they have to reveal.

00:00:57.380 --> 00:01:04.835
So think of multi-party consensus as the analogy of the missile silo and multiple keys.

00:01:04.835 --> 00:01:08.030
What you'll want to do is have multiple users with

00:01:08.030 --> 00:01:11.255
their own individual private keys essentially

00:01:11.255 --> 00:01:15.080
vote to have a particular function executed.

00:01:15.080 --> 00:01:16.910
I use the term vote loosely here,

00:01:16.910 --> 00:01:20.060
they are essentially authorizing the use of

00:01:20.060 --> 00:01:25.355
their private key and allowing the transaction to move forward.

00:01:25.355 --> 00:01:28.820
So the basic algorithm that you would use to

00:01:28.820 --> 00:01:33.740
implement such a feature encode is to first define M,

00:01:33.740 --> 00:01:39.365
which is the number of keys that are required for the transaction to be executed.

00:01:39.365 --> 00:01:41.510
You then define N,

00:01:41.510 --> 00:01:43.265
which is a number of private keys.

00:01:43.265 --> 00:01:44.870
Now in the smart contract,

00:01:44.870 --> 00:01:50.390
you'd probably define this indirectly by just having a pool of permitted addresses.

00:01:50.390 --> 00:01:56.400
You could do that by perhaps having certain accounts flagged as administrators,

00:01:56.400 --> 00:01:59.885
you could also do it by having a fixed array of addresses

00:01:59.885 --> 00:02:03.755
which all represent the participants of N,

00:02:03.755 --> 00:02:08.540
and you could also have a function that registers and

00:02:08.540 --> 00:02:14.030
de-registers such users as the lifecycle of the contract progresses.

00:02:14.030 --> 00:02:16.100
Once you have M and N defined,

00:02:16.100 --> 00:02:18.755
the next thing you want to do when the function

00:02:18.755 --> 00:02:21.590
is called that requires multi-party consensus,

00:02:21.590 --> 00:02:23.270
is to initialize the counter.

00:02:23.270 --> 00:02:25.580
So the first time it calls,

00:02:25.580 --> 00:02:31.555
you start tracking how many of the M have already authorized the transaction.

00:02:31.555 --> 00:02:35.840
Of course, it's the first time so it would be zero initially before you set the counter,

00:02:35.840 --> 00:02:38.015
and one after you've set the counter.

00:02:38.015 --> 00:02:41.565
You then increment the counter for each subsequent call.

00:02:41.565 --> 00:02:45.385
Finally, when the counter hits the trigger level,

00:02:45.385 --> 00:02:48.050
which is the value of M,

00:02:48.050 --> 00:02:50.165
you then execute the code.

00:02:50.165 --> 00:02:55.175
So this is essentially what's happening in the multi-signature address,

00:02:55.175 --> 00:02:58.385
but we are going to have to do that in encode.

00:02:58.385 --> 00:03:01.565
So now that we've got this algorithm,

00:03:01.565 --> 00:03:04.940
what we want to do is improve our smart contract.

00:03:04.940 --> 00:03:12.995
So we set up an M of N capability for changing the operational status of the contract.

00:03:12.995 --> 00:03:16.310
Since that is a feature you want to control,

00:03:16.310 --> 00:03:19.670
you don't want one single individual to go and just pause a contract.

00:03:19.670 --> 00:03:23.225
You want to be able to have multiple parties be involved in that decision.

00:03:23.225 --> 00:03:26.100
Let's enforce that through code.

