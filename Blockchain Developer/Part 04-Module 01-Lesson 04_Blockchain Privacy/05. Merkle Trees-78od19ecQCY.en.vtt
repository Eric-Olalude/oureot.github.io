WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.680
One of the problems with hashing is that,

00:00:02.680 --> 00:00:05.060
even though the data itself remains private,

00:00:05.059 --> 00:00:08.535
outsiders can still see that you did something with data.

00:00:08.535 --> 00:00:11.655
Oftentimes, this is enough to lose privacy.

00:00:11.654 --> 00:00:15.179
For example, what if you worked for a company that sold and shipped

00:00:15.179 --> 00:00:17.280
packages and every time you shipped

00:00:17.280 --> 00:00:20.745
a package it was recorded by a hash on the blockchain?

00:00:20.745 --> 00:00:25.469
Even though your competitor couldn't see the exact details of all the shipments,

00:00:25.469 --> 00:00:28.169
they could still see how many packages you are shipping.

00:00:28.170 --> 00:00:31.679
For a lot of applications that's a privacy leak in itself.

00:00:31.679 --> 00:00:35.280
In this lesson, we're going to learn about one of the ways to add

00:00:35.280 --> 00:00:40.255
more privacy to hashes so that we can avoid revealing the number of hashes we made.

00:00:40.255 --> 00:00:43.175
This technique is called a Merkle tree.

00:00:43.174 --> 00:00:45.769
You might remember looking at Merkle trees earlier in

00:00:45.770 --> 00:00:49.234
the program when we looked at the structure of Bitcoin blocks.

00:00:49.234 --> 00:00:52.130
In this lesson, we'll take a closer look at how to build

00:00:52.130 --> 00:00:56.225
your own trees and then use our trees to generate a Merkle proof.

00:00:56.225 --> 00:00:58.490
Let's get started building one.

00:00:58.490 --> 00:01:01.175
Building a Merkle tree is pretty simple.

00:01:01.174 --> 00:01:03.259
What we're going to do is take lots of

00:01:03.259 --> 00:01:06.469
pre-images and combine them all into a single hash.

00:01:06.469 --> 00:01:11.105
So to start, we lay out all the data or pre-images that we want to include.

00:01:11.105 --> 00:01:13.045
In this case, we have eight records.

00:01:13.045 --> 00:01:16.210
So, A, B, C, D, E, F,

00:01:16.209 --> 00:01:19.004
G and H. Next,

00:01:19.004 --> 00:01:21.619
we compute the hash for each piece of data.

00:01:21.620 --> 00:01:24.615
We're going to use the SHA-256 hash.

00:01:24.614 --> 00:01:26.795
But any cryptographic hash will do.

00:01:26.795 --> 00:01:29.435
So now, we have eight hashes.

00:01:29.435 --> 00:01:32.180
Next, we pair each of the neighboring hashes

00:01:32.180 --> 00:01:35.150
together and compute a new hash on each pair.

00:01:35.150 --> 00:01:36.969
That makes four hashes.

00:01:36.969 --> 00:01:41.495
From these four hashes we make two and then compute new hashes from that.

00:01:41.495 --> 00:01:44.090
Finally, we take the final two hashes,

00:01:44.090 --> 00:01:46.594
combine them and compute the last hash.

00:01:46.594 --> 00:01:49.340
This final hash is called the Merkle root.

00:01:49.340 --> 00:01:52.710
The Merkle root is the value we will commit to the blockchain.

00:01:52.709 --> 00:01:55.069
So, let's review what we've done so far.

00:01:55.069 --> 00:01:56.959
We started with eight pieces of data.

00:01:56.959 --> 00:02:00.890
Rather than hashing those eight pre-images and storing eight hashes on the blockchain,

00:02:00.890 --> 00:02:04.150
we combined all the hashes into a single Merkle root.

00:02:04.150 --> 00:02:06.935
Because we're not limited to the number of parents we can make.

00:02:06.935 --> 00:02:09.080
We can start with any number of values.

00:02:09.080 --> 00:02:11.050
If we had an odd number of pre-images,

00:02:11.050 --> 00:02:14.585
we would simply duplicate the last one to make it even again.

00:02:14.585 --> 00:02:16.689
Now for the proving step,

00:02:16.689 --> 00:02:21.590
say Dr. Alice wants to deliver documents C to her patient Bob.

00:02:21.590 --> 00:02:23.479
In the previous example,

00:02:23.479 --> 00:02:28.744
Alice hash the documents contents and publicly committed that value to the blockchain.

00:02:28.745 --> 00:02:31.789
When Bob received that document he computed

00:02:31.789 --> 00:02:35.294
its hash and compared to its value to the value on the blockchain.

00:02:35.294 --> 00:02:39.409
If the hashes matched Bob knew that the document was real.

00:02:39.409 --> 00:02:41.180
In this case though,

00:02:41.180 --> 00:02:43.640
the hash Bob computes for his document won't match

00:02:43.639 --> 00:02:46.639
the hash that's on the blockchain because

00:02:46.639 --> 00:02:49.429
the single hash stored in the blockchain includes all the data

00:02:49.430 --> 00:02:52.939
Alice hashed into her Merkle tree not just Bob's data.

00:02:52.939 --> 00:02:55.840
So, what can Alice and Bob do in this case?

00:02:55.840 --> 00:02:59.479
One option is that Alice could send over all the hashes.

00:02:59.479 --> 00:03:02.060
If Bob knew where all the hashes where

00:03:02.060 --> 00:03:04.909
and the exact order Alice originally combined them,

00:03:04.909 --> 00:03:07.324
he can recreate the entire Merkle tree.

00:03:07.324 --> 00:03:11.539
That way he'll be able to see that the hash of his document C

00:03:11.539 --> 00:03:16.905
maps the original hash and he could be sure the document that he received wasn't altered.

00:03:16.905 --> 00:03:20.330
The problem is Bob doesn't have any way to be sure the hashes he

00:03:20.330 --> 00:03:24.020
received are correct unless he can verify that they all came from Alice,

00:03:24.020 --> 00:03:26.300
and Alice doesn't want to record all the hash from

00:03:26.300 --> 00:03:29.870
the blockchain because then she'd be in the same position she was before.

00:03:29.870 --> 00:03:32.930
Even though nobody can see what the data is inside,

00:03:32.930 --> 00:03:36.020
the whole world can see how many hashes she's making.

00:03:36.020 --> 00:03:40.280
But if you look closely Bob doesn't actually need to see

00:03:40.280 --> 00:03:42.110
all those hashes in order to verify that

00:03:42.110 --> 00:03:45.050
his hash is properly included in the Merkle root,

00:03:45.050 --> 00:03:47.060
just some of those hashes.

00:03:47.060 --> 00:03:52.090
This minimum number of hashes is what's called the Merkel proof.

00:03:52.090 --> 00:03:57.125
Let's look at what Alice's Merkel proof to Bob looks like in this case.

00:03:57.125 --> 00:04:00.409
For Alice to prove to Bob that document C was

00:04:00.409 --> 00:04:04.174
included in the Merkle root which Alice recorded at the blockchain,

00:04:04.175 --> 00:04:06.200
Alice must provide Bob with

00:04:06.199 --> 00:04:09.500
that minimum number of hashes which complete the tree for him.

00:04:09.500 --> 00:04:11.914
So, they can both agree on the route.

00:04:11.914 --> 00:04:15.754
Alice starts with the document that she needs to prove to Bob.

00:04:15.754 --> 00:04:20.464
Since the hash of that document was combined with a hash of something else,

00:04:20.464 --> 00:04:23.264
she needs to provide the hash she could bind it with.

00:04:23.264 --> 00:04:28.370
From there she combines it with another hash of hashes and on and on up to the root.

00:04:28.370 --> 00:04:31.009
Note that she only needs to provide the hash

00:04:31.009 --> 00:04:33.529
that was paired with each hash along the way,

00:04:33.529 --> 00:04:37.354
not the hash everything that went into the tree that she constructed.

00:04:37.355 --> 00:04:41.500
So that's the minimum set of hashes which make up the Merkel proof,

00:04:41.500 --> 00:04:45.170
and it's everything that Bob needs to verify that his document

00:04:45.170 --> 00:04:49.805
was included when Alice committed that Merkle root to the blockchain.

00:04:49.805 --> 00:04:52.324
One more interesting thing to note.

00:04:52.324 --> 00:04:54.500
There's no limit to the number of documents

00:04:54.500 --> 00:04:57.050
that Alice could have included in our Merkle tree.

00:04:57.050 --> 00:05:00.829
Furthermore, no matter how many documents she includes,

00:05:00.829 --> 00:05:05.180
the size of the Merkle root stays exactly the same. It's pretty cool.

00:05:05.180 --> 00:05:07.939
In this lesson, we explored the technique of

00:05:07.939 --> 00:05:12.110
Merkle hashes to protect not only the contents of documents,

00:05:12.110 --> 00:05:14.509
but the number of documents too,

00:05:14.509 --> 00:05:17.870
and it lets one value serve as the common truth between

00:05:17.870 --> 00:05:23.040
many actors all without having to write to the blockchain more than once.

