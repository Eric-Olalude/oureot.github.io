WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.065
Now that we've gone through zero-knowledge proofs at a high level,

00:00:04.065 --> 00:00:08.175
let's look at a zero-knowledge technique known as "zkSNARKs."

00:00:08.175 --> 00:00:10.410
This topic can get pretty complex.

00:00:10.410 --> 00:00:14.804
What we're going to do in this video is go through everything in small steps and then

00:00:14.804 --> 00:00:19.504
bring it all together at the end so that you can confidently understand zkSNARKs,

00:00:19.504 --> 00:00:24.765
be able to explain them to others and identify when to use them in your app development.

00:00:24.765 --> 00:00:29.160
Let's look at zkSNARKs at the high level first and then we'll dig in.

00:00:29.160 --> 00:00:32.929
What zkSNARKs do is allow you to verify with

00:00:32.929 --> 00:00:37.009
cryptographic certainty that someone else has computed a value

00:00:37.009 --> 00:00:39.829
and that they've done it by a process which you can

00:00:39.829 --> 00:00:44.464
verify all without having to witness the actual computation.

00:00:44.465 --> 00:00:49.340
A common use case for this is to ensure that someone else has some certain data,

00:00:49.340 --> 00:00:54.245
like a secret, but without them having to reveal what the data is.

00:00:54.244 --> 00:00:57.034
To illustrate this, let's use a variation

00:00:57.034 --> 00:01:00.289
of the problem Alice and Bob had from the previous video.

00:01:00.289 --> 00:01:04.969
In this case, Alice wants to know if Bob has a certain document.

00:01:04.969 --> 00:01:08.659
Alice could send hash of her document over to Bob,

00:01:08.659 --> 00:01:12.079
and then Bob could say, "Yeah, that matches."

00:01:12.079 --> 00:01:13.569
But in this case,

00:01:13.569 --> 00:01:16.729
Alice really doesn't have a way to know if Bob said yes

00:01:16.730 --> 00:01:21.255
because he truly has a document or if he just said yes.

00:01:21.254 --> 00:01:25.280
The way we can resolve this problem is using zkSNARKS.

00:01:25.280 --> 00:01:28.280
Alice can generate what's called a "Cryptographic

00:01:28.280 --> 00:01:31.489
Circuit," basically the engine of our zkSNARK.

00:01:31.489 --> 00:01:33.905
It acts like a small computer program.

00:01:33.905 --> 00:01:36.859
That computer program is going to take two inputs:

00:01:36.859 --> 00:01:40.519
the hash provided by Alice and the document cited by Bob.

00:01:40.519 --> 00:01:46.280
It then compute the hash of Bob's document and compares it to the hash provided by Alice,

00:01:46.280 --> 00:01:49.010
and returns true or false depending on if they match.

00:01:49.010 --> 00:01:51.454
The program runs on Bob's computer,

00:01:51.454 --> 00:01:55.114
so Bob does need to worry about revealing any kind of information

00:01:55.114 --> 00:01:59.419
and the output of the program is the proof of the program's execution.

00:01:59.420 --> 00:02:02.454
The neat thing is Bob can't fake the output.

00:02:02.454 --> 00:02:05.010
So, if he tried to change the program,

00:02:05.010 --> 00:02:06.984
or supplied the wrong input,

00:02:06.984 --> 00:02:09.560
or hide any data corrupted in transmission,

00:02:09.560 --> 00:02:12.965
he won't be able to generate a proof that Alice will accept.

00:02:12.965 --> 00:02:14.784
Or in other words,

00:02:14.784 --> 00:02:17.079
upon presenting the zkSNARK,

00:02:17.080 --> 00:02:21.350
Alice can be absolutely sure that Bob ran the program successfully,

00:02:21.349 --> 00:02:24.590
and therefore, Bob has the document he claims to have.

00:02:24.590 --> 00:02:26.450
Bob on the other hand,

00:02:26.449 --> 00:02:28.829
was able to prove to Alice that he has the document,

00:02:28.830 --> 00:02:31.219
but without revealing the actual contents.

00:02:31.219 --> 00:02:34.384
So, this way, he preserves privacy.

00:02:34.384 --> 00:02:38.629
So, what exactly is a zkSNARK?

00:02:38.629 --> 00:02:40.775
Well, l it's an acronym.

00:02:40.775 --> 00:02:46.650
It stands for Zero-Knowledge Succinct Non-Interactive Argument of Knowledge.

00:02:46.650 --> 00:02:50.129
That's a mouthful. So, let's break this down a bit.

00:02:50.129 --> 00:02:54.189
First the zk stands for zero-knowledge.

00:02:54.189 --> 00:02:58.009
Just like how the baseball example and the red card example worked,

00:02:58.009 --> 00:03:02.090
you can prove something without showing anything more than just that.

00:03:02.090 --> 00:03:04.939
The rest of the acronym is what differentiates

00:03:04.939 --> 00:03:08.229
this type of proof from any other zero-knowledge proof.

00:03:08.229 --> 00:03:11.609
Next, S is for Succinct.

00:03:11.610 --> 00:03:16.325
So, succinct in this case deals with the size of the proof that's generated,

00:03:16.324 --> 00:03:20.179
relative to the size of the knowledge that you claim to possess.

00:03:20.180 --> 00:03:23.210
This is especially important in blockchain applications,

00:03:23.210 --> 00:03:26.960
where writing, storing data on the block chain can be very expensive.

00:03:26.960 --> 00:03:30.159
The N stands for non-interactive.

00:03:30.159 --> 00:03:32.750
That's the cool feature where you got to generate

00:03:32.750 --> 00:03:35.344
a proof that's sufficient proof for everyone.

00:03:35.344 --> 00:03:39.680
This is another super-useful thing for blockchain applications since we won't

00:03:39.680 --> 00:03:44.215
always be able to host interactive proof sessions between everyone on the chain.

00:03:44.215 --> 00:03:47.765
AR stands for arguments.

00:03:47.764 --> 00:03:51.379
Arguments in this case is what we've been calling the proof.

00:03:51.379 --> 00:03:55.909
The distinction and the cartography between arguments and proof is kind of subtle.

00:03:55.909 --> 00:03:58.219
So, we won't really go into great detail here,

00:03:58.219 --> 00:04:00.395
but it's easy to think about like this.

00:04:00.395 --> 00:04:04.490
In court, when a lawyer wants to prove something is true,

00:04:04.490 --> 00:04:06.890
they provide arguments to support it.

00:04:06.889 --> 00:04:11.419
It's the evidence and logic that they use to prove the existence of a fact.

00:04:11.419 --> 00:04:14.509
Finally, the K stands for knowledge.

00:04:14.509 --> 00:04:16.745
This is what you're trying to prove you have

00:04:16.745 --> 00:04:19.324
without revealing the actual knowledge itself.

00:04:19.324 --> 00:04:22.144
So, now you know what does zkSNARK is.

00:04:22.144 --> 00:04:23.569
Or if you prefer,

00:04:23.569 --> 00:04:27.050
a Zero-Knowledge to Succint Non-Interactive Argument of Knowledge.

00:04:27.050 --> 00:04:30.740
For your development, this means that in a single statement,

00:04:30.740 --> 00:04:32.478
you can quickly prove something,

00:04:32.478 --> 00:04:34.969
without interacting with anyone else in a way

00:04:34.970 --> 00:04:38.044
that's very difficult to hack can't be replicated,

00:04:38.043 --> 00:04:43.299
and can be done without you needed to tell anyone what you're trying to prove.

