WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.385
Welcome back. At this point,

00:00:02.385 --> 00:00:05.865
we have laid out the primary goals of a supply chain contract.

00:00:05.865 --> 00:00:09.870
The next step is to translate this general outline into

00:00:09.870 --> 00:00:14.175
a few comments that we can use to guide our coding decisions down the road.

00:00:14.175 --> 00:00:16.980
Now, this should be quick, so let's get right into it.

00:00:16.980 --> 00:00:20.610
I'm going to be using the Remix editor to write a contract.

00:00:20.610 --> 00:00:23.070
If you have not been using this editor already,

00:00:23.070 --> 00:00:27.420
you can go here by using going to remix.ethereum.org.

00:00:27.420 --> 00:00:30.650
I will also have the link for this below this video for you.

00:00:30.650 --> 00:00:32.150
Now, let me walk you through

00:00:32.150 --> 00:00:35.825
the basic structure that we will build out for a smart contract.

00:00:35.825 --> 00:00:38.600
The first thing we need to do is define variables.

00:00:38.600 --> 00:00:40.190
So, we have two variables here.

00:00:40.190 --> 00:00:43.380
Owner variable and the skuCount variable, okay?

00:00:43.380 --> 00:00:46.775
For storing the SKU of every single item that is going to be unique.

00:00:46.775 --> 00:00:51.290
Then, we will also need to create a way to track the state of an item.

00:00:51.290 --> 00:00:54.225
Is it for sale? Is it for sold or is it sold?

00:00:54.225 --> 00:00:55.405
So, we're going to have enums.

00:00:55.405 --> 00:00:57.005
We're going to use enums for that.

00:00:57.005 --> 00:00:58.610
We will see that shortly.

00:00:58.610 --> 00:01:00.785
Then, we'll also create a struct.

00:01:00.785 --> 00:01:03.995
Remember Struct is a user-defined type in solidity,

00:01:03.995 --> 00:01:06.710
so we're going to be using a struct to

00:01:06.710 --> 00:01:09.895
have all the different details stored of the specific item.

00:01:09.895 --> 00:01:12.775
This could include the name, the price,

00:01:12.775 --> 00:01:14.275
the SKU, the state,

00:01:14.275 --> 00:01:16.910
the seller and the buyer of that specific item.

00:01:16.910 --> 00:01:18.520
Now, let's see what next.

00:01:18.520 --> 00:01:21.595
Now, every item will also have a different SKU.

00:01:21.595 --> 00:01:25.490
To map the different item we sell by its SKU, we can use mapping.

00:01:25.490 --> 00:01:29.795
So, we'll be using mapping to assign every single item a different SKU.

00:01:29.795 --> 00:01:32.240
They will also define two different events,

00:01:32.240 --> 00:01:34.790
for sale event and sold event.

00:01:34.790 --> 00:01:37.545
Now, we will also need to write some modifiers.

00:01:37.545 --> 00:01:39.405
I'm going to write five modifiers here.

00:01:39.405 --> 00:01:41.290
Okay. Now, remember what a modifier is.

00:01:41.290 --> 00:01:44.900
Modifiers are used to write some checks before the function is run.

00:01:44.900 --> 00:01:47.420
For example, how do you check that an item is

00:01:47.420 --> 00:01:50.750
actually for sale before it is available for someone to buy?

00:01:50.750 --> 00:01:55.360
How do you verify that the person buying the lemonade has paid enough?

00:01:55.360 --> 00:01:57.255
This is done using modifiers.

00:01:57.255 --> 00:02:01.415
Now, it is up to us to decide what checks we want to put in place.

00:02:01.415 --> 00:02:04.055
For this contract, I would like to be able to check

00:02:04.055 --> 00:02:07.535
a few things and we will need a separate modifier for each.

00:02:07.535 --> 00:02:09.380
Once we get these written out,

00:02:09.380 --> 00:02:13.115
we will be passing them into the functions we write as check points.

00:02:13.115 --> 00:02:17.315
I would like to be able to check that the message center is the owner of the contract.

00:02:17.315 --> 00:02:20.190
For this, you'll use the modifier, "Only owner".

00:02:20.190 --> 00:02:23.560
I would also like to verify the color of the contract,

00:02:23.560 --> 00:02:24.840
we will use a modifier,

00:02:24.840 --> 00:02:26.540
Verify caller for that.

00:02:26.540 --> 00:02:31.460
I would also like to check if the amount paid covers the price of the lemonade,

00:02:31.460 --> 00:02:34.250
we will right the modifier, Paid enough for that.

00:02:34.250 --> 00:02:37.060
I would also like to check that the lemonade is actually

00:02:37.060 --> 00:02:39.835
for sale at the time someone is trying to buy it.

00:02:39.835 --> 00:02:42.565
For that, we will have a modifier, For sale.

00:02:42.565 --> 00:02:45.700
Then, I would also like to check when someone is actually

00:02:45.700 --> 00:02:48.710
trying to buy a modified we need to make sure that it's actually not sold.

00:02:48.710 --> 00:02:51.270
So, we will have a modifier, Sold for that.

00:02:51.270 --> 00:02:53.940
Okay. Then, we will also write our function.

00:02:53.940 --> 00:02:56.200
We will start with the constructor function to set

00:02:56.200 --> 00:02:59.095
some initial values and then we will have three functions;

00:02:59.095 --> 00:03:01.820
add item, buy item and fetch item.

00:03:01.820 --> 00:03:03.570
All right, so that's everything.

00:03:03.570 --> 00:03:06.000
We will be creating in our smart contract,

00:03:06.000 --> 00:03:07.890
the lemonade stand smart contract.

00:03:07.890 --> 00:03:11.890
Everything we're doing in this contract is taking shape now.

00:03:11.890 --> 00:03:14.785
So, we'll start writing up the code in the next section.

00:03:14.785 --> 00:03:17.360
So, when you're ready, let's get started.

