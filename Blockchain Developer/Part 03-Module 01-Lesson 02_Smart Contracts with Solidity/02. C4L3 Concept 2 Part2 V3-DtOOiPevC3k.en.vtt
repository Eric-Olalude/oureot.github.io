WEBVTT
Kind: captions
Language: en

00:00:00.470 --> 00:00:05.325
I'm going to now walk you through a simple life-cycle of a contract.

00:00:05.325 --> 00:00:09.765
This will really help you understand this topic from a broader perspective.

00:00:09.765 --> 00:00:13.605
So, we start with developing or writing a contract,

00:00:13.605 --> 00:00:19.394
then we deploy it to a local test network or any of the public networks.

00:00:19.394 --> 00:00:25.064
Once deployed, we get an address back as to where the contract is deployed.

00:00:25.065 --> 00:00:30.539
Using this address, we can invoke it and call various functions on it.

00:00:30.539 --> 00:00:34.320
Once a contract has finished its purpose,

00:00:34.320 --> 00:00:37.409
it is always a good idea to destruct it,

00:00:37.409 --> 00:00:41.084
which means that no one can call functions on it anymore.

00:00:41.085 --> 00:00:45.304
Let's look at all these various steps that we've just talked about.

00:00:45.304 --> 00:00:47.284
For writing a smart contract,

00:00:47.284 --> 00:00:48.529
like I already mentioned,

00:00:48.530 --> 00:00:51.200
we will be using solidity for this course.

00:00:51.200 --> 00:00:56.335
You can use Visual Studio Code with Solidity Plugin added to it.

00:00:56.335 --> 00:01:01.774
You can also use any of your favorite editors or you can always use truffle.

00:01:01.774 --> 00:01:06.754
Or the best way to get started is to use remix online editor.

00:01:06.754 --> 00:01:10.269
I will walk you through remix in the next concept.

00:01:10.269 --> 00:01:16.155
Also, wanted to mention that solidity files have a.sol extension.

00:01:16.155 --> 00:01:19.775
It is a strongly typed language what that means

00:01:19.775 --> 00:01:23.875
is that the type of the variable should be defined when you declared the variable.

00:01:23.875 --> 00:01:27.575
It is similar to JavaScript syntax wise,

00:01:27.575 --> 00:01:33.310
but I personally think there are quite a bit of differences too. Moving on.

00:01:33.310 --> 00:01:35.170
Once you have written a contract,

00:01:35.170 --> 00:01:37.010
the next step is to compile it.

00:01:37.010 --> 00:01:39.900
The compiler output two things,

00:01:39.900 --> 00:01:42.344
the byte code and the ABI.

00:01:42.344 --> 00:01:45.819
ABI stands for Application Binary Interface.

00:01:45.819 --> 00:01:48.849
Byte code is what is deployed to the network,

00:01:48.849 --> 00:01:52.119
this is more like machine-level code hard to understand.

00:01:52.120 --> 00:01:54.780
But ABI is also sent along.

00:01:54.780 --> 00:01:59.320
ABI is actually used to interact with an already deployed contract.

00:01:59.319 --> 00:02:01.164
ABI is more readable.

00:02:01.165 --> 00:02:02.635
If you look at the ABI,

00:02:02.635 --> 00:02:06.090
we will see what variables and functions the contract has.

00:02:06.090 --> 00:02:10.189
So, we can call these functions from our application side.

00:02:10.189 --> 00:02:13.699
Like I already mentioned, after compiling,

00:02:13.699 --> 00:02:19.084
we deploy a contract to any of the public networks or the local test network.

00:02:19.085 --> 00:02:22.370
Let's consider the Rinkeby public tests network.

00:02:22.370 --> 00:02:24.099
Once we write a contract,

00:02:24.099 --> 00:02:27.530
I want you to imagine like a class in C or Java.

00:02:27.530 --> 00:02:29.134
When we create a class,

00:02:29.134 --> 00:02:31.579
they may create instances of the class, right?

00:02:31.580 --> 00:02:34.590
So, this contract is just like a class.

00:02:34.590 --> 00:02:38.879
When we deploy it, we actually deploy an instance of the contract.

00:02:38.879 --> 00:02:42.109
So, if we deploy this contract multiple times,

00:02:42.110 --> 00:02:44.465
we create different instances everytime.

00:02:44.465 --> 00:02:48.659
Every instance of the contract will have its own address.

00:02:48.789 --> 00:02:51.289
After deploying the contract,

00:02:51.289 --> 00:02:52.804
we will get an address back.

00:02:52.805 --> 00:02:54.754
Now, this is a contracts address.

00:02:54.754 --> 00:02:57.604
To invoke it, we will need this address.

00:02:57.604 --> 00:03:01.185
They can use online wallets to interact with their contract.

00:03:01.185 --> 00:03:02.865
There are desktop wallet too,

00:03:02.865 --> 00:03:04.170
like the Ethereum wallet.

00:03:04.169 --> 00:03:07.214
There are also hardware wallets like Ledger, Trezor.

00:03:07.215 --> 00:03:10.425
As programmers, you can also write your own DAP,

00:03:10.425 --> 00:03:12.960
which stands for decentralized application,

00:03:12.960 --> 00:03:16.170
that uses Web3 interrupt with our contract.

00:03:16.169 --> 00:03:19.429
Web3 is the only programmatic way that

00:03:19.430 --> 00:03:23.360
can connect any front-end application to the Ethereum world.

00:03:23.360 --> 00:03:28.055
I'm going to now walk you through a basic smart contract layout.

00:03:28.055 --> 00:03:30.319
If you look at the first line the pragma,

00:03:30.319 --> 00:03:35.664
the pragma would specify the version of solidity that we're writing inside this file.

00:03:35.664 --> 00:03:38.608
When this code is fed into the compiler,

00:03:38.609 --> 00:03:41.705
the compiler will look out for the specific version.

00:03:41.705 --> 00:03:43.895
So, your code does not break.

00:03:43.895 --> 00:03:47.485
The word contract is similar to classes in Java.

00:03:47.485 --> 00:03:50.300
Remember, all these contracts that you and I are

00:03:50.300 --> 00:03:53.719
writing can really be thought of as being classes,

00:03:53.719 --> 00:03:56.854
and when we deploy these contracts to any Ethereum network,

00:03:56.854 --> 00:04:02.044
those deployed versions can be thought of as instances of this class.

00:04:02.044 --> 00:04:04.548
Then you define your storage variables.

00:04:04.549 --> 00:04:08.270
Now, these are variables that will exist for the life of

00:04:08.270 --> 00:04:13.400
the contract and are automatically stored along with the contract on the blockchain.

00:04:13.400 --> 00:04:18.194
Any variables outside the functions are called storage variables.

00:04:18.194 --> 00:04:20.474
Then we declare our events.

00:04:20.475 --> 00:04:24.350
The contract can emit events when certain conditions are met.

00:04:24.350 --> 00:04:26.945
They can write the frontend application,

00:04:26.944 --> 00:04:28.550
the watch for these events,

00:04:28.550 --> 00:04:30.800
we will talk about more events later.

00:04:30.800 --> 00:04:33.290
Then we have a function defined.

00:04:33.290 --> 00:04:36.290
This is just a sample smart contract.

00:04:36.290 --> 00:04:38.585
It starts with the pragma line,

00:04:38.584 --> 00:04:41.254
then we define the contract with the keyword

00:04:41.254 --> 00:04:44.144
"contract" and then the name of the contract.

00:04:44.144 --> 00:04:49.254
The word string means that this variable will only ever contain a string.

00:04:49.254 --> 00:04:53.935
Public means who has access to look at the contents of this variable.

00:04:53.935 --> 00:04:56.615
Then we have the name of the variable.

00:04:56.615 --> 00:05:00.954
We will talk about the syntax in detail in a future concepts.

00:05:00.954 --> 00:05:03.534
Then we have our constructor function.

00:05:03.535 --> 00:05:06.280
This is declared with the keyword "constructor".

00:05:06.279 --> 00:05:11.000
This function is automatically called when we initiate the contract.

00:05:11.000 --> 00:05:16.314
We can pass any initial arguments right here to the constructor function.

00:05:16.314 --> 00:05:19.300
Then we have a getName function.

00:05:19.300 --> 00:05:21.800
One thing I wanted to mention is that.

00:05:21.800 --> 00:05:27.100
Anytime we create public storage variables like name in this case,

00:05:27.100 --> 00:05:30.730
an automatic get function is created for this variable.

00:05:30.730 --> 00:05:34.254
So, the getName function is not required at all.

00:05:34.254 --> 00:05:36.769
But I just wanted you to look at this so I

00:05:36.769 --> 00:05:39.484
could explain you that this function is not required.

00:05:39.485 --> 00:05:42.470
The next is the setName function.

00:05:42.470 --> 00:05:46.880
This is now just a high level view of what the smart contract looks like,

00:05:46.879 --> 00:05:51.449
we will cover all these topics in detail in our future concepts.

