WEBVTT
Kind: captions
Language: en

00:00:00.050 --> 00:00:05.234
Now, there are many ways you can get started creating your own tokens.

00:00:05.235 --> 00:00:07.460
I'm going to show you a couple of ways,

00:00:07.459 --> 00:00:09.000
in fact, two different ways.

00:00:09.000 --> 00:00:12.240
In the first way, we will implement all these functions

00:00:12.240 --> 00:00:16.410
ourselves and then deploy it to locally running JavaScript VM.

00:00:16.410 --> 00:00:20.925
Now, I'm in my Remix right now and we have the JavaScript Virtual Machine,

00:00:20.925 --> 00:00:23.969
which is an in-browser Ethereum Network running in right now.

00:00:23.969 --> 00:00:26.234
We will use Remix for this whole process,

00:00:26.234 --> 00:00:29.564
which is my step number one or my process number one.

00:00:29.565 --> 00:00:33.420
Now, I'm going to do this to show you basic function implementation.

00:00:33.420 --> 00:00:36.435
So, all the functions that I just showed you in my last video,

00:00:36.435 --> 00:00:39.450
that you have to implement the mapping and the transfer events,

00:00:39.450 --> 00:00:41.190
we're going to write these functions down.

00:00:41.189 --> 00:00:42.969
But, also at the same time,

00:00:42.969 --> 00:00:46.310
I will let you know that we're not going to implement any error handling yet.

00:00:46.310 --> 00:00:51.030
So, I'm not going to deploy any public network using this process.

00:00:51.380 --> 00:00:54.700
My second way that I'm going to show you in the next video is,

00:00:54.700 --> 00:00:56.155
of course, going to be my preferred way.

00:00:56.155 --> 00:00:59.164
But, for this is something really important because

00:00:59.164 --> 00:01:02.879
it really help you understand how this whole thing works, okay?

00:01:02.880 --> 00:01:04.350
So, let's walk through,

00:01:04.349 --> 00:01:06.409
so all these functions that we just talked about,

00:01:06.409 --> 00:01:08.739
if you look in my standards that I showed you.

00:01:08.739 --> 00:01:10.649
So, this is a basic standard what it looks like.

00:01:10.650 --> 00:01:12.170
We talked about in the previous video.

00:01:12.170 --> 00:01:14.030
So, now implement this,

00:01:14.030 --> 00:01:16.159
now this is a file that I'm implementing,

00:01:16.159 --> 00:01:19.424
so calling it contract myToken is a name of my token.

00:01:19.424 --> 00:01:24.914
So, if you see we have three optional things here,

00:01:24.915 --> 00:01:26.100
so I have the name, symbol,

00:01:26.099 --> 00:01:27.659
decimals, and I'm going to implement that.

00:01:27.659 --> 00:01:28.814
So, I'm going to see my name,

00:01:28.814 --> 00:01:30.465
I'm going to call it Udacity Token,

00:01:30.465 --> 00:01:32.680
and I'm going give it a symbol of this and this.

00:01:32.680 --> 00:01:36.590
I'm also setting a initial supply to total supply.

00:01:36.590 --> 00:01:39.685
What I'm doing is that in my constructor function,

00:01:39.685 --> 00:01:41.805
whenever I initiated the contract,

00:01:41.805 --> 00:01:43.180
I'm getting an amount,

00:01:43.180 --> 00:01:45.860
and I'm setting my total amounts to those many tokens.

00:01:45.859 --> 00:01:48.920
So, that means when the contract is initiated,

00:01:48.920 --> 00:01:51.109
it's going to set the total initial supply,

00:01:51.109 --> 00:01:54.379
which is _totalSupply as per the input argument,

00:01:54.379 --> 00:01:57.185
and we'll talk about that in just a second,

00:01:57.185 --> 00:01:58.715
and then we have a mapping,

00:01:58.715 --> 00:02:00.995
that is storing the balances, like I said,

00:02:00.995 --> 00:02:04.185
"The best way to implement the storing your balances,

00:02:04.185 --> 00:02:05.609
is using a mapping."

00:02:05.609 --> 00:02:07.859
So, this is about mapping for each account,

00:02:07.859 --> 00:02:09.645
stored using a mapping,

00:02:09.645 --> 00:02:11.409
address of the account,

00:02:11.409 --> 00:02:13.939
and the number of tokens at the address has.

00:02:13.939 --> 00:02:17.525
Now, we will talk about mapping in just a second for the second allowance,

00:02:17.525 --> 00:02:19.700
but let's just talk about the constructor function.

00:02:19.699 --> 00:02:21.589
So, what we're doing in the constructor function

00:02:21.590 --> 00:02:23.390
like I said this is called automatically,

00:02:23.389 --> 00:02:24.919
when the contract is initiated.

00:02:24.919 --> 00:02:28.859
It sets the total supply as per whatever the input was received,

00:02:28.860 --> 00:02:32.825
and it also gives the initial supply to the msg.sender.

00:02:32.824 --> 00:02:36.139
Remember the msg.sender is the one who is initiating the contract,

00:02:36.139 --> 00:02:38.704
we learned about this in one of our previous videos.

00:02:38.705 --> 00:02:42.969
So, what it's doing is that it's accessing the balances, mapping,

00:02:42.969 --> 00:02:45.740
with the square bracket notation like we logged in mapping,

00:02:45.740 --> 00:02:47.719
of the msg.sender, and it's setting.

00:02:47.719 --> 00:02:50.449
So, it's giving all the initial supply of whatever

00:02:50.449 --> 00:02:53.799
the number of token to the person who is creating the contract.

00:02:53.800 --> 00:02:55.700
So, that's happening in the constructor function.

00:02:55.699 --> 00:02:59.389
Now, the next mapping we're implementing here is,

00:02:59.389 --> 00:03:02.209
now remember we talked about forth allowance.

00:03:02.210 --> 00:03:05.344
That one address can allow another address to spend

00:03:05.344 --> 00:03:08.969
these many number of tokens from the initial owner's account.

00:03:08.969 --> 00:03:11.930
So, what we're doing is that we are someone from the owner of the account,

00:03:11.930 --> 00:03:14.045
it proves the allowance for another account,

00:03:14.044 --> 00:03:16.669
creating an allowance, mapping, right there.

00:03:16.669 --> 00:03:19.164
So, this is a mapping of an address,

00:03:19.164 --> 00:03:21.090
and another mapping inside it.

00:03:21.090 --> 00:03:23.969
So, the first key is the owner of the tokens,

00:03:23.969 --> 00:03:26.819
this address, and the second mapping it says,

00:03:26.819 --> 00:03:28.949
"Who can spend on your behalf, and how much?"

00:03:28.949 --> 00:03:33.199
So, which address can spend how much, forward address.

00:03:33.199 --> 00:03:36.348
So, we are creating a mapping with the keys and address,

00:03:36.348 --> 00:03:40.139
and the value is further a mapping of address to amount.

00:03:40.189 --> 00:03:43.444
So, that's the two mappings we're implementing here,

00:03:43.444 --> 00:03:45.739
and then we have two events we talked about.

00:03:45.740 --> 00:03:47.525
We are supposed if you look in the standards,

00:03:47.525 --> 00:03:49.099
we are supposed to implement two events,

00:03:49.099 --> 00:03:52.310
so all I'm doing is at implementing or writing those two events down.

00:03:52.310 --> 00:03:54.080
Now, these are the six functions,

00:03:54.080 --> 00:03:55.520
of course, we have the constructor function,

00:03:55.520 --> 00:03:58.945
and these are the mandatory functions, totalSupply, balanceOf,

00:03:58.944 --> 00:04:02.114
transfer, transferFrom, and approved, and, of course,

00:04:02.115 --> 00:04:04.020
allowance, is this one right there,

00:04:04.020 --> 00:04:06.615
which will also be a function.

00:04:06.615 --> 00:04:10.525
So, now let's talk about the very first function we have the balanceOf.

00:04:10.525 --> 00:04:12.740
Now, the total supply in fact the first one,

00:04:12.740 --> 00:04:15.950
the total supply all it does is that returns the total supply of tokens.

00:04:15.949 --> 00:04:17.464
So, if you call this function,

00:04:17.464 --> 00:04:19.279
is going to give you the total supply back.

00:04:19.279 --> 00:04:22.250
Now, this is a supply that we initially set in our constructor function.

00:04:22.250 --> 00:04:24.519
That's the first function, the second function

00:04:24.519 --> 00:04:26.604
we're implementing is the balance of function.

00:04:26.605 --> 00:04:29.780
So, it's getting an address of the token owner.

00:04:29.779 --> 00:04:31.684
That means and, again, a public function,

00:04:31.685 --> 00:04:34.870
that means anyone can query and find the balance of an address.

00:04:34.870 --> 00:04:39.235
So, this function it gets the token balance for an account token owner,

00:04:39.235 --> 00:04:40.629
and it returns the balance.

00:04:40.629 --> 00:04:42.600
So, if you see the return values are uint value.

00:04:42.600 --> 00:04:44.235
So, we're accessing the balances,

00:04:44.235 --> 00:04:47.754
mapping for the address given to us with a square bracket notation.

00:04:47.754 --> 00:04:49.904
This is how you access mappings,

00:04:49.904 --> 00:04:51.464
and then you're returning it.

00:04:51.464 --> 00:04:53.209
So, that's the second function,

00:04:53.209 --> 00:04:56.589
and the third function that we are implementing here is a transfer function.

00:04:56.589 --> 00:04:58.719
Now, again, if you see these are all the functions that are

00:04:58.720 --> 00:05:01.105
pretty much coming from my standards. Again, I'm going to show you.

00:05:01.105 --> 00:05:04.620
We are having three optional things.

00:05:04.620 --> 00:05:06.360
We have two event and six functions.

00:05:06.360 --> 00:05:08.550
Now, this is anytime you implement these functions,

00:05:08.550 --> 00:05:12.680
it is mandatory, that's the only way you can make an ERC-20 standard token.

00:05:12.680 --> 00:05:15.329
So, the next function,

00:05:15.329 --> 00:05:16.879
so we talked about totalSupply,

00:05:16.879 --> 00:05:18.120
the next function is balanceOf,

00:05:18.120 --> 00:05:21.819
we talked about that, and then we have more functions after that,

00:05:21.819 --> 00:05:23.694
the next is the transfer function.

00:05:23.694 --> 00:05:25.939
Now, what this is doing is that it's transfer them

00:05:25.939 --> 00:05:28.939
balance from the owner's account to another account.

00:05:28.939 --> 00:05:30.930
Of course, it's going to so once it transfers,

00:05:30.930 --> 00:05:32.079
you'd have two parameters;

00:05:32.079 --> 00:05:34.099
input parameters two tokens.

00:05:34.100 --> 00:05:37.370
So, it sets, so whoever is initiating or calling this function,

00:05:37.370 --> 00:05:40.069
it's taking the balance from that msg.sender,

00:05:40.069 --> 00:05:42.384
and then subtracting the balance.

00:05:42.384 --> 00:05:46.019
So, I said it decreases the balance from the from account,

00:05:46.019 --> 00:05:48.974
increases the balance of the to account where it's going to,

00:05:48.975 --> 00:05:50.814
and it also emitted transfer event.

00:05:50.814 --> 00:05:53.449
Okay, and then the returns are true or false, simple.

00:05:53.449 --> 00:05:56.449
So, if you look at it just one or two times, it's going to get pretty clear.

00:05:56.449 --> 00:06:00.094
It's pretty simple to implement these ERC-20 standards,

00:06:00.095 --> 00:06:02.590
and the second is a transferFrom function.

00:06:02.589 --> 00:06:06.149
Now, we talked about this is another way of transferring.

00:06:06.149 --> 00:06:09.709
So, it's sending an amount of tokens from the from address,

00:06:09.709 --> 00:06:12.134
to address, and the number of tokens,

00:06:12.134 --> 00:06:13.935
and again returns a success.

00:06:13.935 --> 00:06:17.535
Now, the transferFrom function we talked about in our previous video,

00:06:17.535 --> 00:06:19.300
is used to allow contracts,

00:06:19.300 --> 00:06:21.634
to spend tokens on your behalf.

00:06:21.634 --> 00:06:24.459
So, it spends token on your behalf,

00:06:24.459 --> 00:06:26.870
and it also decreases the balance from the

00:06:26.870 --> 00:06:29.819
from account because it's going away from the from account,

00:06:29.819 --> 00:06:35.790
and it also, is going to decrease allowance because this had an allowance, right?

00:06:35.790 --> 00:06:37.560
So, initially when you gave an approval,

00:06:37.560 --> 00:06:39.240
we'll talk about approve in just a second.

00:06:39.240 --> 00:06:40.910
But, it's also going to decrease,

00:06:40.910 --> 00:06:43.670
if this account was approved to spend these many tokens,

00:06:43.670 --> 00:06:45.199
since it's spending these many tokens,

00:06:45.199 --> 00:06:46.925
we need to decrease that allowance, right?

00:06:46.925 --> 00:06:48.199
So, we're going to decrease that.

00:06:48.199 --> 00:06:51.229
Now, since remember allowance was a mapping, inside another mapping.

00:06:51.230 --> 00:06:57.160
So, would accessing good with a double notations allowance, from in msg.sender,

00:06:57.160 --> 00:07:01.100
and then we have our allowance this and then be decreasing that allowance,

00:07:01.100 --> 00:07:03.660
and then when transferring tokens, to address.

00:07:03.660 --> 00:07:06.260
So, whatever the two address that's we'd need to transfer it,

00:07:06.259 --> 00:07:07.925
to what transferring the number of tokens,

00:07:07.925 --> 00:07:11.125
and then we're emitting the transfer event, and then return true.

00:07:11.125 --> 00:07:13.230
Then, we have a function approved.

00:07:13.230 --> 00:07:15.740
Now, this approved the spender to withdraw from

00:07:15.740 --> 00:07:18.715
your account multiple times up to the token amount.

00:07:18.714 --> 00:07:22.514
So, the msg.sender is approving this spender to spend

00:07:22.514 --> 00:07:27.784
these many tokens from the msg.sender's account.

00:07:27.785 --> 00:07:30.820
Not also sets up allowance mapping accordingly.

00:07:30.819 --> 00:07:33.935
This is what is creating the mapping right here,

00:07:33.935 --> 00:07:36.665
and it also emit the approval event,

00:07:36.665 --> 00:07:38.060
so we have two events remember,

00:07:38.060 --> 00:07:40.160
we have the transfer event, the approval event.

00:07:40.160 --> 00:07:41.960
Since we are approving an account,

00:07:41.959 --> 00:07:44.549
to spend money from another account.

00:07:44.550 --> 00:07:48.050
So, we're sending an approval event which is this way, and return true.

00:07:48.050 --> 00:07:50.629
So, now this is how you deploy,

00:07:50.629 --> 00:07:53.000
or you create or implement these standards.

00:07:53.000 --> 00:07:56.329
Now, I'm going to deploy this to a local JavaScript machine right now.

00:07:56.329 --> 00:07:58.250
Now, again, just wanted to show you that this

00:07:58.250 --> 00:08:00.800
is just a basic way of implementing functions,

00:08:00.800 --> 00:08:02.410
I have not really completely written,

00:08:02.410 --> 00:08:06.155
but I definitely wanted you to walk through how these all events happen.

00:08:06.154 --> 00:08:08.569
It's not implementing the error handling yet.

00:08:08.569 --> 00:08:11.149
So, it might be rejected as a standardized token,

00:08:11.149 --> 00:08:14.314
but I'm sure it gave you a nice understanding of these functions,

00:08:14.314 --> 00:08:18.500
and but I would definitely encourage you to use my next option in the next video,

00:08:18.500 --> 00:08:20.720
which will go through, but let's go deploy for now.

00:08:20.720 --> 00:08:25.165
So, I'm going to go deploy to my local JavaScript machine running right here.

00:08:25.165 --> 00:08:27.500
So, if you see I'm in a JavaScript environment right now.

00:08:27.500 --> 00:08:30.709
So, I'm going to take my tokens is given an initial supply of,

00:08:30.709 --> 00:08:32.389
okay 1,000, we'll start 1,000,

00:08:32.389 --> 00:08:34.919
and then we're going to deploy it.

00:08:34.919 --> 00:08:38.000
Now, you can also go right there and then look at what's going on.

00:08:38.000 --> 00:08:41.809
So, if you see it comes back with a hash that means everything went fine.

00:08:41.809 --> 00:08:44.029
I'm going to click on this little button right here,

00:08:44.029 --> 00:08:48.100
so if you see my contract has been deployed this is the address of the contract.

00:08:48.100 --> 00:08:49.295
So, that's the address.

00:08:49.294 --> 00:08:51.814
So, again, we're in the local JavaScript machine,

00:08:51.815 --> 00:08:54.605
so we really are not able to go to Ether scan right now.

00:08:54.605 --> 00:08:56.000
We'll do that in the next video,

00:08:56.000 --> 00:08:57.139
but just to local machine,

00:08:57.139 --> 00:08:58.639
the coined, that token is deployed.

00:08:58.639 --> 00:09:01.889
Now, let's go click on totalSupply, income to be 1,000,

00:09:01.889 --> 00:09:05.090
remember this is what the constructor function did to totalSupply,

00:09:05.090 --> 00:09:07.399
and also remember, in my constructor function I gave

00:09:07.399 --> 00:09:11.389
my whole initial balance to the msg.center or the person who created the account,

00:09:11.389 --> 00:09:12.730
so lets go see if that happened.

00:09:12.730 --> 00:09:14.825
So, I'm going to copy this address,

00:09:14.825 --> 00:09:17.890
this is the one that I initiated the contract with, right?

00:09:17.889 --> 00:09:20.980
I'm going to go paste it in my balanceOf.

00:09:20.980 --> 00:09:22.789
So, let's go check the balance of this address,

00:09:22.789 --> 00:09:25.115
and I'm supposing this should be 1,000, which it is.

00:09:25.115 --> 00:09:28.789
Fantastic. Now, let's also try transferring,

00:09:28.789 --> 00:09:31.549
some tokens from one account to another account.

00:09:31.549 --> 00:09:33.659
So, I'm going to go in my this environment,

00:09:33.659 --> 00:09:35.189
I'm going to go, let's say,

00:09:35.190 --> 00:09:37.875
so we deployed from this address 147.

00:09:37.875 --> 00:09:39.250
So, let's go pick another address,

00:09:39.250 --> 00:09:40.595
I'm going to go pick the first one,

00:09:40.595 --> 00:09:41.779
and copy the address,

00:09:41.779 --> 00:09:43.625
you click on this small button to copy it,

00:09:43.625 --> 00:09:46.264
and then I'm going to go transfer.

00:09:46.264 --> 00:09:48.639
I'm going to go back to my this account.

00:09:48.639 --> 00:09:50.699
Then, if you've seen that transfer,

00:09:50.700 --> 00:09:52.170
I can transfer to.

00:09:52.169 --> 00:09:54.349
So, I'm going to transfer to my one of

00:09:54.350 --> 00:09:56.840
the other addresses that's given to me by the JavaScript VM,

00:09:56.840 --> 00:09:58.925
I'm going to say, "I want to transfer 10 tokens."

00:09:58.924 --> 00:10:01.314
So, let's click on the transfer event.

00:10:01.315 --> 00:10:03.055
Now, once that goes through,

00:10:03.054 --> 00:10:05.704
now let's go find the balance of this.

00:10:05.705 --> 00:10:07.879
I'm going to go, again, find the balance,

00:10:07.879 --> 00:10:10.539
of my address that I just transferred to,

00:10:10.539 --> 00:10:12.799
and let's see I'm supposing this balance should be 10.

00:10:12.799 --> 00:10:15.919
Fantastic, and the balance of the one it transferred from,

00:10:15.919 --> 00:10:18.409
should now be decreased to 990.

00:10:18.409 --> 00:10:23.064
Let's again try that. So, the balance of this one goes to lower.

00:10:23.065 --> 00:10:25.345
Again, you can always query on the name,

00:10:25.345 --> 00:10:26.740
we had Udacity Token,

00:10:26.740 --> 00:10:28.060
we had a symbol,

00:10:28.059 --> 00:10:30.789
already showed you we had decimals of 18,

00:10:30.789 --> 00:10:33.879
so all these functions you can always try the transferFrom function.

00:10:33.879 --> 00:10:37.814
Now, this is just a simple way of understanding how all of these functions work.

00:10:37.815 --> 00:10:42.900
But, in my next video, we're actually going to go deploy it to a public test network.

00:10:42.899 --> 00:10:44.944
We're going to go use the Rinkeby test network,

00:10:44.945 --> 00:10:49.540
and that we can actually have physical token really,

00:10:49.539 --> 00:10:52.259
a digital token and you can also transfer it to your friends that way.

00:10:52.259 --> 00:10:54.100
So, this was the Remix way.

00:10:54.100 --> 00:10:56.680
In our next video, we will move on to our Truffle,

00:10:56.679 --> 00:10:59.694
and then show you how to deploy a token using Infura,

00:10:59.695 --> 00:11:03.200
to a public test network, Rinkeby.

