WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.650
In this concept, we will talk and learn about Arrays in Solidity.

00:00:04.650 --> 00:00:10.125
There are mainly two types of arrays: static arrays and dynamic arrays.

00:00:10.125 --> 00:00:13.620
The syntax for static arrays goes like this.

00:00:13.619 --> 00:00:17.265
So, you have type of array followed by

00:00:17.265 --> 00:00:21.350
size of array in square brackets and then the name of the array.

00:00:21.350 --> 00:00:25.170
If the size is left empty inside the square brackets,

00:00:25.170 --> 00:00:27.540
then you end up creating a dynamic array.

00:00:27.539 --> 00:00:31.574
Static array means to create an array of fixed size.

00:00:31.574 --> 00:00:34.424
Dynamic arrays don't have a fixed size.

00:00:34.424 --> 00:00:36.434
So, on your screen right now,

00:00:36.435 --> 00:00:42.234
let's look at the static array section, bool[10] array.

00:00:42.234 --> 00:00:46.685
Create a static array with the name array that can hold 10 elements.

00:00:46.685 --> 00:00:51.260
We can access individual elements like array element at index four.

00:00:51.259 --> 00:00:53.364
In the dynamic array section,

00:00:53.365 --> 00:00:58.445
we can create dynamic array with no size inside the square brackets.

00:00:58.445 --> 00:01:01.115
In both static and dynamic arrays,

00:01:01.115 --> 00:01:05.674
we can get the length of the array using the.length operator.

00:01:05.674 --> 00:01:10.009
For static arrays, we cannot change the length property,

00:01:10.010 --> 00:01:12.109
but for dynamic arrays, we can,

00:01:12.109 --> 00:01:14.659
only if they were stored in storage.

00:01:14.659 --> 00:01:19.759
Arrays behave quite differently in memory versus storage.

00:01:20.090 --> 00:01:23.775
Let's talk about creating an array,

00:01:23.775 --> 00:01:26.580
and which is again dynamic versus static array,

00:01:26.579 --> 00:01:28.034
so I am going to look at both.

00:01:28.034 --> 00:01:31.039
Let's look at the static arrays section again.

00:01:31.040 --> 00:01:36.585
Now, we're trying to create a bool static array and then a uint static array.

00:01:36.584 --> 00:01:39.599
For dynamic arrays, let's consider both;

00:01:39.599 --> 00:01:42.269
storage and memory arrays.

00:01:42.269 --> 00:01:45.619
For both storage and memory dynamic arrays,

00:01:45.620 --> 00:01:49.090
we can allocate memory using the new keyword.

00:01:49.090 --> 00:01:54.695
So, you can create an array and then you can allocate memory using the new operator.

00:01:54.694 --> 00:01:57.469
You can push on dynamic storage arrays.

00:01:57.469 --> 00:02:02.734
You can specifically use the keyword memory to create an array in memory.

00:02:02.734 --> 00:02:05.114
For dynamic memory arrays,

00:02:05.114 --> 00:02:07.589
you cannot use the push method.

00:02:07.590 --> 00:02:10.280
This is a very, very important piece of information,

00:02:10.280 --> 00:02:12.004
and I really want you to remember it.

00:02:12.004 --> 00:02:15.979
So, again, you cannot push on dynamic memory arrays.

00:02:15.979 --> 00:02:18.974
Let's talk about initialization arrays.

00:02:18.974 --> 00:02:20.685
So, how do we initialize arrays?

00:02:20.685 --> 00:02:22.319
In the first example,

00:02:22.319 --> 00:02:26.030
we're declaring it as a uint8 static array,

00:02:26.030 --> 00:02:29.030
and then also initializing it with uint values,

00:02:29.030 --> 00:02:31.419
so the compiler will be fine with this.

00:02:31.419 --> 00:02:33.030
In the second example,

00:02:33.030 --> 00:02:35.509
the declared array type is int,

00:02:35.509 --> 00:02:37.189
and the initialized type is uint,

00:02:37.189 --> 00:02:39.634
so the compiler is going to throw an error.

00:02:39.634 --> 00:02:41.298
In the third example,

00:02:41.299 --> 00:02:47.030
we just need to apply explicit conversion to one element of the initialization data,

00:02:47.030 --> 00:02:49.805
and the compiler will now be fine with this.

00:02:49.805 --> 00:02:53.090
Let's take my array as an example here,

00:02:53.090 --> 00:02:54.814
the one that you see on the screen.

00:02:54.814 --> 00:02:59.354
So, we cannot initialize dynamic arrays in memory.

00:02:59.354 --> 00:03:03.049
The reason is that the compiler implicitly creates

00:03:03.050 --> 00:03:07.120
a static array which is not compatible with dynamic arrays in memory.

00:03:07.120 --> 00:03:09.935
So, just remember, you cannot initialize

00:03:09.935 --> 00:03:15.170
dynamic memories array in memory just like this. It's going to give you an error.

00:03:15.169 --> 00:03:17.914
Now, let's look at some more examples here.

00:03:17.914 --> 00:03:19.414
In the first line of code,

00:03:19.414 --> 00:03:21.594
this is going to give us a compiler error.

00:03:21.594 --> 00:03:26.335
Why? I just explained that to you in a couple slides before.

00:03:26.335 --> 00:03:30.280
Since dynamic memory arrays cannot be initialized like this,

00:03:30.280 --> 00:03:33.004
like we saw in just a couple of slides back.

00:03:33.004 --> 00:03:34.634
In the second line of code,

00:03:34.634 --> 00:03:37.569
we are creating a memory dynamic array and

00:03:37.569 --> 00:03:41.409
then the third line of code we are trying to push on it.

00:03:41.409 --> 00:03:43.375
This is also going to fail.

00:03:43.375 --> 00:03:44.949
Again, can you answer why?

00:03:44.949 --> 00:03:48.239
Since we cannot push memory arrays and again,

00:03:48.240 --> 00:03:50.754
I explained that to you just a couple of slides back.

00:03:50.754 --> 00:03:54.534
Moving up, let's look at some more examples for arrays.

00:03:54.534 --> 00:03:56.365
In the very first example,

00:03:56.365 --> 00:04:00.080
we are creating and also initializing the array at the same time.

00:04:00.080 --> 00:04:03.580
The first line of code will compile without errors.

00:04:03.580 --> 00:04:06.440
Since we are creating a static array of

00:04:06.439 --> 00:04:10.599
three elements and then we're initializing it with two elements,

00:04:10.599 --> 00:04:13.689
the last element is initialized to zero.

00:04:13.689 --> 00:04:15.359
In the second example,

00:04:15.360 --> 00:04:18.185
we're creating a static array to hold

00:04:18.185 --> 00:04:21.800
three elements but we're trying to store four elements.

00:04:21.800 --> 00:04:23.930
This is going to give us a compile error,

00:04:23.930 --> 00:04:27.259
since it cannot hold four elements.

00:04:27.259 --> 00:04:29.539
Let us summarize arrays.

00:04:29.540 --> 00:04:32.885
Some very important points of arrays you really need to remember.

00:04:32.884 --> 00:04:37.175
First of all, solidity supports dynamic arrays and static arrays code.

00:04:37.175 --> 00:04:41.305
There is a difference in how memory and storage arrays are treated.

00:04:41.305 --> 00:04:44.465
The first one is that you cannot push on memory arrays.

00:04:44.464 --> 00:04:47.149
So, remember, you cannot push on memory arrays.

00:04:47.149 --> 00:04:50.974
Next one, you cannot change the length of static arrays.

00:04:50.975 --> 00:04:55.560
Next one, you cannot initialize dynamic memory arrays like the 1,

00:04:55.560 --> 00:04:57.014
2, 3 assignment on your screen.

00:04:57.014 --> 00:04:58.844
So, again, for dynamic memory arrays,

00:04:58.845 --> 00:05:01.320
you cannot have initialization like this one.

00:05:01.319 --> 00:05:03.779
Now, let's look at a sample contract to

00:05:03.779 --> 00:05:08.274
understand and look at all these things that we've just talked about.

00:05:08.274 --> 00:05:12.294
Okay. So, on this sample contract that we have in front of you.

00:05:12.295 --> 00:05:14.848
Again, I'm going to recap pragma solidity,

00:05:14.848 --> 00:05:16.125
the name of the version,

00:05:16.125 --> 00:05:17.360
then the contract word.

00:05:17.360 --> 00:05:19.520
A very simple view of creating a contract,

00:05:19.519 --> 00:05:22.339
we're using Remix for all these sample contracts for now.

00:05:22.339 --> 00:05:23.899
We are going to be giving you code,

00:05:23.899 --> 00:05:27.814
so you can actually copy and paste this code in your Remix editor and play around,

00:05:27.814 --> 00:05:31.165
change values, and really learn all these topics nice and well.

00:05:31.165 --> 00:05:32.460
Okay, so let's start.

00:05:32.459 --> 00:05:35.879
So, we have created three types of arrays here.

00:05:35.879 --> 00:05:39.954
The first one is a static array but size three of type int,

00:05:39.954 --> 00:05:42.344
and we're also initializing at the same time.

00:05:42.345 --> 00:05:44.150
So, we're giving it two values,

00:05:44.149 --> 00:05:47.299
that means the last element is automatically going to set it to zero,

00:05:47.300 --> 00:05:50.960
and then we're having a dynamic array of type int8.

00:05:50.959 --> 00:05:53.209
No number in the brackets,

00:05:53.209 --> 00:05:54.935
that means it's a dynamic array.

00:05:54.935 --> 00:05:57.259
The next we're creating a bool dynamic array,

00:05:57.259 --> 00:05:59.735
the name is dynamicBoolArray.

00:05:59.735 --> 00:06:01.460
Now, we have a function,

00:06:01.459 --> 00:06:03.924
and the function's name is testArray.

00:06:03.925 --> 00:06:05.460
Now, in the function,

00:06:05.459 --> 00:06:08.024
what we're doing is that we're actually allocating memory.

00:06:08.024 --> 00:06:09.509
We just created an array here.

00:06:09.509 --> 00:06:11.384
If you see, we have a dynamic bool array.

00:06:11.384 --> 00:06:13.789
Now, we're actually allocating memory and this is how you do it.

00:06:13.790 --> 00:06:15.780
So, you create an array, a dynamic array,

00:06:15.779 --> 00:06:20.099
and then you allocate memory for int elements with this statement here.

00:06:20.100 --> 00:06:23.370
Now, in the next statement, what we're trying to do,

00:06:23.370 --> 00:06:26.535
we are doing an explicit conversion as needed,

00:06:26.535 --> 00:06:30.830
for sure, just because you have to convert from uint8 to int8.

00:06:30.829 --> 00:06:33.904
So, if you see I'm trying to convert from uint8 to int8,

00:06:33.904 --> 00:06:36.869
since the dynamic int array is of type int.

00:06:36.870 --> 00:06:38.430
So, I'm going to convert my 1, 2,

00:06:38.430 --> 00:06:41.280
3 numbers which are uint to int to do this.

00:06:41.279 --> 00:06:43.109
So, this is perfectly going to be fine.

00:06:43.110 --> 00:06:45.319
The second line is also going to work fine,

00:06:45.319 --> 00:06:48.379
right here the uint8 memory memoryArray.

00:06:48.379 --> 00:06:50.779
You can definitely create memory arrays like this;

00:06:50.779 --> 00:06:52.534
you cannot do it outside functions.

00:06:52.535 --> 00:06:54.650
Outside functions arrays are definitely,

00:06:54.649 --> 00:06:56.599
by default, are going to be stored in storage.

00:06:56.600 --> 00:06:57.875
If you put a memory word,

00:06:57.875 --> 00:07:00.069
the compiler is going to complain about that.

00:07:00.069 --> 00:07:04.709
But inside functions, you can do storage or you can actually, forcefully,

00:07:04.709 --> 00:07:06.829
just put the word memory so that you want to make sure that

00:07:06.829 --> 00:07:10.084
this array is in memory. So, that worked fine.

00:07:10.084 --> 00:07:12.329
Now, we just talked about that,

00:07:12.329 --> 00:07:15.904
you cannot do this kind of assignment for dynamic memory arrays.

00:07:15.904 --> 00:07:18.829
So, assignment of dynamic memory arrays is not allowed.

00:07:18.829 --> 00:07:20.000
If I uncomment this,

00:07:20.000 --> 00:07:22.144
you will see the compiler gives an error.

00:07:22.144 --> 00:07:26.079
So, this kind of assignment for dynamic memory arrays does not work.

00:07:26.079 --> 00:07:28.399
Again, we're allocating memory for

00:07:28.399 --> 00:07:31.549
the memory array that we just created here for the new operator.

00:07:31.550 --> 00:07:36.860
Now, we also saw a couple of other things that we cannot push on memory arrays like this.

00:07:36.860 --> 00:07:39.759
So, if I uncomment this I'm going to get an error.

00:07:39.759 --> 00:07:45.735
We also cannot get the.length for memory arrays like this,

00:07:45.735 --> 00:07:47.730
even that gives us an error.

00:07:47.730 --> 00:07:50.215
Now, for static arrays,

00:07:50.214 --> 00:07:52.750
we can do this kind of an initialization.

00:07:52.750 --> 00:07:55.009
So, if you see this kind of initialization

00:07:55.009 --> 00:07:58.459
for dynamic memory array was giving us an error,

00:07:58.459 --> 00:08:01.039
but for static array, it's perfectly fine.

00:08:01.040 --> 00:08:02.689
So, we're initializing the array with 1,

00:08:02.689 --> 00:08:05.019
2, 3 elements, it works fine.

00:08:05.019 --> 00:08:08.289
Then, we're creating another memory static array,

00:08:08.290 --> 00:08:11.795
memory word static because it has a number in the bracket.

00:08:11.795 --> 00:08:15.920
Memory, because we're putting the word forcefully memory because we're inside a function.

00:08:15.920 --> 00:08:20.030
Now, this assignment is allowed because it is

00:08:20.029 --> 00:08:21.649
a static memory array but if it was

00:08:21.649 --> 00:08:25.339
a dynamic memory array like we saw is going to give an error.

00:08:25.339 --> 00:08:27.004
So, this is going to work fine.

00:08:27.004 --> 00:08:33.169
Again, we're doing an explicit conversion to store in the static memory array.

00:08:33.169 --> 00:08:35.069
Now, what again is allowed.

00:08:35.070 --> 00:08:37.040
You can always store individual elements,

00:08:37.039 --> 00:08:38.089
those are perfectly fine.

00:08:38.090 --> 00:08:40.615
So, you can access individual elements and store a value.

00:08:40.615 --> 00:08:45.009
So, this works fine for static memory arrays and also dynamic memory arrays.

00:08:45.009 --> 00:08:48.220
Now, these are some of the things I definitely wanted you to focus and learn.

00:08:48.220 --> 00:08:52.250
The really important one is that you cannot push a memory array.

00:08:52.250 --> 00:08:53.585
So, this is a very important one.

00:08:53.585 --> 00:08:56.629
You cannot initialize dynamic memory arrays this way.

00:08:56.629 --> 00:09:00.230
So, these are a couple of really important points that I really want you to remember,

00:09:00.230 --> 00:09:03.200
and I would definitely encourage you to watch this video again.

00:09:03.200 --> 00:09:05.030
Because, a couple of times you watch it,

00:09:05.029 --> 00:09:08.149
the concepts will definitely get clearer.

00:09:08.149 --> 00:09:10.039
So, I want you to copy this code,

00:09:10.039 --> 00:09:12.245
bring it into your Remix, play around,

00:09:12.245 --> 00:09:17.529
change values, and really try to get the concepts nice and clear in your head.

