WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.419
This exercise contains the most important code that you will need to learn

00:00:06.419 --> 00:00:12.945
about in order to manage the process of separating contracts into data and application.

00:00:12.945 --> 00:00:17.070
So let's walk through the code and get some more information

00:00:17.070 --> 00:00:21.914
about exactly why and what certain code lines are doing. All right.

00:00:21.914 --> 00:00:27.794
So the first thing that we want to do is in our application contract,

00:00:27.795 --> 00:00:32.660
we want to add a reference to the data contract.

00:00:32.659 --> 00:00:36.544
So the idea here is to add an interface.

00:00:36.545 --> 00:00:37.760
If you have programmed in

00:00:37.759 --> 00:00:45.420
other object-oriented languages or environments such as.NET or Java,

00:00:45.420 --> 00:00:48.010
you very familiar already with the concept of interface,

00:00:48.009 --> 00:00:50.179
and that's precisely what this is.

00:00:50.179 --> 00:00:58.500
What we are doing is telling the app contract how to interact with the data contract,

00:00:58.500 --> 00:01:06.650
and specifically, we want to add the ability for it to call the update employee.

00:01:06.650 --> 00:01:15.725
So let's go ahead and remove our stub and edit in here.

00:01:15.724 --> 00:01:20.234
So we need to make sure that all the parameters match,

00:01:20.234 --> 00:01:24.310
and notice here that earlier my stub

00:01:24.310 --> 00:01:29.560
had internal as the visibility and we'll want that to be external.

00:01:29.560 --> 00:01:38.135
Let us look at why. So if you consider the data contract,

00:01:38.135 --> 00:01:43.105
initially "Update employee" was called internally from that same contract.

00:01:43.105 --> 00:01:48.040
Now, it has to be called from an external contract which is the app contract,

00:01:48.040 --> 00:01:55.005
and therefore it's necessary for us to modify the visibility of this to external.

00:01:55.004 --> 00:01:59.359
So now we've modified the data contract,

00:01:59.359 --> 00:02:02.474
changed the scope visibility to external,

00:02:02.474 --> 00:02:04.509
and in our app contract,

00:02:04.510 --> 00:02:12.099
we've also defined an interface that points us to the "Update employee."

00:02:12.379 --> 00:02:15.759
All right. So with that done,

00:02:15.759 --> 00:02:18.664
we have completed a part of it.

00:02:18.664 --> 00:02:25.174
Now we have here a reference that is now orphaned,

00:02:25.175 --> 00:02:27.590
that's because I removed the stub.

00:02:27.590 --> 00:02:32.375
The stub was the reason this was working earlier and it no longer exists.

00:02:32.375 --> 00:02:33.925
So how do we mitigate that?

00:02:33.925 --> 00:02:37.810
Well, what we want to do is we want to tell

00:02:37.810 --> 00:02:42.245
our app contract about the existence of the data contract.

00:02:42.245 --> 00:02:45.775
So let's do that by introducing a state variable here,

00:02:45.775 --> 00:02:56.099
and we'll do that by calling the state variable by the name of the data contract,

00:02:56.099 --> 00:03:01.234
and we'll go ahead and put that variable here.

00:03:01.235 --> 00:03:05.660
So at this point what we have is a variable within

00:03:05.659 --> 00:03:09.979
our app contract that references another contract,

00:03:09.979 --> 00:03:11.840
in this case our data contract.

00:03:11.840 --> 00:03:15.064
The way we can get rid of this problem here

00:03:15.064 --> 00:03:20.789
is we can tell it that it belongs to the data contract,

00:03:21.520 --> 00:03:24.540
and once we do that,

00:03:25.060 --> 00:03:30.724
you can see that the squiggly went away and we know that that's now good.

00:03:30.724 --> 00:03:33.185
So just to reiterate real quick.

00:03:33.185 --> 00:03:41.670
The steps to actually making the separation work is in the calling contract,

00:03:41.669 --> 00:03:44.179
the one that has the application logic.

00:03:44.180 --> 00:03:48.064
Have an interface that indicates

00:03:48.064 --> 00:03:52.870
what functions exist in the data contract that you'll be referring to.

00:03:52.870 --> 00:03:55.250
It's important that the scope of

00:03:55.250 --> 00:04:00.439
those functions or the visibility be external because otherwise,

00:04:00.439 --> 00:04:04.250
it would not be possible for this contract to call into that one.

00:04:04.250 --> 00:04:07.525
So the signature of the function must match.

00:04:07.525 --> 00:04:13.075
So it's string uint256 external,

00:04:13.074 --> 00:04:16.990
and we have the same thing here.

00:04:17.319 --> 00:04:19.370
So at this point,

00:04:19.370 --> 00:04:22.889
let's run truffle compile and look at the output,

00:04:23.259 --> 00:04:29.899
and most of our compiler warnings should no longer exist.

00:04:30.850 --> 00:04:36.805
There we go. So we've cleanly separated

00:04:36.805 --> 00:04:45.129
both the contracts and each one understands what the other one is referring to.

00:04:45.129 --> 00:04:46.839
So in this case specifically,

00:04:46.839 --> 00:04:52.719
we're talking about the app contract knowing how to connect with the data contract.

00:04:52.720 --> 00:04:57.250
Now, one thing you may have observed is while I

00:04:57.250 --> 00:05:03.370
created the variable for the contract,

00:05:03.370 --> 00:05:06.324
there is no place where actually initialized it.

00:05:06.324 --> 00:05:09.745
So that's something that we have to resolve shortly.

00:05:09.745 --> 00:05:13.375
So go to that line of code here. It's right here.

00:05:13.375 --> 00:05:16.194
So while the variable exist,

00:05:16.194 --> 00:05:17.529
it has not been initialized,

00:05:17.529 --> 00:05:18.983
and so while it compiles,

00:05:18.983 --> 00:05:24.709
we will almost certainly have errors at runtime.

00:05:24.709 --> 00:05:27.984
So we'll get into that in our next exercise,

00:05:27.985 --> 00:05:30.814
but before that, let's take a quick quiz.

00:05:30.814 --> 00:05:33.199
What is the correct way to reference

00:05:33.199 --> 00:05:37.620
data contract functions from the application contract?

