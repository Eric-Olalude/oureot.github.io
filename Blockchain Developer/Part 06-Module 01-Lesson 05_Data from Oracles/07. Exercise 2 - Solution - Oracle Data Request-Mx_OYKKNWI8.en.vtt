WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.940
So the first thing we want to do is generate a random number here.

00:00:05.940 --> 00:00:14.710
So for that, we'll go ahead and use our "Get Random Index" function.

00:00:14.810 --> 00:00:18.435
The color is, in this case,

00:00:18.434 --> 00:00:22.439
the account requesting fetch flight status.

00:00:22.440 --> 00:00:25.179
So that's still message.center.

00:00:27.920 --> 00:00:30.310
Now that this is done,

00:00:30.309 --> 00:00:34.835
the code here generates a unique key.

00:00:34.835 --> 00:00:37.910
It hashes that and that key is used to

00:00:37.909 --> 00:00:44.309
store all the responses that are going to come for this particular request.

00:00:44.310 --> 00:00:46.090
With that in place,

00:00:46.090 --> 00:00:49.340
it's time to notify the oracles that are

00:00:49.340 --> 00:00:54.455
listening that there is a job available for them to fulfill.

00:00:54.454 --> 00:00:57.600
So it's "Oracle Request".

00:00:58.310 --> 00:01:04.805
The parameters we want to communicate to the oracles are the index,

00:01:04.805 --> 00:01:08.750
which we calculated as a random number here,

00:01:08.750 --> 00:01:13.390
the flight, and then the timestamp.

00:01:14.510 --> 00:01:17.800
Make sure that compiles.

00:01:19.340 --> 00:01:24.280
Now, in the interest of time I've set up the test

00:01:24.280 --> 00:01:29.019
here so that it goes through the entire life-cycle.

00:01:29.019 --> 00:01:32.269
So what we'll do is we'll complete the next exercise,

00:01:32.269 --> 00:01:36.859
Exercise 3 before we continue with the test.

00:01:36.859 --> 00:01:41.260
For right now, let's switch to a quiz.

00:01:42.219 --> 00:01:46.340
How can solidity functions that manipulate the state of

00:01:46.340 --> 00:01:51.810
a smart contract communicate results to client applications?

