WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.524
Our next topic is trustless oracles.

00:00:03.524 --> 00:00:07.709
Now oracles that are unknown in the public and they

00:00:07.710 --> 00:00:11.865
may or may not be malicious are called trustless oracles.

00:00:11.865 --> 00:00:18.690
So all oracles that are on the public blockchain are inherently trustless.

00:00:18.690 --> 00:00:21.450
Although you might have a business relationship with

00:00:21.449 --> 00:00:24.884
them or you might know them personally.

00:00:24.885 --> 00:00:29.250
Ultimately, from the perspective of the blockchain and the smart contract,

00:00:29.250 --> 00:00:31.710
it is a trustless relationship.

00:00:31.710 --> 00:00:36.149
Now in the scenario of trustless oracles,

00:00:36.149 --> 00:00:39.494
what you do is you eliminate a single point of failure

00:00:39.494 --> 00:00:43.219
by relying on many oracles instead of a single one.

00:00:43.219 --> 00:00:50.000
Now this requires considerable measures to minimize the trust and protect from attacks.

00:00:50.000 --> 00:00:55.564
So that's where we get into the topic of trust minimizing vectors.

00:00:55.564 --> 00:00:58.640
So when you have a large number of oracles,

00:00:58.640 --> 00:01:04.909
what you want to do is minimize the amount of trust that you place in any single oracle.

00:01:04.909 --> 00:01:08.344
So there are three strategies you can employ to do that.

00:01:08.344 --> 00:01:11.914
The first one is to use multiple data sources.

00:01:11.915 --> 00:01:19.410
So ultimately, your oracle is going to rely on a third party API or APIs to fetch data,

00:01:19.409 --> 00:01:21.189
and if it's possible,

00:01:21.189 --> 00:01:25.280
it would be a good idea to have multiple oracles

00:01:25.280 --> 00:01:30.260
accessing multiple data sources to ensure that there is no single point of failure.

00:01:30.260 --> 00:01:34.400
You may have a single data source because it's constrained,

00:01:34.400 --> 00:01:38.165
perhaps it's just a single supplier or single service that provides it.

00:01:38.165 --> 00:01:42.320
In which case, it's still good to have multiple oracles that access

00:01:42.319 --> 00:01:44.509
that single service and provide you with

00:01:44.510 --> 00:01:47.045
the data so that if a single oracle goes offline,

00:01:47.045 --> 00:01:50.930
you have the ability to resort to others.

00:01:50.930 --> 00:01:53.030
Now having said that,

00:01:53.030 --> 00:01:58.099
it's important to consider that this is not a scenario like you have in web servers,

00:01:58.099 --> 00:02:01.834
etc, where you have things like failover, etc.

00:02:01.834 --> 00:02:06.139
When we talk about multiple oracles in the context of blockchain,

00:02:06.140 --> 00:02:10.009
we literally are talking about multiple oracles providing

00:02:10.009 --> 00:02:14.584
the data to the smart contract and the smart contract then arbitrating

00:02:14.585 --> 00:02:18.620
between those data inputs and making

00:02:18.620 --> 00:02:23.875
a decision based on pre-defined rules about what data is accurate and what is not.

00:02:23.875 --> 00:02:31.025
The last way that is a trust minimizing vector is the concept of staking.

00:02:31.025 --> 00:02:34.789
The concept basically means that if you are going

00:02:34.789 --> 00:02:38.614
to rely on an oracle and try and trust that,

00:02:38.615 --> 00:02:46.050
your trust level can go significantly higher if that oracle has put up some funds;

00:02:46.050 --> 00:02:48.740
whether it's cryptocurrency or fiat currency,

00:02:48.740 --> 00:02:52.145
and has staked so that they have skin in the game.

00:02:52.145 --> 00:02:54.560
So if that scenario happens,

00:02:54.560 --> 00:03:00.544
then it's less likely and the oracle is disincentivized to create problems,

00:03:00.544 --> 00:03:03.290
do malicious activities, etc.

00:03:03.289 --> 00:03:05.734
So overall these three techniques;

00:03:05.735 --> 00:03:08.679
multiple data sources, multiple oracles,

00:03:08.679 --> 00:03:12.814
and staking can help you create a scenario where you

00:03:12.814 --> 00:03:17.824
minimize the trust you need to place in any single entity.

00:03:17.824 --> 00:03:20.784
Let's now take a quiz.

00:03:20.784 --> 00:03:27.479
What are some approaches to mitigate the lack of trust inherent in public oracles?

