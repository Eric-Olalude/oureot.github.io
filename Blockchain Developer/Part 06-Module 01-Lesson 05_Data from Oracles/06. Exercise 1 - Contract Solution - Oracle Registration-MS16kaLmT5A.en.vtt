WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.835
Let's review the exercise code.

00:00:02.835 --> 00:00:05.400
So the first thing we want to do,

00:00:05.400 --> 00:00:09.359
is add a require statement to ensure

00:00:09.359 --> 00:00:16.800
that every oracle that submits a request pays the registration fee.

00:00:16.800 --> 00:00:20.010
So we're going to make sure that the message value is greater than or

00:00:20.010 --> 00:00:24.370
equal to the registration fee.

00:00:27.890 --> 00:00:36.570
That's done. The next thing is we need to generate three random indexes

00:00:36.570 --> 00:00:46.375
for this calling oracle so we'll create the array for that.

00:00:46.375 --> 00:00:50.929
It'll be an in-memory array so we'll use the memory keyword there,

00:00:50.929 --> 00:00:56.340
and we'll call it indexes and we'll call generateIndexes.

00:00:56.840 --> 00:01:02.660
Now, let's take a little closer look at

00:01:02.659 --> 00:01:04.849
generateIndexes because it has

00:01:04.849 --> 00:01:10.199
some really important information that you should be aware of.

00:01:11.989 --> 00:01:16.034
So if you look at the code here, I mean,

00:01:16.034 --> 00:01:20.299
what it's doing within this particular function

00:01:20.299 --> 00:01:24.620
is ensuring that none of the numbers are duplicated.

00:01:24.620 --> 00:01:30.814
So it calls getRandomIndex and it assigns the first index.

00:01:30.814 --> 00:01:34.429
It then checks to make sure that the number is not duplicated and so on.

00:01:34.430 --> 00:01:38.120
There's probably 1,000 different ways this could be done,

00:01:38.120 --> 00:01:39.814
some efficient, some inefficient.

00:01:39.814 --> 00:01:41.039
But for the sake of clarity,

00:01:41.040 --> 00:01:42.980
I just spelled it out there.

00:01:42.980 --> 00:01:48.859
But really the crux of what we need to review is here on getRandomIndex.

00:01:48.859 --> 00:01:53.420
So what this particular function is doing is,

00:01:53.420 --> 00:01:56.105
it is relying on the combination of

00:01:56.105 --> 00:02:06.305
the block hash function to get the block hash for a specific block.

00:02:06.305 --> 00:02:14.480
In solidity, you can go back as many as 256 blocks and read the hash for those.

00:02:14.479 --> 00:02:18.094
So that's the purpose of this variable called nonce here.

00:02:18.094 --> 00:02:21.659
What it's doing is every time it's referenced,

00:02:21.659 --> 00:02:24.560
it increments itself to ensure that you're getting

00:02:24.560 --> 00:02:31.189
a different block hash that goes into the process of creating the random integer.

00:02:31.189 --> 00:02:33.379
When it goes over 250,

00:02:33.379 --> 00:02:36.384
it could probably say over 254,

00:02:36.384 --> 00:02:39.405
is reset to zero.

00:02:39.405 --> 00:02:47.344
It also uses as part of the catch of 256 hash that has been created here, the account.

00:02:47.344 --> 00:02:50.599
So in this case the account is represented by the oracle

00:02:50.599 --> 00:02:53.729
that is making the call to register oracle,

00:02:53.729 --> 00:02:59.044
and so we add that also to the mix to make it a little more random.

00:02:59.044 --> 00:03:02.119
Finally, we use the modulus of 10 to

00:03:02.120 --> 00:03:05.784
ensure that the number we get is between zero and nine.

00:03:05.784 --> 00:03:08.870
Now, this might give you a false sense of

00:03:08.870 --> 00:03:11.944
security that there is a random number being generated here,

00:03:11.944 --> 00:03:17.060
but let's keep in mind that blockchains are deterministic and the concept of

00:03:17.060 --> 00:03:22.610
a truly random number doesn't exist on block chains.

00:03:22.610 --> 00:03:27.960
So you can take measures and use techniques such as this,

00:03:27.960 --> 00:03:31.110
this is just one technique, there are many other techniques that are used

00:03:31.110 --> 00:03:34.550
for example in lottery and gambling, smart contracts.

00:03:34.550 --> 00:03:38.380
But it's very important to remember that you can make a best effort,

00:03:38.379 --> 00:03:43.444
you cannot have true randomness in blockchain code.

00:03:43.444 --> 00:03:45.995
It's debatable whether you can have true randomness

00:03:45.995 --> 00:03:48.620
in computers but that's a different story.

00:03:48.620 --> 00:03:51.590
Right here, what we are trying to do is to add

00:03:51.590 --> 00:03:55.640
as much variability as possible to whatever the parameters we

00:03:55.639 --> 00:04:02.689
passed to the catch of 256 hash function to ensure that we get a random number.

00:04:02.689 --> 00:04:05.689
Of course our range is 10 numbers,

00:04:05.689 --> 00:04:09.250
so it's not going to be very large in the first place.

00:04:09.250 --> 00:04:13.805
But it's an important consideration and I want to make sure I cover that.

00:04:13.805 --> 00:04:16.400
So going back up here,

00:04:16.399 --> 00:04:25.739
we have generated the value for the indexes and now what we can do is,

00:04:25.740 --> 00:04:31.490
assign that to the oracles mapping and we'll

00:04:31.490 --> 00:04:37.590
go ahead and add message.sender which is the oracle that is currently calling,

00:04:37.589 --> 00:04:44.169
and we will assign those indexes to that oracle.

00:04:44.170 --> 00:04:51.230
So this is how the registration works in a very simplistic manner.

00:04:51.230 --> 00:04:57.379
The point of this exercise is to help you look at the architecture of it.

00:04:57.379 --> 00:05:01.144
So there's lots of places where you could certainly have it be more robust,

00:05:01.144 --> 00:05:03.709
more interesting, more compact,

00:05:03.709 --> 00:05:06.814
etc, but the goal is to help you understand the architecture.

00:05:06.814 --> 00:05:10.790
So some things might be way more deliberately expressed

00:05:10.790 --> 00:05:16.370
than you would ordinarily do to make your contract more efficient.

00:05:16.370 --> 00:05:21.795
Now, in working hand in hand with the registerOracle function,

00:05:21.795 --> 00:05:23.645
is a getOracle function.

00:05:23.644 --> 00:05:26.000
We make this privilege and have only

00:05:26.000 --> 00:05:30.459
the contract owner call it because it would be self-defeating if

00:05:30.459 --> 00:05:34.819
any oracle could get information about any oracle just by

00:05:34.819 --> 00:05:39.620
knowing its address and to figure out what indexes were assigned to it.

00:05:39.620 --> 00:05:44.735
So but we created this in order to support testing and speaking of testing.

00:05:44.735 --> 00:05:47.014
Let's go and look at our test code.

00:05:47.014 --> 00:05:48.979
But before I do that,

00:05:48.980 --> 00:05:52.009
I just want to make a quick truffle compile and make sure that my code

00:05:52.009 --> 00:05:57.480
compiles and then we'll switch over to the exercise.

