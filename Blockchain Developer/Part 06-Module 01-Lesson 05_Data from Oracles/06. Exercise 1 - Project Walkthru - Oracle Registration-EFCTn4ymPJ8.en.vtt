WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.580
Before I go into the specific topic of the exercise and the tasks involved,

00:00:05.580 --> 00:00:07.800
I want you to give you a lay of the land and

00:00:07.799 --> 00:00:10.469
show you the code that we're going to be working with today.

00:00:10.470 --> 00:00:12.945
As I mentioned earlier,

00:00:12.945 --> 00:00:20.115
this represents a Smart Contract for a flight data oracle.

00:00:20.114 --> 00:00:26.359
It does both the task of registering the oracles and then interacting with them;

00:00:26.359 --> 00:00:28.820
receiving and sending the data.

00:00:28.820 --> 00:00:33.920
So I want to take a minute here to quickly review some of the data structures etc.

00:00:33.920 --> 00:00:39.870
So that you're familiar with them once you embark on the specific tasks.

00:00:39.869 --> 00:00:41.609
Our data structures here,

00:00:41.609 --> 00:00:46.039
we have some constants here that need a little bit of explanation.

00:00:46.039 --> 00:00:48.039
As I mentioned, we have a stake,

00:00:48.039 --> 00:00:49.695
that's the registration fee,

00:00:49.695 --> 00:00:51.750
so it's one ether.

00:00:51.750 --> 00:00:55.085
Later on, you might want to think about

00:00:55.085 --> 00:00:57.079
more sophisticated systems where

00:00:57.079 --> 00:01:00.229
the registration fees dynamic based on number of participants,

00:01:00.229 --> 00:01:01.849
the tasks involved etc.,

00:01:01.850 --> 00:01:06.295
or new registration fee if that is the right scenario.

00:01:06.295 --> 00:01:11.409
We talked earlier about having a certain threshold that has to be

00:01:11.409 --> 00:01:16.554
crossed in order for the Smart Contract to accept the oracle data.

00:01:16.555 --> 00:01:24.205
In this case, that's the min responses constant and that value is currently set to three.

00:01:24.204 --> 00:01:26.304
For keeping things simple,

00:01:26.305 --> 00:01:31.990
our flight status has just two possibilities;

00:01:31.989 --> 00:01:35.574
on time and not on time represented by two numbers.

00:01:35.575 --> 00:01:39.040
So the range of the numbers exist in order to allow you

00:01:39.040 --> 00:01:44.545
to add more granular statuses in the future.

00:01:44.545 --> 00:01:49.245
We have a data structure here for tracking all our oracles.

00:01:49.245 --> 00:01:52.850
If you go back to the diagram and recollect that

00:01:52.849 --> 00:01:56.390
we had three index items that each oracle would have,

00:01:56.390 --> 00:01:58.400
that's what this array would represent.

00:01:58.400 --> 00:02:00.410
A three is an arbitrary number.

00:02:00.409 --> 00:02:04.564
Again, even the process of having this technique of using

00:02:04.564 --> 00:02:10.370
an index that limits which oracle will perform a task is arbitrary.

00:02:10.370 --> 00:02:13.189
It's designed to help you understand that

00:02:13.189 --> 00:02:16.099
there are many different schemes and ways in which you

00:02:16.099 --> 00:02:21.889
can manage a large number of public untrusted oracles.

00:02:21.889 --> 00:02:24.109
This is just one simple one.

00:02:24.110 --> 00:02:28.595
It's probably not completely bulletproof but

00:02:28.594 --> 00:02:34.310
it suffices for the purpose of an exercise especially in the context of learning.

00:02:34.310 --> 00:02:37.295
We have here a data structure that represents

00:02:37.294 --> 00:02:43.649
the response that are collected from oracles.

00:02:43.650 --> 00:02:49.430
So we have the original requester who requested the data to be

00:02:49.430 --> 00:02:55.700
fetched whether the request for oracles to submit data is open or closed.

00:02:55.699 --> 00:02:58.759
So once the threshold of main responses is reached,

00:02:58.759 --> 00:03:01.969
you would change this variable to false and that

00:03:01.969 --> 00:03:06.414
would prevent oracles from submitting more data.

00:03:06.414 --> 00:03:12.069
Finally, you track all the responses for the different oracles.

00:03:12.069 --> 00:03:16.479
Now, you might see this mapping here and wonder,

00:03:16.479 --> 00:03:21.239
well why is it a mapping if the oracles are just returning numeric data in this case?

00:03:21.240 --> 00:03:25.600
It's on time and not on time and they are just two numbers, 10 or 99.

00:03:25.599 --> 00:03:30.789
Why not have an array of information or something like that?

00:03:30.789 --> 00:03:32.799
Well, there's a reason for this.

00:03:32.800 --> 00:03:35.594
You cannot assume in your Smart Contract that

00:03:35.594 --> 00:03:40.210
every oracle is going to return the desired correct data.

00:03:40.210 --> 00:03:42.670
You might have for the same scenario,

00:03:42.669 --> 00:03:46.989
multiple oracles returning different data and you must allow for that possibility.

00:03:46.990 --> 00:03:50.900
Now you could me certainly discard the incorrect information.

00:03:50.900 --> 00:03:54.905
But in almost every Smart Contracts scenario that involves oracles,

00:03:54.905 --> 00:03:58.250
you're going to reach a point where you have to make

00:03:58.250 --> 00:04:02.585
decisions and you cannot make good decisions absent data.

00:04:02.585 --> 00:04:06.469
So it's a good idea to collect and store all the data provided by

00:04:06.469 --> 00:04:12.020
oracles and then evaluate which one is the one you want to trust.

00:04:12.020 --> 00:04:19.040
This is also a good way for you to help build reputation within your Smart Contract.

00:04:19.040 --> 00:04:22.250
So you can decide if an oracle is consistently

00:04:22.250 --> 00:04:25.954
providing incorrect or invalid information compared to its peers.

00:04:25.954 --> 00:04:30.979
That oracle probably needs a low reputation and lower trust in your Smart Contract.

00:04:30.980 --> 00:04:33.545
So this particular line here,

00:04:33.545 --> 00:04:37.069
mapping uint8 address array responses

00:04:37.069 --> 00:04:40.699
is designed to store all the data and capture all the information.

00:04:40.699 --> 00:04:44.569
So the Smart Contract can get smarter and perhaps even block oracles that

00:04:44.569 --> 00:04:49.469
are consistently doing malicious things or providing bad data.

00:04:51.160 --> 00:04:54.300
The next data item here,

00:04:54.300 --> 00:05:01.189
is the actual mapping where the responses are tracked.

00:05:01.189 --> 00:05:06.160
Now the reason we want to do this is we want to ensure

00:05:06.160 --> 00:05:11.770
that every response that comes in has a unique key and is tracked.

00:05:11.769 --> 00:05:13.120
So in a moment here,

00:05:13.120 --> 00:05:14.970
we'll talk about how the key is being created,

00:05:14.970 --> 00:05:18.430
but it's essentially a hash of the index flight and timestamp.

00:05:18.430 --> 00:05:20.785
We'll talk about the specifics in a moment.

00:05:20.785 --> 00:05:23.680
The first event we have here is flight status info.

00:05:23.680 --> 00:05:28.590
So this is the event that was ultimately triggered by

00:05:28.589 --> 00:05:33.774
the Smart Contract after the data has been received by the oracles and processed.

00:05:33.774 --> 00:05:38.384
That contains the the flight information,

00:05:38.384 --> 00:05:40.110
a timestamp for the flight,

00:05:40.110 --> 00:05:44.735
the status, whether it was on time or delayed,

00:05:44.735 --> 00:05:49.324
and finally, if the information has been verified yet or not.

00:05:49.324 --> 00:05:51.019
In this particular Smart Contract,

00:05:51.019 --> 00:05:54.079
you will see that we are using a model where every time

00:05:54.079 --> 00:05:57.409
an oracle response and provides data,

00:05:57.410 --> 00:06:02.790
we go ahead and emit a flight status info note event.

00:06:02.790 --> 00:06:06.740
However, the flag verified only becomes true after

00:06:06.740 --> 00:06:11.930
the internal rules for determining if the oracle data is valid,

00:06:11.930 --> 00:06:13.910
is changed at that time.

00:06:13.910 --> 00:06:18.210
So initially that value will be false.

00:06:18.209 --> 00:06:23.930
For posterity, we also track all the data related to flights that

00:06:23.930 --> 00:06:29.074
we've received in order to handle any potential disputes that might occur in the future.

00:06:29.074 --> 00:06:31.550
Of course, it's the block chain things are immutable so it

00:06:31.550 --> 00:06:34.610
reduces the possibility of disputes because the data is all there.

00:06:34.610 --> 00:06:38.730
But for that possibility to exist,

00:06:38.730 --> 00:06:41.939
we do need to have the data and so why this little extra storage?

00:06:41.939 --> 00:06:45.350
We'll go ahead and save the flight information also.

00:06:45.350 --> 00:06:48.950
So let's get to the specifics of the exercise.

00:06:48.949 --> 00:06:53.615
So you're going work with this function here called registerOracle.

00:06:53.615 --> 00:06:55.495
There are three tasks,

00:06:55.495 --> 00:06:58.759
you can see them in code but we also have them on the slide here.

00:06:58.759 --> 00:07:01.654
So let's look at them in detail.

00:07:01.654 --> 00:07:06.694
So the first thing you're going to do is add missing code in that function.

00:07:06.694 --> 00:07:11.870
You are going to add the code to require a registration fee

00:07:11.870 --> 00:07:17.840
of the amount of the constant REGISTRATION_FEE from the oracle that is being registered,

00:07:17.839 --> 00:07:21.424
so use a standard require for that.

00:07:21.425 --> 00:07:25.105
There's a function in the contract called generateIndexes().

00:07:25.105 --> 00:07:29.944
You can use that to generate three random indexes,

00:07:29.944 --> 00:07:32.149
each in the range zero to nine,

00:07:32.149 --> 00:07:34.144
for the oracle that is being registered.

00:07:34.144 --> 00:07:38.839
So you need to call that function and generate those indexes.

00:07:38.839 --> 00:07:43.219
Finally, you need to assign those generated indexes to

00:07:43.220 --> 00:07:47.810
the oracle and save that oracle to the contract state.

00:07:47.810 --> 00:07:52.470
So that's the scope of the exercise. Let's start now.

