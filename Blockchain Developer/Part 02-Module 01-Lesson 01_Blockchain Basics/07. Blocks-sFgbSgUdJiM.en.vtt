WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.929
Blocks are quite literally the building blocks of the entire blockchain.

00:00:04.929 --> 00:00:08.084
In this video, we'll explore what a block

00:00:08.085 --> 00:00:12.325
is and define some of the important terms related to the blocks.

00:00:12.324 --> 00:00:17.669
A block is a container that holds a list of transactions to be added to the blockchain.

00:00:17.670 --> 00:00:20.970
As we've seen, a blockchain is a shared ledger

00:00:20.969 --> 00:00:25.064
containing a list of all records that happen throughout the network.

00:00:25.065 --> 00:00:28.900
If we were to let this run on forever as one huge list,

00:00:28.899 --> 00:00:32.170
we'll end up with an enormous list of transactions.

00:00:32.170 --> 00:00:35.550
This would get really difficult to work with or manage.

00:00:35.549 --> 00:00:38.049
To give us more control over this list,

00:00:38.049 --> 00:00:42.934
the blockchain is split up into smaller sections known as blocks.

00:00:42.935 --> 00:00:44.820
As transactions are made,

00:00:44.820 --> 00:00:48.895
they are bundled together into these blocks and added to the block chain.

00:00:48.895 --> 00:00:52.600
This breaks up the ledger into smaller bite-sized pieces that

00:00:52.600 --> 00:00:56.635
we can use to manage the entire system more efficiently.

00:00:56.634 --> 00:00:58.350
Along with these transactions,

00:00:58.350 --> 00:01:01.814
blocks also hold some other interesting information.

00:01:01.814 --> 00:01:05.995
Let's look at the details of a single block more closely.

00:01:05.995 --> 00:01:09.329
While transactions are held in the body of a block,

00:01:09.329 --> 00:01:14.174
other information is held in a part of the block known as the block header.

00:01:14.174 --> 00:01:17.185
This header contains extra information that includes

00:01:17.185 --> 00:01:20.390
details about the structure of the data inside the block.

00:01:20.390 --> 00:01:22.534
The hash of the previous block,

00:01:22.534 --> 00:01:24.344
the time the block was made,

00:01:24.344 --> 00:01:28.495
the Merkle root, and the nonce all sit inside the blocks header.

00:01:28.495 --> 00:01:30.225
There were some new terms in there,

00:01:30.224 --> 00:01:32.594
so let's walk through them now.

00:01:32.594 --> 00:01:35.495
The previous block's hash is what it sounds like.

00:01:35.495 --> 00:01:37.920
It's the hash value for the block that comes

00:01:37.920 --> 00:01:40.635
directly before the given block in the chain.

00:01:40.635 --> 00:01:44.730
Having this connection links the blocks together by allowing us to always

00:01:44.730 --> 00:01:48.980
know what block comes before and after any block on the chain.

00:01:48.980 --> 00:01:52.484
This is what forms the basis of the entire blockchain.

00:01:52.484 --> 00:01:56.280
The time of block was created is also held inside the header.

00:01:56.280 --> 00:01:59.799
This way, we know exactly when each block was made.

00:01:59.799 --> 00:02:03.659
That helps us know when certain transactions took place and can

00:02:03.659 --> 00:02:08.069
help us catch things like when someone may have tried to spend the same money twice.

00:02:08.069 --> 00:02:10.049
With this information, we can decide

00:02:10.050 --> 00:02:13.590
which transactions were valid based on which happened first.

00:02:13.590 --> 00:02:16.319
This timestamp is the blockchain solution

00:02:16.319 --> 00:02:19.500
to the double-spending problem we mentioned earlier.

00:02:19.500 --> 00:02:24.395
The Merkle root, is a hash that represents every transaction inside the block.

00:02:24.395 --> 00:02:25.680
To get the merkle root,

00:02:25.680 --> 00:02:29.935
pairs of the transactions within the block are repeatedly hashed together.

00:02:29.935 --> 00:02:32.449
Each pair results any single hash,

00:02:32.449 --> 00:02:36.289
then the hash of two pairs of transactions are again hashed together

00:02:36.289 --> 00:02:40.750
over and over again until you're left with a single hash value.

00:02:40.750 --> 00:02:44.120
Given that final hash value known as the Merkle root,

00:02:44.120 --> 00:02:47.180
you can now reverse the hashing to reconstruct

00:02:47.180 --> 00:02:50.540
the entire set of transactions from the original block.

00:02:50.539 --> 00:02:53.599
The nonce has more to do with some topics we'll

00:02:53.599 --> 00:02:56.750
cover later related to what's known as mining.

00:02:56.750 --> 00:03:02.840
As quick introduction, the nonce is an arbitrary number that can only be used once.

00:03:02.840 --> 00:03:05.140
When creating a hash for a block,

00:03:05.139 --> 00:03:07.644
not just any value will work.

00:03:07.645 --> 00:03:11.100
The system requests a very specific hash value

00:03:11.099 --> 00:03:13.889
that starts with a certain number of zeros.

00:03:13.889 --> 00:03:18.179
These extra constraints make the hash more difficult to find.

00:03:18.180 --> 00:03:19.625
To find that value,

00:03:19.625 --> 00:03:22.889
you combine all the blocks data with this nonce.

00:03:22.889 --> 00:03:26.209
To try to generate the correct hash value.

00:03:26.210 --> 00:03:30.495
Computers guess this nonce over and over again until finally

00:03:30.495 --> 00:03:35.009
they come up with a value that gives us a hash that meets the constraints.

00:03:35.009 --> 00:03:38.449
Exactly why this is important might not be so clear right now,

00:03:38.449 --> 00:03:42.709
but we'll cover all this in more detail when we go over mining.

00:03:42.710 --> 00:03:45.800
The number of zeros that are requested to solve

00:03:45.800 --> 00:03:48.900
this problem is known as the blocks difficulty.

00:03:48.900 --> 00:03:50.650
If more zeros are needed,

00:03:50.650 --> 00:03:52.414
that's need more specific request,

00:03:52.414 --> 00:03:54.609
so it's more difficult to find.

00:03:54.610 --> 00:03:56.645
If you ask for more zeros,

00:03:56.645 --> 00:03:58.365
block difficulty goes up,

00:03:58.365 --> 00:04:01.314
if less zeros, block difficulty goes down.

00:04:01.314 --> 00:04:05.305
Another attribute a block has is known as the block size.

00:04:05.305 --> 00:04:10.335
The block size is the amount of space a block has to hold information.

00:04:10.335 --> 00:04:12.425
Like your computer or phone,

00:04:12.425 --> 00:04:15.410
there are limits to the amount of space on a block.

00:04:15.409 --> 00:04:20.550
This amount of space in a block is decided by the developer and helps control things

00:04:20.550 --> 00:04:26.025
like how long it takes for a block to fill up or how many blocks will be on the chain.

00:04:26.024 --> 00:04:30.629
Once decided, this will be the same for every block on a given chain,

00:04:30.629 --> 00:04:34.480
and can only be changed by making updates to the software.

00:04:34.480 --> 00:04:36.975
If the block size were one megabyte,

00:04:36.975 --> 00:04:39.810
that means that once this limit is reached,

00:04:39.810 --> 00:04:44.069
the block is full and it's time to start generating a new one.

00:04:44.069 --> 00:04:49.064
Another piece of information you'll find on a block is its hash value.

00:04:49.064 --> 00:04:55.435
This hash value is a result of running all the blocks data through a SHA256 algorithm.

00:04:55.435 --> 00:05:00.964
This hash will be the unique fingerprint we can use to identify the block in the future.

00:05:00.964 --> 00:05:04.119
Remember, if data changes even slightly,

00:05:04.120 --> 00:05:07.064
this will generate a completely new hash value.

00:05:07.064 --> 00:05:11.959
That means, if a transaction changes on the block this hash will also change.

00:05:11.959 --> 00:05:14.680
This is really important because it lets everyone

00:05:14.680 --> 00:05:17.285
know when a block has been tampered with.

00:05:17.285 --> 00:05:20.500
This makes the block chain a secure way to keep a history of

00:05:20.500 --> 00:05:25.165
information that you can be sure hasn't been changed without you knowing.

00:05:25.165 --> 00:05:27.250
That's the basic concept of a block,

00:05:27.250 --> 00:05:29.805
and some terminology to go along with it.

00:05:29.805 --> 00:05:32.530
There's not really more to it than that.

00:05:32.529 --> 00:05:36.054
Later, you'll learn how this fits into the system

00:05:36.055 --> 00:05:40.150
and how you can look through the data inside the block yourself.

00:05:40.149 --> 00:05:42.774
But overall, this is most of the concepts

00:05:42.774 --> 00:05:46.560
you'll need to understand about what a block actually is.

