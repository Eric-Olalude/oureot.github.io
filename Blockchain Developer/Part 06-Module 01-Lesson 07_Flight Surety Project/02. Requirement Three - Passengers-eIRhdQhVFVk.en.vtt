WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.675
Requirement number 3 is for the passengers.

00:00:03.675 --> 00:00:09.494
Now, passengers may pay up to one ether for purchasing flight insurance,

00:00:09.494 --> 00:00:12.225
so they're not required to pay one ether,

00:00:12.225 --> 00:00:14.640
they may pay any amount up to that amount.

00:00:14.640 --> 00:00:18.390
So essentially, what we are going to do is have a cap in

00:00:18.390 --> 00:00:23.985
the project for the amount that a passenger may invest.

00:00:23.985 --> 00:00:28.530
The flight numbers and timestamps for the purpose of

00:00:28.530 --> 00:00:34.015
this project can be fixed and defined in your Dapp client.

00:00:34.015 --> 00:00:40.890
We could potentially have this use real-time data from airline APIs,

00:00:40.890 --> 00:00:43.930
etc., but in our research,

00:00:43.930 --> 00:00:47.420
we found out that those are generally premium services,

00:00:47.420 --> 00:00:53.210
and their free offerings are very limited for only usually seven days.

00:00:53.210 --> 00:00:57.365
So it would be very difficult for you to use that in development,

00:00:57.365 --> 00:01:00.335
so we opted to make it a simulation.

00:01:00.335 --> 00:01:02.850
So essentially, in your Dapp client,

00:01:02.850 --> 00:01:06.800
you can define some arbitrary flag numbers and timestamps,

00:01:06.800 --> 00:01:12.935
and we can have the users select those for purchasing insurance.

00:01:12.935 --> 00:01:18.020
Now, if the flight is delayed due to airline fault,

00:01:18.020 --> 00:01:22.245
the passenger receives a credit of 1.5 times the amount they paid.

00:01:22.245 --> 00:01:23.425
As I mentioned earlier,

00:01:23.425 --> 00:01:24.600
that's an arbitrary amount,

00:01:24.600 --> 00:01:27.390
but for the purpose of the smart contract,

00:01:27.390 --> 00:01:30.405
we'll have that as a constant.

00:01:30.405 --> 00:01:36.475
Now, you can certainly go for a scenario where you can have an authorized user,

00:01:36.475 --> 00:01:39.000
go through authorized users rather,

00:01:39.000 --> 00:01:41.520
go through multiparty consensus and change that amount,

00:01:41.520 --> 00:01:44.360
you could also build some smart logic to make

00:01:44.360 --> 00:01:46.070
that variable based upon the amount of

00:01:46.070 --> 00:01:48.275
funding that is still available in the smart contract.

00:01:48.275 --> 00:01:51.360
But in terms of the core requirement,

00:01:51.360 --> 00:01:55.090
if you just make it 1.5x, you're good to go.

00:01:55.760 --> 00:02:02.870
The other final requirement for passengers is that when the funds are transferred,

00:02:02.870 --> 00:02:05.485
if an airline is delayed,

00:02:05.485 --> 00:02:09.545
the passenger does not actually get the funds in their wallet,

00:02:09.545 --> 00:02:15.255
it accumulates in their account in the smart contract,

00:02:15.255 --> 00:02:17.495
and they have to initiate a withdrawal,

00:02:17.495 --> 00:02:21.455
at which point they will be able to get the funds.

00:02:21.455 --> 00:02:26.660
This is the point where you will want to think very carefully about

00:02:26.660 --> 00:02:33.060
the debit before credit scenario that we discussed in a prior lesson.

