WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.950
Okay, here we have Visual Studio Code open and

00:00:04.950 --> 00:00:11.115
the project scaffolding code for FlightSurety all loaded up and ready to go.

00:00:11.115 --> 00:00:17.879
So the way I'm going to walk through this is go through each component,

00:00:17.879 --> 00:00:21.404
the smart contracts, the client app,

00:00:21.405 --> 00:00:25.980
the server and then also as I go through it I want to make you

00:00:25.980 --> 00:00:31.410
familiar with some of the libraries etc that are being used,

00:00:31.410 --> 00:00:34.064
also test scripts and so on.

00:00:34.064 --> 00:00:37.769
So we'll start with the smart contracts.

00:00:37.770 --> 00:00:40.905
So you'll see here that I have created

00:00:40.905 --> 00:00:46.859
two solidity files, FlightSuretyApp and FlightSuretyData.

00:00:46.859 --> 00:00:50.269
FlightSuretyData is the persistent file.

00:00:50.270 --> 00:00:55.984
That's the one that has all the data and FlightSuretyApp will be the one with app logic.

00:00:55.984 --> 00:00:58.505
So let's reduce this a little bit.

00:00:58.505 --> 00:01:05.420
So the code that you will find in the files right now is very sparse

00:01:05.420 --> 00:01:09.109
and it's up to you to augment that as you

00:01:09.109 --> 00:01:12.950
deem appropriate for matching the requirements of the project.

00:01:12.950 --> 00:01:15.650
So there's a basic constructor and

00:01:15.650 --> 00:01:22.835
the basic operational status code is in there and that's about all.

00:01:22.834 --> 00:01:29.134
There are functions steps for some of the functions that you will likely want.

00:01:29.135 --> 00:01:30.785
But as I mentioned earlier,

00:01:30.784 --> 00:01:33.319
you don't have to follow this exactly.

00:01:33.319 --> 00:01:38.524
One thing you'll notice is to avoid compiler errors with just a scaffolding.

00:01:38.525 --> 00:01:42.080
I've used pure visibility in many places.

00:01:42.079 --> 00:01:44.674
That is obviously not appropriate.

00:01:44.674 --> 00:01:48.170
For example if you're registering and airline it's going to change state.

00:01:48.170 --> 00:01:49.879
So pure would be completely inappropriate,

00:01:49.879 --> 00:01:53.750
but just so you know it's there in order to ensure that

00:01:53.750 --> 00:01:56.870
the scaffolding can compile without a ton of

00:01:56.870 --> 00:01:59.689
errors making it impossible to see what's going on.

00:01:59.689 --> 00:02:01.765
So there is a register airline.

00:02:01.765 --> 00:02:05.329
There is a buy function for

00:02:05.329 --> 00:02:09.634
buying insurance that you'll have to figure out what goes in there.

00:02:09.634 --> 00:02:12.620
Then there is a credit insurance.

00:02:12.620 --> 00:02:17.420
So recollect that we want to make sure that we don't send the funds directly.

00:02:17.419 --> 00:02:20.869
We first credit the users if they are eligible for

00:02:20.870 --> 00:02:24.605
a payout and then when it's time for payments,

00:02:24.604 --> 00:02:32.839
they can they can call pay and pay themselves essentially withdraw funds.

00:02:32.840 --> 00:02:39.245
Fund is what the airline would use in order to activate itself.

00:02:39.245 --> 00:02:43.564
The airlines go through a two-step process they first have to

00:02:43.564 --> 00:02:47.254
register and if they come after the fourth airline,

00:02:47.254 --> 00:02:52.715
then they have to wait to be voted in by other airlines.

00:02:52.715 --> 00:02:57.125
Once that's done then they need to find the 10 ether

00:02:57.125 --> 00:03:02.270
in order to be active and in the smart contract.

00:03:02.270 --> 00:03:09.469
The there's some code here with regard to generating keys etc,

00:03:09.469 --> 00:03:12.560
which is boilerplate stuff that we have covered in prior lessons,

00:03:12.560 --> 00:03:13.955
so I left that alone.

00:03:13.955 --> 00:03:17.750
So this is the gist of the data contract.

00:03:17.750 --> 00:03:23.375
There's a fair bit of work that you will need to do in order to get this working.

00:03:23.375 --> 00:03:29.944
One thing that will help you in that is to create really good test cases.

00:03:29.944 --> 00:03:35.659
Now as we progress through this orientation of the environment here,

00:03:35.659 --> 00:03:41.870
you'll see that you now actually have two possibilities of creating test environments.

00:03:41.870 --> 00:03:45.485
You can potentially continue to use the truffle testing mechanism.

00:03:45.485 --> 00:03:50.750
But there's also the DAP and you could use that as a means of testing by calling in also.

00:03:50.750 --> 00:03:54.055
So uncertain things which are more interactive,

00:03:54.055 --> 00:03:58.580
you might find it more useful to use the DAP as the locus

00:03:58.580 --> 00:04:03.990
for testing versus using the truffle tests.

