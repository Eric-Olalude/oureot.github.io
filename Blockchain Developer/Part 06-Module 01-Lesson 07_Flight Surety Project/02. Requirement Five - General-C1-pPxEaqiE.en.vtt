WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.524
Finally, we have some general requirements.

00:00:03.524 --> 00:00:07.605
The first of these is that you must build in

00:00:07.605 --> 00:00:12.074
the very first thing we talked about, operational status control.

00:00:12.074 --> 00:00:17.280
So every critical state changing function within

00:00:17.280 --> 00:00:22.880
your Smart Contract should have the ability for it to be paused.

00:00:22.879 --> 00:00:27.118
Now when we talked about the airlines,

00:00:27.118 --> 00:00:29.855
you're already implementing multiparty control there.

00:00:29.855 --> 00:00:34.293
So it will be a good idea to make that function sharable,

00:00:34.293 --> 00:00:36.369
so you can use it for voting,

00:00:36.369 --> 00:00:38.640
whether a new airline should be registered.

00:00:38.640 --> 00:00:42.230
You could potentially also use it for voting on whether

00:00:42.229 --> 00:00:46.339
the status of the application should be changed to paused.

00:00:46.340 --> 00:00:49.820
So you can write it in a dual-purpose manner and therefore,

00:00:49.820 --> 00:00:53.070
make your Smart Contract more efficient.

00:00:53.070 --> 00:00:57.105
In general, not just specific to this project,

00:00:57.104 --> 00:01:00.784
you should create functions that fail incredibly fast.

00:01:00.784 --> 00:01:02.779
Ideally, you want them to succeed.

00:01:02.780 --> 00:01:07.909
But if there is prior knowledge that the function is going to fail,

00:01:07.909 --> 00:01:10.744
please have the require functions

00:01:10.745 --> 00:01:15.125
related to those at the very beginning of your function,

00:01:15.125 --> 00:01:22.489
so that there is little or no guess expended by the user.

00:01:22.489 --> 00:01:27.169
So this is something that as a standard development practice for smart contracts,

00:01:27.170 --> 00:01:29.405
is try and fail fast,

00:01:29.405 --> 00:01:32.275
so costs are kept low.

00:01:32.275 --> 00:01:36.170
Now, we are going to shortly go

00:01:36.170 --> 00:01:40.445
through and look at all the scaffolding code that you're going to have,

00:01:40.444 --> 00:01:45.534
which you will replace to create the project.

00:01:45.534 --> 00:01:48.965
The scaffolding code is intended to make things easy for you.

00:01:48.965 --> 00:01:52.625
However, if you have better ideas or you find that

00:01:52.625 --> 00:01:54.349
there's other ways in which you can more

00:01:54.349 --> 00:01:57.099
efficiently meet the requirements of the project,

00:01:57.099 --> 00:01:59.659
please feel free to replace it with your own code.

00:01:59.659 --> 00:02:02.000
In fact, we encourage it because that gives you

00:02:02.000 --> 00:02:04.879
the opportunity to really build something from scratch,

00:02:04.879 --> 00:02:08.719
versus using the scaffolding that's already in place.

00:02:08.719 --> 00:02:10.564
The most important thing is,

00:02:10.564 --> 00:02:14.490
we're all here, in this joint endeavor here for learning.

00:02:14.490 --> 00:02:15.885
It's important that you have fun,

00:02:15.884 --> 00:02:17.519
it's important you challenge yourself,

00:02:17.520 --> 00:02:20.284
it's important you grow and have fun.

00:02:20.284 --> 00:02:25.180
The code and the project we presented here reflects a real-world example.

00:02:25.180 --> 00:02:27.290
In fact, if you do some searching on the web,

00:02:27.289 --> 00:02:31.099
you'll see that there are several companies right now that are either already

00:02:31.099 --> 00:02:35.323
live or pursuing this concept of flight insurance,

00:02:35.324 --> 00:02:36.719
it's a growing trend.

00:02:36.719 --> 00:02:39.680
So what you'll be working on is something you can really sink your teeth

00:02:39.680 --> 00:02:43.280
into as a real project that is both

00:02:43.280 --> 00:02:48.765
interesting and will help you test every aspect

00:02:48.764 --> 00:02:56.049
of web blockchain development and put together a great solution.

