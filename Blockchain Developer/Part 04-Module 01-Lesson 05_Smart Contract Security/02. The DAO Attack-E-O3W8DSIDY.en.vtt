WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.339
Before getting into the research,

00:00:02.339 --> 00:00:04.980
I'd like to go over a few hands-on examples that will help you

00:00:04.980 --> 00:00:08.234
understand some of the core principles behind blockchain security.

00:00:08.234 --> 00:00:10.619
For example, how could a vulnerability come

00:00:10.619 --> 00:00:13.035
from coding decisions that seem pretty normal?

00:00:13.035 --> 00:00:15.705
How might somebody identify these vulnerabilities?

00:00:15.705 --> 00:00:18.644
Once it's found, how would someone exploit that error?

00:00:18.644 --> 00:00:22.050
Finally, what could have been done to avoid this from ever happening?

00:00:22.050 --> 00:00:25.935
To do that, we'll get hands-on and code up a smart contract for ourselves.

00:00:25.934 --> 00:00:29.054
We'll take on the role of the hacker to exploit that contract.

00:00:29.054 --> 00:00:31.199
We'll finish up by making the changes that could

00:00:31.199 --> 00:00:33.585
have prevented the vulnerability from ever happening.

00:00:33.585 --> 00:00:35.660
In this section, we'll explore that type of

00:00:35.659 --> 00:00:38.839
vulnerability by looking at what is known as the DAO attack.

00:00:38.840 --> 00:00:41.600
This is a famous hack that happened on the Ethereum network,

00:00:41.600 --> 00:00:45.135
that resulted in the loss of about $60 million worth of Ether.

00:00:45.134 --> 00:00:49.939
To get started, let's head over to Remix and build up the code for the original contract.

00:00:49.939 --> 00:00:52.280
I left a code snippet under the video that you

00:00:52.280 --> 00:00:54.939
can use to start off with before we start coding.

00:00:54.939 --> 00:00:59.570
Basically, the purpose of this contract was to operate like a venture capital fund,

00:00:59.570 --> 00:01:01.579
allowing users to donate towards ideas

00:01:01.579 --> 00:01:03.909
that they felt passionate about and wanted to support.

00:01:03.909 --> 00:01:07.969
This is similar to something like Kickstarter but the DAO was hoping that the benefits of

00:01:07.969 --> 00:01:10.129
the blockchain would reduce the amount of fees that

00:01:10.129 --> 00:01:12.574
were needed to be taken by the owners of the website.

00:01:12.575 --> 00:01:14.630
We'll need to build out a few lines of code,

00:01:14.629 --> 00:01:18.229
but basically you can already see that our contract is meant to do two things.

00:01:18.230 --> 00:01:20.719
For one, it allows users to contribute

00:01:20.719 --> 00:01:23.379
any amount of Ether towards a campaign that they'd like.

00:01:23.379 --> 00:01:26.089
Second, it allows them to withdraw the amount of money they

00:01:26.090 --> 00:01:29.620
contributed in case they no longer want to support that campaign.

00:01:29.620 --> 00:01:34.340
Knowing that, let's build out the function that allows users to withdraw their coins.

00:01:34.340 --> 00:01:36.409
First, the user will need to be able to

00:01:36.409 --> 00:01:39.004
withdraw the amount of coins that they had contributed.

00:01:39.004 --> 00:01:43.084
To do that, we'll set the withdrawal amount to the balance of the message sender.

00:01:43.084 --> 00:01:46.009
We can do that because down here on the contribute function,

00:01:46.010 --> 00:01:49.550
we continue to increment the amount that has been contributed by each user.

00:01:49.549 --> 00:01:52.429
So, here, we're just referencing that total.

00:01:52.430 --> 00:01:56.510
Next, we'll need to reference the wallet we'll be sending Ether back to.

00:01:56.510 --> 00:01:58.685
We can do that with this line.

00:01:58.685 --> 00:02:01.280
Next, we'll reference payout then send

00:02:01.280 --> 00:02:04.730
the total number of tokens that they've contributed back to the user.

00:02:04.730 --> 00:02:07.100
That can be done like this.

00:02:07.099 --> 00:02:11.194
The final thing we'll want to do is set the balance of this user to zero.

00:02:11.194 --> 00:02:12.844
Since their funds have been returned,

00:02:12.844 --> 00:02:15.409
they should no longer be a balance available to them.

00:02:15.409 --> 00:02:17.585
Okay, so this all makes sense right now,

00:02:17.585 --> 00:02:18.860
and it seems pretty simple.

00:02:18.860 --> 00:02:20.625
You check how much they've contributed,

00:02:20.625 --> 00:02:23.164
send it back and set their balanced to zero.

00:02:23.164 --> 00:02:24.709
The question now is,

00:02:24.710 --> 00:02:28.415
how did code like this result in the loss of millions of dollars?

00:02:28.414 --> 00:02:32.644
Before moving on, we'll take a quick break to see if you can spot the vulnerability.

00:02:32.645 --> 00:02:35.480
To help you out, I also put the framework for the wallet

00:02:35.479 --> 00:02:38.359
that this contract would be interacting with down below the video.

00:02:38.360 --> 00:02:40.970
It doesn't have the lines of code that exploit the weakness

00:02:40.969 --> 00:02:44.500
yet but it helps you understand how these two contracts would interact.

00:02:44.500 --> 00:02:46.400
If you're really not sure, that's fine.

00:02:46.400 --> 00:02:49.530
This is one of those problems that's really quick to spot if you know the answer,

00:02:49.530 --> 00:02:51.349
and pretty tough to see for the first time.

00:02:51.349 --> 00:02:53.269
So, take some time to think about it.

00:02:53.270 --> 00:02:56.640
When you're ready, we'll go over the answer in the next video.

