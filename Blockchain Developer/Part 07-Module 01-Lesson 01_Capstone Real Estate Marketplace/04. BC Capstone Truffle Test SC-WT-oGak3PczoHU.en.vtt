WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:04.080
Inside of your test folder is where you'll find

00:00:04.080 --> 00:00:07.634
the JavaScript files that Truffle will run.

00:00:07.634 --> 00:00:10.349
When you run the Truffle commands,

00:00:10.349 --> 00:00:14.099
you'll notice that there are three different tests files.

00:00:14.099 --> 00:00:19.035
One is for the ERC721Mintable token,

00:00:19.035 --> 00:00:22.620
one is for the verifier that will be

00:00:22.620 --> 00:00:27.780
generated from Zokrates and you'll just test to make sure that that works,

00:00:27.780 --> 00:00:31.890
and then the third will be the combination of combining

00:00:31.890 --> 00:00:36.855
the ERC721 token and the logic for Zokrates.

00:00:36.854 --> 00:00:38.924
So we put these tests in-between

00:00:38.924 --> 00:00:42.419
each step just to make sure that you're on the right path.

00:00:42.420 --> 00:00:48.490
To start off, this will be the first test that you will actually run with Truffle.

00:00:48.490 --> 00:00:53.710
This is the testing for your ERC721Mintable tokens.

00:00:53.710 --> 00:00:59.064
You'll notice that a lot of scaffolding has been provided for you in this file.

00:00:59.064 --> 00:01:06.159
In the following two Truffle tests coming after this 721Mintable,

00:01:06.159 --> 00:01:08.890
there won't be any scaffolding for you but you can use

00:01:08.890 --> 00:01:13.060
the scaffolding setup that you learned from reviewing this and

00:01:13.060 --> 00:01:16.510
filling out this boilerplate code to go ahead and do

00:01:16.510 --> 00:01:20.275
so in the remaining two Truffle tests.

00:01:20.275 --> 00:01:24.280
As always, the sections that need to be filled out come with a

00:01:24.280 --> 00:01:29.750
to-do with the instructions on how you need to go about it.

00:01:29.750 --> 00:01:34.055
The individual way that you write your tests can be your own.

00:01:34.055 --> 00:01:37.820
You just have to make sure that you accomplish the tasks

00:01:37.819 --> 00:01:42.754
that are listed in the above commentary.

00:01:42.754 --> 00:01:46.310
So should return total supply within this tests,

00:01:46.310 --> 00:01:51.605
you should make sure that your contract can comply with this.

00:01:51.605 --> 00:01:58.534
So it will have to return the total supply of your ERC721 token successfully.

00:01:58.534 --> 00:02:03.920
You can go through each one of these steps and fill out a boilerplate code for it.

00:02:03.920 --> 00:02:09.319
In fact, you can continue to write more and more tests because the more tests,

00:02:09.319 --> 00:02:11.780
the better of an understanding that you of how to

00:02:11.780 --> 00:02:14.675
built your code and the reassurance that it works.

00:02:14.675 --> 00:02:16.850
So you shouldn't be limited to

00:02:16.849 --> 00:02:20.609
just the amount of tests that we put in the boilerplate code for you,

00:02:20.610 --> 00:02:24.035
you can go ahead and write as many tests as you feel necessary.

00:02:24.034 --> 00:02:26.189
This section right here that says,

00:02:26.189 --> 00:02:32.810
"should return token uri," this is information that is going to be

00:02:32.810 --> 00:02:41.245
kept in the ERC721 token contract and this is where the metadata is being fetched from.

00:02:41.245 --> 00:02:45.730
So this is an example of what it should return.

00:02:45.729 --> 00:02:49.539
There is a base URI which would be

00:02:49.539 --> 00:02:54.780
this section right here and then there's the token URI.

00:02:54.780 --> 00:02:57.759
In that case, it is just the one.

00:02:57.759 --> 00:03:06.024
So the token ID could be any number that the token is from zero to one billion per se.

00:03:06.025 --> 00:03:11.155
The second test that you'll be doing is the TestSquareVerifier.

00:03:11.155 --> 00:03:17.305
In this case, you'll just be defining the verifier contract that was generated.

00:03:17.305 --> 00:03:19.855
It will be automatically generated by following the steps

00:03:19.854 --> 00:03:22.449
provided to you in the classroom by

00:03:22.449 --> 00:03:27.909
Zokrates and there are only two test cases that you're going to go through,

00:03:27.909 --> 00:03:31.854
and one, you're going to make sure that you can verify

00:03:31.854 --> 00:03:37.134
a correct proof and that you can verify an incorrect proof.

00:03:37.134 --> 00:03:39.250
So there's only two test cases.

00:03:39.250 --> 00:03:40.990
One is that the proof works,

00:03:40.990 --> 00:03:42.790
the other is that the proof doesn't.

00:03:42.789 --> 00:03:45.144
It's a pretty simple test.

00:03:45.145 --> 00:03:51.070
The final test will be the combination of both the ERC721

00:03:51.069 --> 00:03:56.769
token and the code that we mixed in with Zokrates.

00:03:56.770 --> 00:04:02.860
So this will be testing that you can add a solution to the mapping.

00:04:02.860 --> 00:04:11.850
This will also be testing that you can mince a token using the SolnSquareVerifier.

00:04:11.849 --> 00:04:14.139
Remember, in this contract,

00:04:14.139 --> 00:04:17.449
you'll only be able to mint a token if you

00:04:17.449 --> 00:04:21.680
prove that it is actually verified using Zokrates.

00:04:21.680 --> 00:04:24.680
So that's the trick with this test.

00:04:24.680 --> 00:04:28.009
But again, very few cases as opposed to

00:04:28.009 --> 00:04:34.039
the first test that we are going to with the ERC721Mintable tokens.

00:04:34.040 --> 00:04:36.004
When running these tests,

00:04:36.004 --> 00:04:37.865
it should look something like this.

00:04:37.865 --> 00:04:44.730
You should be in the actual eth-contracts folder in your repo,

00:04:44.730 --> 00:04:48.280
and you'll do Truffle test,

00:04:48.279 --> 00:04:50.944
and the output should look something like this.

00:04:50.944 --> 00:04:55.519
In this case, I'm using a repo where I already did

00:04:55.519 --> 00:05:02.629
my NPM installation so that I could get all the node modules from open Zeppelin.

00:05:02.629 --> 00:05:07.850
I also already filled out all the boilerplate contract code.

00:05:07.850 --> 00:05:10.460
So this is how the tests will look in

00:05:10.459 --> 00:05:15.004
an end game scenario once you've filled out all the boilerplate code.

00:05:15.004 --> 00:05:19.909
Now naturally you won't have all of these tests written at the same time.

00:05:19.910 --> 00:05:24.275
You'll start off most likely with one test at a time.

00:05:24.274 --> 00:05:28.339
So for instance, this is the test ERC721Mintable.

00:05:28.339 --> 00:05:33.859
If I wanted to, I could only Truffle test the individual tests that I want.

00:05:33.860 --> 00:05:38.840
So you can do Truffle test and then you can just do straight

00:05:38.839 --> 00:05:43.519
into the test folder and you can choose whichever test that you want to run individually.

00:05:43.519 --> 00:05:49.039
So in this case, I'll choose the ERC721Mintable tests and I

00:05:49.040 --> 00:05:55.950
could specifically run that while omitting the other two Truffle tests.

00:05:55.949 --> 00:06:02.479
There you have it. You'll see that it only ran the test ERC721Mintable tests

00:06:02.480 --> 00:06:09.970
and it omitted the previous two SquareVerifier and SolnSquareVerifier tests.
最新课程跟课件还有一对一辅导请加wx：udacity6
