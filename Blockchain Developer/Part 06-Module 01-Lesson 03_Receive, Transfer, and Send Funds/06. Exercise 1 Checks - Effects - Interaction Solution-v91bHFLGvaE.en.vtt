WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.734
Let's walk through the solution for this exercise.

00:00:03.734 --> 00:00:06.105
On the screen, you see code.

00:00:06.105 --> 00:00:09.030
The first line is using SafeMath.

00:00:09.029 --> 00:00:10.830
As I mentioned earlier,

00:00:10.830 --> 00:00:16.515
it's important that you always use SafeMath and by using SafeMath in this fashion,

00:00:16.515 --> 00:00:19.920
all uint256's can now have the add,

00:00:19.920 --> 00:00:23.030
mul, div, and sub methods.

00:00:23.030 --> 00:00:29.105
We start off by creating our mapping variable for sales and then comes our function.

00:00:29.105 --> 00:00:31.160
Now the first thing in the checks,

00:00:31.160 --> 00:00:33.409
effects, and interaction pattern is checks.

00:00:33.409 --> 00:00:40.194
So our first require is message.sender equals tx.origin.

00:00:40.195 --> 00:00:42.335
Now this is something you may not be familiar with.

00:00:42.335 --> 00:00:44.945
So let's focus on that for a moment.

00:00:44.945 --> 00:00:49.730
Typically, message.sender is the color of your function.

00:00:49.729 --> 00:00:56.929
If your function is being called by another contract or through a chain of contracts,

00:00:56.929 --> 00:00:59.704
it will have a tx.origin.

00:00:59.704 --> 00:01:05.075
If the message.sender and TX origin values match,

00:01:05.075 --> 00:01:07.829
you know that the color is not a contract,

00:01:07.829 --> 00:01:09.969
it is not possible for it to be a contract,

00:01:09.969 --> 00:01:12.620
it is going to be an externally owned account.

00:01:12.620 --> 00:01:14.325
In other words, a user;

00:01:14.325 --> 00:01:18.939
and that was the requirement to ensure that the function is not callable by

00:01:18.939 --> 00:01:21.250
a contract and the way to do that is to check

00:01:21.250 --> 00:01:24.280
the equality of message sender and TX origin.

00:01:24.280 --> 00:01:30.070
Our next require ensures that the sales mapping for

00:01:30.069 --> 00:01:36.414
the calling account has enough of the amount that is destined to be withdrawn.

00:01:36.415 --> 00:01:39.940
If there isn't, the require reports insufficient funds.

00:01:39.939 --> 00:01:43.599
So that's the checks. Next, come the effects and this is the key part here.

00:01:43.599 --> 00:01:48.599
We want to make sure that we save the state that is needed, in this case,

00:01:48.599 --> 00:01:54.379
the value of the sales mapping for the sender in a temporary variable.

00:01:54.379 --> 00:02:01.219
We then subtract the amount that is being withdrawn from the variable.

00:02:01.219 --> 00:02:03.215
So that's the state change.

00:02:03.215 --> 00:02:06.409
So at this point, even if there were a re-entrancy attack,

00:02:06.409 --> 00:02:10.534
it would not matter because the sales value has already been

00:02:10.534 --> 00:02:16.745
subtracted and therefore they cannot drain more and more funds from the account.

00:02:16.745 --> 00:02:18.515
Finally, the interaction.

00:02:18.514 --> 00:02:21.599
That's the last step of the pattern and that's

00:02:21.599 --> 00:02:25.819
where the sender has actually transferred the amount due to them.

00:02:25.819 --> 00:02:28.724
So this is an example of the checks,

00:02:28.724 --> 00:02:31.319
effects, and interaction pattern in use.

00:02:31.319 --> 00:02:34.340
If you consistently think through your functions and make sure you

00:02:34.340 --> 00:02:37.490
divide them up in these three sections,

00:02:37.490 --> 00:02:41.195
you can be assured that your code will be secure

00:02:41.194 --> 00:02:46.620
and all your transactions are not subject to re-entrancy attacks.

