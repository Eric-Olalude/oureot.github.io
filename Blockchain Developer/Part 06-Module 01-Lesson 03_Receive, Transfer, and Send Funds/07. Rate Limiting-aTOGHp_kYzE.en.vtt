WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.730
Our topic is rate limiting.

00:00:02.730 --> 00:00:05.430
You might be familiar with this concept when it comes

00:00:05.430 --> 00:00:08.070
to web applications where in order to

00:00:08.070 --> 00:00:13.485
ensure that surge of users does not take down an application,

00:00:13.485 --> 00:00:18.870
there are controls typically at the edge of the network, perhaps on routers,

00:00:18.870 --> 00:00:21.090
etc, to limit the number of users that can

00:00:21.090 --> 00:00:24.975
simultaneously use or access a website or an application.

00:00:24.975 --> 00:00:28.680
The same concept applies in smart contracts.

00:00:28.680 --> 00:00:31.890
Rate limiting controls the frequency at

00:00:31.890 --> 00:00:35.085
which a contract operation such as a function call,

00:00:35.085 --> 00:00:38.640
can occur, and the general reason this is done is to

00:00:38.640 --> 00:00:42.540
minimize loss such as rapid drainage of funds.

00:00:42.540 --> 00:00:44.710
By implementing rate limiting,

00:00:44.710 --> 00:00:49.380
you can be assured that any actions that are being taken against your contract

00:00:49.380 --> 00:00:55.915
are occurring in a very controlled manner and not subject to attack.

00:00:55.915 --> 00:00:59.170
The best way to implement rate limiting is as

00:00:59.170 --> 00:01:03.160
a function modifier that accepts a time parameter,

00:01:03.160 --> 00:01:06.505
and that time parameter corresponds to the delay

00:01:06.505 --> 00:01:10.060
that you want to enforce between calls of your function.

00:01:10.060 --> 00:01:16.645
So for example, if you want to have a delay of 30 seconds between function calls,

00:01:16.645 --> 00:01:19.525
then your time parameter would be 30 seconds.

00:01:19.525 --> 00:01:25.109
By making this rate limiting design pattern as a function modifier,

00:01:25.109 --> 00:01:28.550
you make it so it's very flexible and can be used throughout

00:01:28.550 --> 00:01:32.705
your smart contract or smart contracts in a very easy manner.

00:01:32.705 --> 00:01:35.515
The pattern goes as follows;

00:01:35.515 --> 00:01:37.725
you first initialize a variable,

00:01:37.725 --> 00:01:39.055
let's call that enabled,

00:01:39.055 --> 00:01:40.610
to the current time.

00:01:40.610 --> 00:01:44.250
Now keep in mind that in a smart contract,

00:01:44.350 --> 00:01:48.855
the keyword now or blockchain.timestamp,

00:01:48.855 --> 00:01:51.320
either of them can give you the current time.

00:01:51.320 --> 00:01:54.260
You want to be careful about using it because it is

00:01:54.260 --> 00:01:57.410
possible for a minor to manipulate that time.

00:01:57.410 --> 00:01:59.675
But that's a different topic.

00:01:59.675 --> 00:02:04.055
So you initially start off by creating this variable, next,

00:02:04.055 --> 00:02:07.910
you check that the time of call in

00:02:07.910 --> 00:02:12.995
the modifier is greater than whatever you've set the enabled time to be,

00:02:12.995 --> 00:02:19.235
next, you increment the enabled variable by the time parameter in the modifier.

00:02:19.235 --> 00:02:21.920
So for example, if you are saying that

00:02:21.920 --> 00:02:24.830
your function should only be called every 30 seconds,

00:02:24.830 --> 00:02:28.240
that's what you would increment the enabled variable by.

00:02:28.240 --> 00:02:31.920
Finally, you use that modifier in all rate limiting functions.

00:02:31.920 --> 00:02:34.585
In general, what it does is

00:02:34.585 --> 00:02:39.410
increment the global variable to make sure that every time it's called,

00:02:39.410 --> 00:02:43.410
the new time that it can be called,

00:02:43.410 --> 00:02:45.440
corresponds to the current time,

00:02:45.440 --> 00:02:48.725
plus whatever the Delta time is that you would like.

00:02:48.725 --> 00:02:51.500
So that's the general pattern behind it.

00:02:51.500 --> 00:02:55.620
Now, let's do an exercise on rate limiting.

