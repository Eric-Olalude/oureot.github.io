WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.779
In previous lessons, you learned about the "payable" keyword.

00:00:03.779 --> 00:00:08.459
This is the keyword that enables a function to receive funds.

00:00:08.460 --> 00:00:14.250
Any function that has the payable keyword is a candidate for receiving ether when called.

00:00:14.250 --> 00:00:21.059
The Message.value property indicates the amount of ether that was sent to that function,

00:00:21.059 --> 00:00:24.269
and the funds are received in the unit of way.

00:00:24.269 --> 00:00:27.015
Your contract may have a fallback function,

00:00:27.015 --> 00:00:29.730
and that's a generic way to receive funds.

00:00:29.730 --> 00:00:32.204
Fallback functions have no name,

00:00:32.204 --> 00:00:37.545
and they can only exist as a one singular item in a contract.

00:00:37.545 --> 00:00:41.660
Funds sent from a contract to a fallback function in

00:00:41.659 --> 00:00:47.464
another contract have a very low gas stipend of 2,300.

00:00:47.465 --> 00:00:50.435
Now let's take a look at transferring funds.

00:00:50.435 --> 00:00:54.484
Funds received by a contract stay in the contract account.

00:00:54.484 --> 00:00:56.240
As we reviewed earlier,

00:00:56.240 --> 00:00:59.270
contract accounts do not have private keys and therefore cannot

00:00:59.270 --> 00:01:03.140
send the funds out unless done through code.

00:01:03.140 --> 00:01:06.079
If received funds are not transferred to

00:01:06.079 --> 00:01:10.140
an External Owned Account or EOA with a private key,

00:01:10.140 --> 00:01:12.209
or used by contract functions,

00:01:12.209 --> 00:01:15.559
they are trapped forever in the contract account.

00:01:15.560 --> 00:01:20.780
Address.transfer is a safe way for you

00:01:20.780 --> 00:01:25.400
to transfer funds from within the contract to an EOA,

00:01:25.400 --> 00:01:27.305
an Externally Owned Account.

00:01:27.305 --> 00:01:30.260
It will throw an error on failure which will

00:01:30.260 --> 00:01:34.984
ensure that no unsafe transactions continue forward.

00:01:34.984 --> 00:01:38.954
Address.send can be used, it's somewhat safe,

00:01:38.954 --> 00:01:45.314
it returns false, but in general address.transfer is the preferred method to send funds.

00:01:45.314 --> 00:01:50.780
Address.color value is quite unsafe and can potentially use all available gas,

00:01:50.780 --> 00:01:53.700
so you should avoid it if possible.

00:01:53.700 --> 00:02:01.424
Sending funds have the possibility of freezing funds if,

00:02:01.424 --> 00:02:08.585
for example, you try and execute a loop where the contract runs out of gas.

00:02:08.585 --> 00:02:14.945
It is recommended that you use a pull and not a push approach for sending funds.

00:02:14.944 --> 00:02:19.685
The pattern there is to essentially credit the recipient's account,

00:02:19.685 --> 00:02:24.439
and when the account owner of that account wishes to withdraw

00:02:24.439 --> 00:02:29.555
the funds they can call a custom function within your contract to withdraw the funds.

00:02:29.555 --> 00:02:34.610
This is generally a safe way to ensure that both the credit

00:02:34.610 --> 00:02:37.460
of the account and the transfer or withdrawal

00:02:37.460 --> 00:02:40.820
of funds doesn't occur in the same transaction.

00:02:40.819 --> 00:02:44.044
It's recommended that when sending funds,

00:02:44.044 --> 00:02:49.849
when trying to determine who the owner is or who the fund should be sent to,

00:02:49.849 --> 00:02:53.299
do not use tx.origin and instead use

00:02:53.300 --> 00:02:59.405
msg.sender which is the direct calling account for that function.

00:02:59.405 --> 00:03:03.270
That brings us to our first quiz.

00:03:03.699 --> 00:03:07.589
Which of the following statements is true?

