WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.779
Interacting with Ethereum live networks is a huge accomplishment.

00:00:03.779 --> 00:00:06.660
Coming soon, you'll be able to read any information you want from

00:00:06.660 --> 00:00:09.824
the contracts on these networks and render them to a website.

00:00:09.824 --> 00:00:11.820
While this is extremely helpful,

00:00:11.820 --> 00:00:14.040
there are some downsides to working directly with

00:00:14.039 --> 00:00:18.195
the live Ethereum main and test networks when you're just getting started with a project.

00:00:18.195 --> 00:00:20.969
For one, anytime you want to make a transaction,

00:00:20.969 --> 00:00:22.454
it's going to cause gas.

00:00:22.454 --> 00:00:25.094
You'll learn more about exactly what gases shortly,

00:00:25.094 --> 00:00:28.515
but basically it's like the miners fees you saw on Bitcoin.

00:00:28.515 --> 00:00:30.960
It's a small fee taken from the participants in

00:00:30.960 --> 00:00:35.219
the transaction that goes towards paying for the cost of running the computations.

00:00:35.219 --> 00:00:38.659
On the main network, any gas used cost Ethereum,

00:00:38.659 --> 00:00:40.074
which is worth real money,

00:00:40.075 --> 00:00:42.465
and you can only get it by purchasing it.

00:00:42.465 --> 00:00:46.945
You don't really want to be running lots of tests if they cost your real money each time.

00:00:46.945 --> 00:00:50.064
An alternative you've seen is using the test network.

00:00:50.064 --> 00:00:51.854
This is great because it's free,

00:00:51.854 --> 00:00:54.904
and you can always get more Test Ether from a Test Faucet.

00:00:54.905 --> 00:00:57.070
But that's not too convenient.

00:00:57.070 --> 00:00:59.020
To get a few accounts together with

00:00:59.020 --> 00:01:01.720
enough Ether to play around with is a bit of a hassle.

00:01:01.719 --> 00:01:04.810
For example, say for some reason that you needed to test

00:01:04.810 --> 00:01:08.305
transactions using five accounts that had 50 Ether each.

00:01:08.305 --> 00:01:11.245
You'd have a tough time doing that on the test network.

00:01:11.245 --> 00:01:13.825
Also, when using the test network,

00:01:13.825 --> 00:01:16.960
you're still depending on the network to verify transactions.

00:01:16.959 --> 00:01:20.589
Any transaction that takes place goes through the network in real-time,

00:01:20.590 --> 00:01:24.704
and testing out features this way could become extremely tedious or time-consuming.

00:01:24.704 --> 00:01:27.064
To solve these types of problems and more,

00:01:27.064 --> 00:01:31.495
a tool named Ganache was created that allows you to deploy your own local blockchain.

00:01:31.495 --> 00:01:33.780
The blockchain is quick to setup and comes

00:01:33.780 --> 00:01:37.030
preloaded with 10 accounts that each hold 100 Ether.

00:01:37.030 --> 00:01:39.590
This makes it extremely simple to get up and running

00:01:39.590 --> 00:01:42.445
with and allows you to test quickly and efficiently.

00:01:42.444 --> 00:01:45.709
Also, transactions happen instantaneously and are

00:01:45.709 --> 00:01:49.579
viewable in either a graphic user interface or a command line interface,

00:01:49.579 --> 00:01:51.125
depending on what you prefer.

00:01:51.125 --> 00:01:53.495
So, that's the main purpose of Ganache.

00:01:53.495 --> 00:01:55.805
It's a quick way to start up a local blockchain

00:01:55.805 --> 00:01:58.430
that you can use for testing the application you'll build.

00:01:58.430 --> 00:02:00.515
It's easy to install, and coming up,

00:02:00.515 --> 00:02:02.870
I'll show you how to get up and running with it for yourself.

