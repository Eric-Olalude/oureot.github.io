WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.800
All right. We've come a long way,

00:00:01.800 --> 00:00:03.600
connected a lots of different tools,

00:00:03.600 --> 00:00:06.615
and are set up in our local environment with a local blockchain.

00:00:06.615 --> 00:00:09.335
Hopefully, everything has worked out on your end so far.

00:00:09.335 --> 00:00:12.300
If so, you're ready to start working with transactions.

00:00:12.300 --> 00:00:15.410
In the last video, I went over transactions at a high level,

00:00:15.410 --> 00:00:18.180
and in this video, we'll make one for ourselves.

00:00:18.180 --> 00:00:20.820
This will be a long video but there's a lot

00:00:20.820 --> 00:00:23.235
of fun things to go over and I hope you'll learn a lot.

00:00:23.235 --> 00:00:26.550
By the end, you'll be able to setup transactions for yourself.

00:00:26.550 --> 00:00:30.330
Down below the video, you'll see all the code I have on my screen right now.

00:00:30.330 --> 00:00:31.815
If you want to follow along,

00:00:31.815 --> 00:00:33.630
paste this into your own editor.

00:00:33.630 --> 00:00:37.665
I'll walk through every line to help us get more comfortable with what you're looking at.

00:00:37.665 --> 00:00:39.885
So, what's going on here?

00:00:39.885 --> 00:00:43.895
Well, what I'm trying to do is make a transaction between two accounts.

00:00:43.895 --> 00:00:46.940
To do that, there's a few main things that need to happen.

00:00:46.940 --> 00:00:49.370
First, I need to bring in the dependencies

00:00:49.370 --> 00:00:52.055
and set up my connection between Web3 and Ganache.

00:00:52.055 --> 00:00:53.885
That's the part we already know.

00:00:53.885 --> 00:00:57.935
From there, we can look at the larger flags I've put to see what the main goals are.

00:00:57.935 --> 00:00:59.675
I'll need to set up the accounts,

00:00:59.675 --> 00:01:01.670
then I'll create the transaction.

00:01:01.670 --> 00:01:03.740
Next, I'll sign the transaction,

00:01:03.740 --> 00:01:06.980
and finally, I'll send that transaction to the network.

00:01:06.980 --> 00:01:11.630
I also put comments on each line to describe what they do in more detail.

00:01:11.630 --> 00:01:15.370
For now, I'll take out most of what's here and start from the top.

00:01:15.370 --> 00:01:17.285
We'll rebuild this as we go.

00:01:17.285 --> 00:01:20.215
To start, let's get into dependencies.

00:01:20.215 --> 00:01:23.610
Something you haven't seen here yet is ethereumjs-tx.

00:01:23.610 --> 00:01:27.960
I put a link to the documentation down below the video, if you want to learn more.

00:01:27.960 --> 00:01:30.125
But basically, it's a module for creating,

00:01:30.125 --> 00:01:32.765
manipulating, and signing Ethereum transactions.

00:01:32.765 --> 00:01:34.060
That's exactly what we're doing,

00:01:34.060 --> 00:01:35.780
so this can definitely help us out.

00:01:35.780 --> 00:01:37.550
To install it to your project,

00:01:37.550 --> 00:01:42.360
type npm install ethereumjs-tx from your terminal.

00:01:42.970 --> 00:01:45.470
Everything else here you've seen before,

00:01:45.470 --> 00:01:47.465
so I'll move on to setting up the accounts.

00:01:47.465 --> 00:01:51.725
For this, I created variables for a sending address and a receiving address.

00:01:51.725 --> 00:01:55.505
That's just because I think it'll help keep the code organized for us when starting out.

00:01:55.505 --> 00:01:58.100
There's nothing saying that the receiving address here

00:01:58.100 --> 00:02:00.740
couldn't just send money right back to the sending address,

00:02:00.740 --> 00:02:03.185
they're just two addresses that can transact with one another.

00:02:03.185 --> 00:02:04.670
So, when you're comfortable,

00:02:04.670 --> 00:02:08.735
you could change this back to something like address one and address two, if you like.

00:02:08.735 --> 00:02:10.970
What you need to do is get two addresses

00:02:10.970 --> 00:02:14.100
from your local blockchain and place them in here.

00:02:14.140 --> 00:02:17.825
These will be the two addresses that take part in the transaction.

00:02:17.825 --> 00:02:19.625
Choose whichever you like.

00:02:19.625 --> 00:02:21.845
Next, just to make sure we're set up,

00:02:21.845 --> 00:02:23.870
I'll console.log each of these and run

00:02:23.870 --> 00:02:27.210
the file to check if we get the balance of each address.

00:02:29.080 --> 00:02:32.030
Great. It looks like we're all set up.

00:02:32.030 --> 00:02:35.195
Now, we can move on to creating the transaction.

00:02:35.195 --> 00:02:36.875
To create a transaction,

00:02:36.875 --> 00:02:39.290
you set a variable raw transaction equal

00:02:39.290 --> 00:02:42.130
to an object that contains the fields we mentioned earlier.

00:02:42.130 --> 00:02:44.350
Here, I have a nonce, to,

00:02:44.350 --> 00:02:47.510
gasPrice, gasLimit, value, and data.

00:02:47.510 --> 00:02:50.120
I'm leaving the data field blank for now because we're making

00:02:50.120 --> 00:02:53.075
a transaction between externally owned accounts.

00:02:53.075 --> 00:02:55.430
This field would be important if you're making

00:02:55.430 --> 00:02:58.910
a transaction to a contract account, which you could do later.

00:02:58.910 --> 00:03:02.840
The gas price and limit are the cost of sending the transaction.

00:03:02.840 --> 00:03:05.480
I chose these values, but you'll learn more about gas

00:03:05.480 --> 00:03:08.395
and managing the costs of transactions later in the program.

00:03:08.395 --> 00:03:10.425
The nonce is the transaction number,

00:03:10.425 --> 00:03:11.720
so I'll start with zero,

00:03:11.720 --> 00:03:14.165
and I'll send 100 way.

00:03:14.165 --> 00:03:16.940
Now, we're all set up with our transaction.

00:03:16.940 --> 00:03:19.765
You can view the transaction in the terminal, if you'd like.

00:03:19.765 --> 00:03:23.090
Try checking the balance again of the sending and receiving address.

00:03:23.090 --> 00:03:25.295
What you'll notice is that nothing changed.

00:03:25.295 --> 00:03:27.290
That's because we've built the transaction,

00:03:27.290 --> 00:03:30.350
but we never signed it or sent it to the network.

00:03:30.350 --> 00:03:32.660
So, let's start doing that now.

00:03:32.660 --> 00:03:37.100
The goal here is to sign the transaction using the private key of the sender.

00:03:37.100 --> 00:03:39.530
Remember, in transactions, they always need

00:03:39.530 --> 00:03:41.390
to be signed by the private key of the sender.

00:03:41.390 --> 00:03:42.890
So, we're just doing that here.

00:03:42.890 --> 00:03:45.595
To do that, we'll need to get the sender's private key.

00:03:45.595 --> 00:03:47.635
In the Ganache Graphic User Interface,

00:03:47.635 --> 00:03:51.425
you can do that by clicking the key over here on the right, then copying the key.

00:03:51.425 --> 00:03:54.920
Make sure you choose the private key for the address you set as the sender.

00:03:54.920 --> 00:03:56.810
If you're in the command line interface,

00:03:56.810 --> 00:03:59.755
you'll just see the private keys listed below the account addresses.

00:03:59.755 --> 00:04:02.600
Now, we need to do some maintenance with our data.

00:04:02.600 --> 00:04:04.320
To sign a transaction,

00:04:04.320 --> 00:04:06.580
you'll need to use a hex value of the private key.

00:04:06.580 --> 00:04:08.425
So, we'll need to make that conversion.

00:04:08.425 --> 00:04:11.195
You can do that using a buffer, it's shown here.

00:04:11.195 --> 00:04:14.530
Next, you create a transaction variable and set it to

00:04:14.530 --> 00:04:19.880
a new Ethereum transaction that passes in the raw transaction you created above.

00:04:21.800 --> 00:04:25.065
Finally, you get to sign the transaction.

00:04:25.065 --> 00:04:28.900
To do that, run sign on the transaction variable you created,

00:04:28.900 --> 00:04:32.185
and pass in the hex value of the sender you created here.

00:04:32.185 --> 00:04:34.675
That's everything we need to sign a transaction.

00:04:34.675 --> 00:04:38.350
Take some time to work through this for yourself a couple of times to get used to it.

00:04:38.350 --> 00:04:40.345
It's definitely a little tough at first.

00:04:40.345 --> 00:04:42.520
Keep in mind that all we tried to do here was

00:04:42.520 --> 00:04:45.205
sign the transaction with the private key of the sender.

00:04:45.205 --> 00:04:48.560
To wrap this all up, let's send the transaction to the network.

00:04:48.560 --> 00:04:51.230
Like always, you can't just send the data the way it is,

00:04:51.230 --> 00:04:53.795
you have to change it so that things can be complicated.

00:04:53.795 --> 00:04:56.405
In this case, we'll need to serialize it first.

00:04:56.405 --> 00:04:59.795
You can do that by running transaction.serialize and

00:04:59.795 --> 00:05:03.280
setting that equal to a variable named serialized transaction.

00:05:03.280 --> 00:05:05.850
For the last line, we'll finally bring Web3 back into

00:05:05.850 --> 00:05:08.850
this and send the signed transaction to the network.

00:05:08.850 --> 00:05:12.740
Remember, Web3 hasn't been involved with a lot of this so far,

00:05:12.740 --> 00:05:16.100
it only gets involved when you're sending a transaction to the network,

00:05:16.100 --> 00:05:17.965
which is what we're doing now.

00:05:17.965 --> 00:05:21.600
To do that, use the send signed transaction method from the

00:05:21.600 --> 00:05:25.500
web3.eth module and pass in the serialized transaction,

00:05:25.500 --> 00:05:27.265
and that's it, you're all done.

00:05:27.265 --> 00:05:30.175
We can run this code to make the transaction go through.

00:05:30.175 --> 00:05:33.435
In your terminal, type node index.js.

00:05:33.435 --> 00:05:37.700
Once you do that, you can go back to Ganache and check out the transaction you just made.

00:05:37.700 --> 00:05:40.085
For one, you can see it in the logs.

00:05:40.085 --> 00:05:41.660
I can see mine right here.

00:05:41.660 --> 00:05:43.960
You can also see it in the transactions.

00:05:43.960 --> 00:05:46.099
Here, it shows who was in the transaction,

00:05:46.099 --> 00:05:47.315
how much gas was used,

00:05:47.315 --> 00:05:49.280
and the value of the gas that was sent.

00:05:49.280 --> 00:05:52.010
Also, note that the block number has incremented.

00:05:52.010 --> 00:05:53.675
You can see that over here.

00:05:53.675 --> 00:05:56.210
That'll go up for each transaction you make.

00:05:56.210 --> 00:05:59.730
You can see all these blocks over on the blocks tab.

00:05:59.890 --> 00:06:02.345
Finally, on the accounts page,

00:06:02.345 --> 00:06:04.265
you'll see that the transaction went through.

00:06:04.265 --> 00:06:07.565
One thing you might find odd is that the balance hasn't changed.

00:06:07.565 --> 00:06:09.120
That's because we sent wei,

00:06:09.120 --> 00:06:11.450
which is a much smaller denomination of ether.

00:06:11.450 --> 00:06:15.470
So small that the two decimal places provided here don't even register it.

00:06:15.470 --> 00:06:17.990
I did that just to keep the numbers small at first,

00:06:17.990 --> 00:06:22.180
but try sending a much larger amount for yourself to see the balance change.

00:06:22.180 --> 00:06:24.715
Or using Web3 from your terminal,

00:06:24.715 --> 00:06:27.380
you can search the balance of the account to see it in wei.

00:06:27.380 --> 00:06:30.140
So, before going and making transactions for yourself,

00:06:30.140 --> 00:06:31.790
I did want to mention one more thing.

00:06:31.790 --> 00:06:34.250
If you go back and try to run another transaction,

00:06:34.250 --> 00:06:37.685
you'll get an error that says the transaction doesn't have the right nonce.

00:06:37.685 --> 00:06:39.770
That's because the nonce should continue to

00:06:39.770 --> 00:06:42.425
increment with each new transaction that's sent.

00:06:42.425 --> 00:06:44.210
We started with the nonce of zero,

00:06:44.210 --> 00:06:47.405
but we need that to go up for every time we send a transaction.

00:06:47.405 --> 00:06:49.790
So, for now, just go ahead and change

00:06:49.790 --> 00:06:52.010
that nonce every time you want to make a transaction.

00:06:52.010 --> 00:06:54.620
That's enough to get started and I'll show you how to fix it

00:06:54.620 --> 00:06:57.315
without doing it manually soon. All right.

00:06:57.315 --> 00:06:59.680
So, that's everything. This was a long video,

00:06:59.680 --> 00:07:02.510
but hopefully you learned a ton about creating transactions.

00:07:02.510 --> 00:07:05.795
Throughout the video, you created a transaction, signed it,

00:07:05.795 --> 00:07:07.010
send it to the network,

00:07:07.010 --> 00:07:09.650
and looked at the result of the transactions in Ganache.

00:07:09.650 --> 00:07:12.350
You can use this same idea to continue sending transactions on

00:07:12.350 --> 00:07:16.280
your local blockchain or by changing the connection to something like Infuria,

00:07:16.280 --> 00:07:18.980
you can make connections to the main or test networks as well

00:07:18.980 --> 00:07:21.965
as between externally owned accounts or contract accounts.

00:07:21.965 --> 00:07:24.005
Hopefully, this was enough to get you started.

00:07:24.005 --> 00:07:26.470
Good luck on making your own transactions.

