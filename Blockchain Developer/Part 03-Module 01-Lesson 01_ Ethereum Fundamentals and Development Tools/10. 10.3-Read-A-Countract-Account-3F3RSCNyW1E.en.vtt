WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.569
Now that you're getting used to reading information from externally owned accounts,

00:00:03.569 --> 00:00:06.240
let's try reading from contract accounts instead.

00:00:06.240 --> 00:00:07.845
We haven't worked much with them yet.

00:00:07.844 --> 00:00:11.294
There's a pretty cool things you can do with these accounts that I'd like to show you.

00:00:11.294 --> 00:00:14.099
First, we'll get some details about the contract,

00:00:14.099 --> 00:00:15.449
read into our terminal,

00:00:15.449 --> 00:00:17.849
check out the functions that exist on the contract,

00:00:17.850 --> 00:00:20.880
then even call those functions on the contract ourselves.

00:00:20.879 --> 00:00:25.364
To start, go to Etherscan and navigate to the ERC Top 20 Tokens.

00:00:25.364 --> 00:00:27.884
From there, pick any token you'd like.

00:00:27.885 --> 00:00:33.030
I'll pick the Basic Attention Token or BAT because I think it's pretty interesting.

00:00:33.030 --> 00:00:35.520
It's the token made by the Brave browser,

00:00:35.520 --> 00:00:37.935
a blockchain-based browser that provide secure,

00:00:37.935 --> 00:00:39.830
fast, and private web browsing.

00:00:39.829 --> 00:00:42.363
The browser was built by the creator of JavaScript

00:00:42.363 --> 00:00:45.049
and the co-founder of Mozilla and Firefox.

00:00:45.049 --> 00:00:47.434
That's already enough to get me interested.

00:00:47.435 --> 00:00:49.370
Read about this more if you'd like.

00:00:49.369 --> 00:00:51.574
Either way, let's get back to the contract.

00:00:51.575 --> 00:00:53.905
So, click on the token you want.

00:00:53.905 --> 00:00:57.395
From there, select the contract address shown over here.

00:00:57.395 --> 00:01:01.100
Next, navigate to the contract code in the Code tab.

00:01:01.100 --> 00:01:03.230
This hopefully looks familiar from earlier,

00:01:03.229 --> 00:01:05.090
but this time we're not just looking around,

00:01:05.090 --> 00:01:06.924
we're here to get the ABI.

00:01:06.924 --> 00:01:10.564
The ABI is the application binary interface.

00:01:10.564 --> 00:01:14.959
This is the representation of this contract that can be read using JavaScript.

00:01:14.959 --> 00:01:17.879
Copy this using the button here.

00:01:18.469 --> 00:01:20.775
Now that you have the ABI,

00:01:20.775 --> 00:01:26.010
go back to your terminal and set this ABI equal to the variable named ABI.

00:01:27.819 --> 00:01:33.819
You can call this variable back if you want to see a nicely formatted version of the ABI.

00:01:33.819 --> 00:01:37.354
Now that we have that, we need to go grab the contract address.

00:01:37.355 --> 00:01:39.755
You can get that back on Etherscan up here.

00:01:39.754 --> 00:01:42.619
Set that equal to a variable named contract address.

00:01:42.620 --> 00:01:47.020
Now, you have both the variables you need to start interacting with the contract.

00:01:47.019 --> 00:01:52.384
In the documentation, you'll find a function named contract in the web3.eth module.

00:01:52.385 --> 00:01:57.570
We can use this to read the contents of the contract. I'll try that now.

00:01:59.120 --> 00:02:04.385
Pass in the variables you just created as shown in the documentation.

00:02:04.385 --> 00:02:08.780
This gives us all the details of the contract including the formatters,

00:02:08.780 --> 00:02:11.495
utilities, methods, events, and more.

00:02:11.495 --> 00:02:12.960
We can call any of these,

00:02:12.960 --> 00:02:15.455
but right now I'm interested in checking out the methods.

00:02:15.455 --> 00:02:18.665
We can do that by typing contract.methods.

00:02:18.664 --> 00:02:21.530
What we get back is a list of all the methods

00:02:21.530 --> 00:02:24.034
we can call that had been written into this contract.

00:02:24.034 --> 00:02:26.780
You can check back to the smart contract code if you'd like to

00:02:26.780 --> 00:02:29.569
compare the functions you got with the functions on the contract.

00:02:29.569 --> 00:02:30.889
If you've gotten this far,

00:02:30.889 --> 00:02:32.359
the hard work is over.

00:02:32.360 --> 00:02:36.290
You're now connected to the contract and can start running the contract functions.

00:02:36.289 --> 00:02:38.614
Before wrapping up, I'll show you an example.

00:02:38.615 --> 00:02:41.420
Keep in mind that now that we're talking to this contract,

00:02:41.419 --> 00:02:44.509
what I'll show you isn't functions that are in Web3 anymore.

00:02:44.509 --> 00:02:47.384
We're still using Web3 to interact with the contract,

00:02:47.384 --> 00:02:51.139
but the last function name that we call is from this contract itself.

00:02:51.139 --> 00:02:53.989
So, for example, if you want to see the name of the token,

00:02:53.990 --> 00:02:56.810
you'll see that there's a name function that we can call that exists

00:02:56.810 --> 00:03:00.719
on this token smart contract. Let's try that now.

00:03:01.430 --> 00:03:06.300
To do that, I'll type contract.methods.name followed

00:03:06.300 --> 00:03:11.635
by.call..call is what's going to call the function.name from the contract.

00:03:11.634 --> 00:03:14.280
From there, this is an asynchronous call,

00:03:14.280 --> 00:03:18.870
so we'll need to use a callback function again to actually read the value back.

00:03:19.569 --> 00:03:22.430
Once that finishes, what we can do is

00:03:22.430 --> 00:03:25.835
console.log the result to see the name of the token.

00:03:25.835 --> 00:03:28.504
What I get back is the name of the token,

00:03:28.504 --> 00:03:30.169
the Basic Attention Token.

00:03:30.169 --> 00:03:33.424
Really cool. You can try calling any of these methods now.

00:03:33.425 --> 00:03:35.240
I left a few examples you might want to try

00:03:35.240 --> 00:03:37.610
out down below the video in the text description.

00:03:37.610 --> 00:03:40.400
Try some of these, then see if there's any functions you can find

00:03:40.400 --> 00:03:43.469
on this or other tokens that return interesting data for you.

