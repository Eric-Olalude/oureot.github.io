WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.060
Now that you have some background on what a DApp is,

00:00:03.060 --> 00:00:04.575
it's time to build your own.

00:00:04.575 --> 00:00:05.849
By the end of this video,

00:00:05.849 --> 00:00:08.609
you'll have created and deployed your first DApp.

00:00:08.609 --> 00:00:11.429
More specifically, we'll be deploying a smart contract,

00:00:11.429 --> 00:00:14.939
but we'll be able to interact with it similar to a normal DApp.

00:00:14.939 --> 00:00:18.794
To start, head over to Remix using the link below the video.

00:00:18.795 --> 00:00:23.640
Remix is an IDE for creating smart contracts on the Ethereum block chain.

00:00:23.640 --> 00:00:26.024
It has features that allow you to write,

00:00:26.024 --> 00:00:28.379
deploy, and interact with smart contracts.

00:00:28.379 --> 00:00:31.394
So, let's get started with the contract for ourselves.

00:00:31.394 --> 00:00:33.435
Once on Remix on the left,

00:00:33.435 --> 00:00:37.170
you'll see a file manager that includes the contract you're currently looking at.

00:00:37.170 --> 00:00:39.030
Will be making our own contract,

00:00:39.030 --> 00:00:42.910
so you can either delete the existing one or create a new file.

00:00:43.130 --> 00:00:47.160
So, create the file and name it myMessage.sol,

00:00:47.159 --> 00:00:50.919
Sol is the extension used for any solidity file you create.

00:00:50.920 --> 00:00:54.594
Next, copy the code from below the video and paste it into your editor,

00:00:54.594 --> 00:00:57.115
or just type out what you see here.

00:00:57.115 --> 00:01:01.000
Will go over many of the details of this language in a later lesson,

00:01:01.000 --> 00:01:03.085
but for now here's a quick overview.

00:01:03.085 --> 00:01:05.394
This contract has two functions,

00:01:05.394 --> 00:01:07.310
one that allows you to set a message,

00:01:07.310 --> 00:01:10.510
and another that allows you to get the message back that you'd set.

00:01:10.510 --> 00:01:12.950
The contract name is designated here,

00:01:12.950 --> 00:01:15.685
and looks similar to a class from other languages.

00:01:15.685 --> 00:01:17.829
Each variable needs to be given a type,

00:01:17.829 --> 00:01:19.674
in this case it's a string.

00:01:19.674 --> 00:01:22.539
There's a few identifiers you can set on functions as

00:01:22.540 --> 00:01:25.650
shown here like public, view, and returns.

00:01:25.650 --> 00:01:28.760
These are telling us that the function is publicly available,

00:01:28.760 --> 00:01:30.665
is only met to view information,

00:01:30.665 --> 00:01:32.395
and that it returns a string.

00:01:32.394 --> 00:01:34.894
Finally, take a look at the top line here.

00:01:34.894 --> 00:01:36.530
Pragma is set at the top of

00:01:36.530 --> 00:01:39.905
every solidity contract to tell the compiler which version to use.

00:01:39.905 --> 00:01:43.075
In this case, it's 0.4.24.

00:01:43.075 --> 00:01:45.620
The carat before the version is saying to look for

00:01:45.620 --> 00:01:48.725
the most recent version of solidity starting from that version.

00:01:48.724 --> 00:01:50.250
If you remove the carat,

00:01:50.250 --> 00:01:53.614
you're stating that this should only be run using that exact version.

00:01:53.614 --> 00:01:55.250
For our contract, that's it.

00:01:55.250 --> 00:01:59.015
We have a working smart contract that allows us to set a message and get it back.

00:01:59.015 --> 00:02:02.340
Don't worry if the details of the language sounded a little strange for now,

00:02:02.340 --> 00:02:05.855
you'll learn a ton more about this language in our introduction to solidity.

00:02:05.855 --> 00:02:09.115
Right now, what's important is that we deploy this contract.

00:02:09.115 --> 00:02:12.725
To do this, go over to the right and click Start to compile.

00:02:12.724 --> 00:02:14.794
This compiles your contract.

00:02:14.794 --> 00:02:16.924
Next, go over to the Run tab.

00:02:16.925 --> 00:02:18.530
Here, you'll see a lot of details,

00:02:18.530 --> 00:02:21.110
but to start at the top is the environment.

00:02:21.110 --> 00:02:24.395
From the environment drop-down select JavaScript VM.

00:02:24.395 --> 00:02:26.390
This will let you deploy your contract from

00:02:26.389 --> 00:02:29.359
a JavaScript virtual machine that Remix provides you.

00:02:29.360 --> 00:02:33.725
Next, select message from the dropdown here and you're ready to deploy.

00:02:33.724 --> 00:02:35.805
To do that, click Deploy,

00:02:35.805 --> 00:02:38.974
and now you just deployed your first smart contract.

00:02:38.974 --> 00:02:42.025
Under deployed contract, you'll see the contract.

00:02:42.025 --> 00:02:45.909
You can open up the drop-down provide it to see the functions that are available.

00:02:45.909 --> 00:02:49.405
Sila, get message and set message right here.

00:02:49.405 --> 00:02:53.305
To set a message, type anything you'd like in quotes to make it a string.

00:02:53.305 --> 00:02:55.110
I'll type, "hey ethereum",

00:02:55.110 --> 00:02:56.980
and click Set message.

00:02:56.979 --> 00:03:00.354
This message has now been stored on the JavaScript VM.

00:03:00.354 --> 00:03:04.344
You can read the message you store it by calling the other function, Get message.

00:03:04.344 --> 00:03:07.375
Click Get Message and you'll see the current message.

00:03:07.375 --> 00:03:08.860
By updating this message,

00:03:08.860 --> 00:03:11.695
you can store new values and call those too if you'd like.

00:03:11.694 --> 00:03:14.459
One thing you may have noticed is the terminal down here

00:03:14.460 --> 00:03:17.290
that's registering information each time you call a function.

00:03:17.289 --> 00:03:20.090
Here's what's happening. Nothing gets in or out of

00:03:20.090 --> 00:03:23.015
the Ethereum blockchain without being logged as a transaction.

00:03:23.014 --> 00:03:25.219
Every time you call a function that's creating

00:03:25.219 --> 00:03:28.789
a transaction that's either getting or setting the data you request.

00:03:28.789 --> 00:03:30.590
By opening up the transaction,

00:03:30.590 --> 00:03:32.270
you can see the transaction hash,

00:03:32.270 --> 00:03:34.034
who it was from, who it's to,

00:03:34.034 --> 00:03:37.280
the cost, and other details that you'll learn more about later.

00:03:37.280 --> 00:03:41.224
At the top is the transaction address that initiated the transaction.

00:03:41.224 --> 00:03:43.519
That value is coming from over here.

00:03:43.520 --> 00:03:45.050
You can set a new address,

00:03:45.050 --> 00:03:46.395
call the function again,

00:03:46.395 --> 00:03:50.480
and see that you now have a transaction that came from that address instead.

00:03:50.479 --> 00:03:55.014
So, congratulations on creating your first official DApp, sort of.

00:03:55.014 --> 00:03:58.158
The smart contract is at the core of what makes DApp,

00:03:58.158 --> 00:04:01.669
but the surrounding tools that take this functionality out of Remix and Interior

00:04:01.669 --> 00:04:06.334
users hands is an enormous part of what gives the smart contract any actual value.

00:04:06.335 --> 00:04:07.730
To do this effectively,

00:04:07.729 --> 00:04:10.039
you'll need to learn how to work with data on a blockchain,

00:04:10.039 --> 00:04:13.039
bringing this data to your local environment, and set up a front end.

00:04:13.039 --> 00:04:16.639
You'll also need to know how to deploy to the main network with your final DApp,

00:04:16.639 --> 00:04:18.514
connect to the test network for testing,

00:04:18.514 --> 00:04:22.189
and even how to connect to local blockchains when you're first getting started.

00:04:22.189 --> 00:04:25.430
For that reason, we're going to spend the next lessons getting very

00:04:25.430 --> 00:04:28.400
comfortable with the tooling and ecosystem surrounding the creation,

00:04:28.399 --> 00:04:30.709
testing, and deployment of applications.

00:04:30.709 --> 00:04:34.789
That way, when you learn more about solidity and smart contracts in the later lessons,

00:04:34.790 --> 00:04:36.500
you'll be more than ready to turn those into

00:04:36.500 --> 00:04:38.870
fully functional DApps that you can share with others.

