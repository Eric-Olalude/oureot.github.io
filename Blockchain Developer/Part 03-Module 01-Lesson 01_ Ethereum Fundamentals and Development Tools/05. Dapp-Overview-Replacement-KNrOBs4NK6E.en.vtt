WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.270
When getting started, it can be difficult to know where everything fits into

00:00:03.270 --> 00:00:06.750
the bigger picture of creating fully decentralized applications.

00:00:06.750 --> 00:00:09.164
To help get started, I'll walk you through an overview

00:00:09.164 --> 00:00:11.684
of what a decentralized application could look like.

00:00:11.685 --> 00:00:13.380
There's a lot of different ways to do this

00:00:13.380 --> 00:00:15.705
depending on which tools you end up preferring.

00:00:15.705 --> 00:00:19.140
What I'll show you here is just one way that you can do it that hopefully you're more

00:00:19.140 --> 00:00:22.394
comfortable with by the end of the lesson. So, here it goes.

00:00:22.394 --> 00:00:25.905
I've set up this graphic so that down the middle are different layers of the stack,

00:00:25.905 --> 00:00:29.775
and along the sides are different tools you can use to help connect these layers.

00:00:29.774 --> 00:00:32.189
Starting at the top is stuff you know already.

00:00:32.189 --> 00:00:34.229
First, you'll need to build a website.

00:00:34.229 --> 00:00:38.534
That website can be built using JavaScript, HTML, and CSS.

00:00:38.534 --> 00:00:40.934
We'll be running all that using Node js.

00:00:40.935 --> 00:00:42.344
With this front-end section,

00:00:42.344 --> 00:00:43.769
you can really do whatever you like.

00:00:43.770 --> 00:00:46.484
Front-end frameworks like React, Angular, Vue,

00:00:46.484 --> 00:00:50.784
or sticking with Vanilla JavaScript is a totally fine way to build out your front-end.

00:00:50.784 --> 00:00:53.629
The two pieces we're building in to make it adapt

00:00:53.630 --> 00:00:56.255
is the Smart Contract and the Ethereum blockchain.

00:00:56.255 --> 00:00:59.270
In this case, the blockchain is what stores the different states

00:00:59.270 --> 00:01:02.510
that occur from the interactions users take with your applications.

00:01:02.509 --> 00:01:05.539
The Smart Contract is the piece of code you write that determines

00:01:05.540 --> 00:01:09.135
the logic or interactions that the users are allowed to take.

00:01:09.135 --> 00:01:11.355
While writing your Smart Contract,

00:01:11.355 --> 00:01:15.170
it's only a piece of code that the Ethereum blockchain has no idea exists.

00:01:15.170 --> 00:01:17.239
That's why I have it here separated.

00:01:17.239 --> 00:01:20.959
What's important to understand though is that to deploy your Smart Contract,

00:01:20.959 --> 00:01:22.459
you're putting this code directly on

00:01:22.459 --> 00:01:25.654
the blockchain and then it is part of the Ethereum environment.

00:01:25.655 --> 00:01:29.409
Similar to how you can store information about transactions in a block,

00:01:29.409 --> 00:01:33.229
you can also push pieces of code directly on the Ethereum blockchain.

00:01:33.230 --> 00:01:35.645
Once that code is put on the blockchain,

00:01:35.644 --> 00:01:38.089
it gets assigned a hash value and becomes a part

00:01:38.090 --> 00:01:41.155
of the immutable set of records that make up the blockchain.

00:01:41.155 --> 00:01:42.859
That's an important thing to note,

00:01:42.859 --> 00:01:44.329
because it's a huge difference between

00:01:44.329 --> 00:01:47.269
standard app development and decentralized app development.

00:01:47.269 --> 00:01:49.909
In DApp development, once you push your code live,

00:01:49.909 --> 00:01:51.379
it can't be changed.

00:01:51.379 --> 00:01:54.530
You can't have the opportunity to fix bugs that come up or

00:01:54.530 --> 00:01:57.935
change things based on how other people decide to use your code,

00:01:57.935 --> 00:02:00.424
and a lot of people can use your code.

00:02:00.424 --> 00:02:02.814
Actually, anyone who wants to can.

00:02:02.814 --> 00:02:06.409
This code is part of the shared ledger that everyone can access,

00:02:06.409 --> 00:02:08.930
so everyone can use it however they like.

00:02:08.930 --> 00:02:11.599
So, say you wrote a Smart Contract to collect the pool of

00:02:11.599 --> 00:02:14.389
money and give it out to one of your users as a prize.

00:02:14.389 --> 00:02:16.219
Well, if you wrote it wrong,

00:02:16.219 --> 00:02:20.060
someone else may come in and collect the money and give it to themselves instead,

00:02:20.060 --> 00:02:21.920
that can happen and it has happened.

00:02:21.919 --> 00:02:23.194
So, you have to be careful.

00:02:23.194 --> 00:02:25.519
These are all major security concerns that you'll need

00:02:25.520 --> 00:02:27.950
to keep in mind that we'll go over throughout the program.

00:02:27.949 --> 00:02:31.444
Okay. So, that was a big side note but it's really important to understand.

00:02:31.444 --> 00:02:32.900
Let's get back to the graphic.

00:02:32.900 --> 00:02:35.469
One thing you'll notice is that the Smart Contract doesn't actually

00:02:35.469 --> 00:02:38.569
touch Node js or the Ethereum blockchain in this graphic.

00:02:38.569 --> 00:02:42.379
That's because Node js can't actually run the smart contract code.

00:02:42.379 --> 00:02:45.215
It needs to be compiled and deployed using other tools.

00:02:45.215 --> 00:02:47.884
In our case, you just used remixed to do this.

00:02:47.884 --> 00:02:49.875
The smart contract sits and remix,

00:02:49.875 --> 00:02:51.539
gets compiled by their interpreter,

00:02:51.539 --> 00:02:54.014
and then can be deployed to the blockchain from there.

00:02:54.014 --> 00:02:57.799
So, deploying the contract isn't directly tied to Node js,

00:02:57.800 --> 00:02:59.540
but you can still bring your contracts into

00:02:59.539 --> 00:03:01.715
your local environment and work with them from there.

00:03:01.715 --> 00:03:05.450
This is how you can bridge the gap between the front and back-ends of your application,

00:03:05.449 --> 00:03:07.884
and I'll show you more on how to do that later.

00:03:07.884 --> 00:03:09.814
All right, we're almost there.

00:03:09.814 --> 00:03:11.840
Let's go over the right side of this graphic.

00:03:11.840 --> 00:03:13.460
Starting with Web3.

00:03:13.460 --> 00:03:16.955
Web3 is the API you'll need to interact with the blockchain.

00:03:16.955 --> 00:03:21.200
Everything that goes onto the Ethereum blockchain is done using a transaction.

00:03:21.199 --> 00:03:24.754
These transactions are written in red using the Web3 library.

00:03:24.754 --> 00:03:28.144
Think of it as your window to access the Ethereum network.

00:03:28.145 --> 00:03:32.150
Using Web3, you have the ability to search the Ethereum blockchain,

00:03:32.150 --> 00:03:34.594
but you don't actually have a connection to it yet.

00:03:34.594 --> 00:03:37.849
You'll need to provide a connection using an endpoint URL.

00:03:37.849 --> 00:03:39.514
There's a few ways to do this,

00:03:39.514 --> 00:03:41.224
but in our case, we'll use Infura,

00:03:41.224 --> 00:03:43.849
because it's a quick and powerful way to make this connection.

00:03:43.849 --> 00:03:45.430
Finally, Metamask.

00:03:45.430 --> 00:03:48.980
Metamask is the tool that you use to interact with any existing DApp.

00:03:48.979 --> 00:03:52.189
It gives applications access to the funds you store on your wallet,

00:03:52.189 --> 00:03:55.310
so that you can effectively make transactions on the network.

00:03:55.310 --> 00:03:58.884
You'll see here that it's connected to both Web3 and Infura.

00:03:58.884 --> 00:04:00.704
First, it's connected to Web3,

00:04:00.705 --> 00:04:03.475
because to make this connection to the blockchain for its users,

00:04:03.474 --> 00:04:06.259
it needs to read and write data to the Ethereum blockchain.

00:04:06.259 --> 00:04:09.500
Remember, I mentioned Web3 is how you read and write data.

00:04:09.500 --> 00:04:13.629
So, Metamask uses this to provide this functionality to its users.

00:04:13.629 --> 00:04:16.839
Finally, Metamask also runs on Infura.

00:04:16.839 --> 00:04:18.514
The tool we'll be using ourselves.

00:04:18.514 --> 00:04:23.344
It uses this to bridge that final connection between Web3 and the Ethereum blockchain.

00:04:23.345 --> 00:04:27.545
From there, the data can climb all the way back up the chain through and Infura,

00:04:27.545 --> 00:04:29.254
Web3, and Metamask, again,

00:04:29.254 --> 00:04:32.800
all the way to the website so you can display this to your users.

00:04:32.800 --> 00:04:36.785
Okay. So, there's a full look at what the full stacked app could look like.

00:04:36.785 --> 00:04:38.180
There's a lot of ways to do this,

00:04:38.180 --> 00:04:39.814
and you'll learn more throughout the lesson.

00:04:39.814 --> 00:04:42.050
Don't worry if this still feels a little foggy right now.

00:04:42.050 --> 00:04:43.670
We'll be going into each of these tools in

00:04:43.670 --> 00:04:47.330
a lot more detail as they become more relevant to the DApp you'll be creating.

