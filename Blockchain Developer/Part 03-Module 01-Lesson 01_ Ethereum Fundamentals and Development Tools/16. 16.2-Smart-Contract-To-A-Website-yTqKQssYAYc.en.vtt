WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.065
You've connected Remix to your blockchain and could connect it to Web3, too.

00:00:04.065 --> 00:00:06.480
Now, we can take this one step further.

00:00:06.480 --> 00:00:09.450
What would you do if you wanted to deploy this contract from

00:00:09.450 --> 00:00:12.825
Remix and have information about it rendered to a website?

00:00:12.825 --> 00:00:16.785
How do you bring the details of this contract into your development environment?

00:00:16.785 --> 00:00:19.140
That's exactly what we'll go over here.

00:00:19.140 --> 00:00:20.480
By the end of this video,

00:00:20.480 --> 00:00:22.230
you'll have a simple website that's reading

00:00:22.230 --> 00:00:25.695
the contents of the smart contracts to the DOM of your browser.

00:00:25.695 --> 00:00:28.920
That way, you'll know how to pass information into a website

00:00:28.920 --> 00:00:32.615
and can start building web applications that interact with the blockchain.

00:00:32.615 --> 00:00:35.015
So, here's what I have so far.

00:00:35.015 --> 00:00:37.070
I've got Ganache, Remix,

00:00:37.070 --> 00:00:39.085
my editor, and my website.

00:00:39.085 --> 00:00:41.630
It can get tough juggling between so many windows,

00:00:41.630 --> 00:00:43.415
but if you've developed a lot in the past,

00:00:43.415 --> 00:00:45.290
this probably isn't new to you.

00:00:45.290 --> 00:00:47.345
To show you how all this is setup,

00:00:47.345 --> 00:00:49.100
I'll head back to my project.

00:00:49.100 --> 00:00:51.875
I set up my project by initializing npm,

00:00:51.875 --> 00:00:53.615
adding Web3 as a dependency,

00:00:53.615 --> 00:00:56.360
and creating an index.html file.

00:00:56.360 --> 00:01:00.590
I'm using this HTML file now to show you how you can get this onto the website.

00:01:00.590 --> 00:01:02.270
Later on, you might prefer to have

00:01:02.270 --> 00:01:04.870
the JavaScript file be separate and just link to it from here,

00:01:04.870 --> 00:01:08.195
but for now we'll put everything directly within the script tags.

00:01:08.195 --> 00:01:09.920
If you'd like to follow along,

00:01:09.920 --> 00:01:12.620
take a minute to set up your project the way I have it here.

00:01:12.620 --> 00:01:16.580
You can grab the code I have here in the HTML file down below the video.

00:01:16.580 --> 00:01:19.600
Now, let's walk through the code to see what's going on.

00:01:19.600 --> 00:01:24.065
In this file, we're trying to do a couple of important things I outlined in the comments.

00:01:24.065 --> 00:01:26.705
First, we'll be connecting to a Web3 Provider,

00:01:26.705 --> 00:01:28.655
and then I'll set a default account.

00:01:28.655 --> 00:01:32.365
Next, we identify the contract by its address and ABI.

00:01:32.365 --> 00:01:37.265
Finally, we'll log the contract ABI to the console to test that we're connected.

00:01:37.265 --> 00:01:40.100
Before getting started, I wanted to mention that you

00:01:40.100 --> 00:01:42.845
actually have done something like this earlier in the lesson.

00:01:42.845 --> 00:01:45.260
Remember earlier, when you're trying to run the methods

00:01:45.260 --> 00:01:47.960
on an existing token contract from Etherscan,

00:01:47.960 --> 00:01:51.335
there, you needed the ABI and the contract address, too.

00:01:51.335 --> 00:01:53.960
Once you had them, you pass them into Web3,

00:01:53.960 --> 00:01:56.825
and you use that to read the functions from the contract.

00:01:56.825 --> 00:01:59.555
We're doing pretty much the exact same thing here,

00:01:59.555 --> 00:02:02.660
except we're in VS code instead of our terminal and in

00:02:02.660 --> 00:02:07.255
Remix with our own contract rather than being in Etherscan with someone else's.

00:02:07.255 --> 00:02:10.590
Actually, if you wanted to do exactly what we're doing now with

00:02:10.590 --> 00:02:13.850
one of the Etherscan contracts instead, then you could do that, too.

00:02:13.850 --> 00:02:16.820
To dig into the code, let's start with the Web3 Provider.

00:02:16.820 --> 00:02:19.520
This line comes directly from the documentation.

00:02:19.520 --> 00:02:21.820
What this is doing is two things.

00:02:21.820 --> 00:02:24.690
First, if there isn't a provider specified,

00:02:24.690 --> 00:02:27.250
it'll default to an existing Web3 Provider.

00:02:27.250 --> 00:02:29.900
It'll check to see if there's an injected version of

00:02:29.900 --> 00:02:32.720
Web3 provided by the user of the application.

00:02:32.720 --> 00:02:36.245
In this case, that's basically asking if the user has MetaMask.

00:02:36.245 --> 00:02:40.090
Remember, MetaMask works as an injected Web3 Provider.

00:02:40.090 --> 00:02:42.140
If there is a provider specified,

00:02:42.140 --> 00:02:43.805
then it's going to connect to that.

00:02:43.805 --> 00:02:45.950
This is similar to what we've done already,

00:02:45.950 --> 00:02:48.680
but it's using an HTTP provider instead.

00:02:48.680 --> 00:02:52.125
One thing to note about this is if it can't find Ether provider,

00:02:52.125 --> 00:02:55.505
then the user trying to access the application won't be able to.

00:02:55.505 --> 00:02:58.190
That's why it's important for a user to have MetaMask if you

00:02:58.190 --> 00:03:01.460
expect them to be able to interact with the application you built.

00:03:01.460 --> 00:03:03.945
So that's what's connecting us to Ganache.

00:03:03.945 --> 00:03:06.660
One last thing to note about this is that you do need to bring

00:03:06.660 --> 00:03:10.115
Web3 into the HTML file for it to be able to find it at all.

00:03:10.115 --> 00:03:13.730
On the documentation, it gives you the CDN you'll need to do this.

00:03:13.730 --> 00:03:18.265
Paste this into a script tag in the header of your HTML, and you're good to go.

00:03:18.265 --> 00:03:22.205
Next, you need to set a default account to run the transactions from.

00:03:22.205 --> 00:03:23.975
That's what this line is doing.

00:03:23.975 --> 00:03:26.540
It's setting the first account as the default by

00:03:26.540 --> 00:03:30.080
selecting it from the array of accounts that Ganache provides.

00:03:30.080 --> 00:03:33.940
You've made the same call when checking out accounts for yourself.

00:03:33.940 --> 00:03:37.445
Next, we need to go get the contract ABI.

00:03:37.445 --> 00:03:39.695
To do this, we'll go back to Remix.

00:03:39.695 --> 00:03:41.945
Make sure you've deployed a contract first.

00:03:41.945 --> 00:03:45.680
From there, go back to the Compile tab and grab the ABI.

00:03:45.680 --> 00:03:47.650
They make it simple to grab right here,

00:03:47.650 --> 00:03:49.730
but I have to at least mention at some point

00:03:49.730 --> 00:03:52.490
that there's more details if you click on the Details button.

00:03:52.490 --> 00:03:54.755
You can also copy the ABI from here,

00:03:54.755 --> 00:03:56.675
it's just an extra click away.

00:03:56.675 --> 00:03:59.120
Great, so now you've got the ABI.

00:03:59.120 --> 00:04:00.950
You can paste that right here.

00:04:00.950 --> 00:04:02.780
It's going to take up a ton of space,

00:04:02.780 --> 00:04:05.465
but you can always go back to the top and collapse the group.

00:04:05.465 --> 00:04:09.395
Before doing that, just take a look to see if you find anything familiar.

00:04:09.395 --> 00:04:12.770
Here, I can see both to getMessage and setMessage functions.

00:04:12.770 --> 00:04:17.765
Looks good to me. Next, go back to Remix and get the contract address.

00:04:17.765 --> 00:04:20.000
You'll find that over on the deployed contract,

00:04:20.000 --> 00:04:21.875
and you can get that by clicking here.

00:04:21.875 --> 00:04:23.345
Paste that into the code,

00:04:23.345 --> 00:04:26.810
and you've got everything you need to push this contract to your website.

00:04:26.810 --> 00:04:31.320
Save this file and open the HTML file however you like.

00:04:31.320 --> 00:04:35.985
You'll see it says, "Deploy a Remix Contract," which is just the header I put in.

00:04:35.985 --> 00:04:37.605
But if you open the console,

00:04:37.605 --> 00:04:39.785
then you can see the details of the contract.

00:04:39.785 --> 00:04:42.865
We're seeing that because we logged the details to the console.

00:04:42.865 --> 00:04:45.740
Awesome, you now have access to run commands on

00:04:45.740 --> 00:04:49.085
this contract and push data to and from the DOM however you'd like.

00:04:49.085 --> 00:04:50.780
This is a huge step towards making

00:04:50.780 --> 00:04:53.770
applications that users can interact with using a front-end.

00:04:53.770 --> 00:04:55.825
If you'd like, just for practice,

00:04:55.825 --> 00:04:59.375
try actually doing this with a contract from Etherscan like I mentioned.

00:04:59.375 --> 00:05:01.760
You'll see that it's pretty simple once you get the hang of it,

00:05:01.760 --> 00:05:04.430
and you can pull in and work with contracts from anywhere.

00:05:04.430 --> 00:05:06.605
To demonstrate, I'll do that now.

00:05:06.605 --> 00:05:11.210
Right now, I'm on the code portion of the contracts that count page for the BAT token.

00:05:11.210 --> 00:05:14.480
I'll copy the ABI from here and take it to my editor.

00:05:14.480 --> 00:05:17.690
I'll need to take a second to delete the old ABI now.

00:05:17.690 --> 00:05:20.180
Once I do, I'll paste in the new one.

00:05:20.180 --> 00:05:22.880
Let's do the same with the contract address.

00:05:22.880 --> 00:05:26.855
Head back to Etherscan again to find and copy the contract address.

00:05:26.855 --> 00:05:29.450
Now, replace the old address with this one.

00:05:29.450 --> 00:05:32.080
Save the file and refresh your website.

00:05:32.080 --> 00:05:36.000
Great, now you have all the contact information for this contract,

00:05:36.000 --> 00:05:39.575
the same as you had the information for your own just a minute ago.

00:05:39.575 --> 00:05:41.375
Try a few more for yourself,

00:05:41.375 --> 00:05:44.870
see what you learn, and I hope you're excited to use these new features.

