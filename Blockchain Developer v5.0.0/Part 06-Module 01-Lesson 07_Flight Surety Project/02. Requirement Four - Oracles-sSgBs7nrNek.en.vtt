WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.495
Our next requirement is around Oracles.

00:00:03.495 --> 00:00:07.995
Oracles are implemented as a server application.

00:00:07.995 --> 00:00:14.039
The idea behind having a large number of Oracles as we discussed in the prior lesson,

00:00:14.039 --> 00:00:21.539
is to ensure that we don't have to put a large amount of trust in any single Oracle.

00:00:21.539 --> 00:00:25.724
Now, how do we work with that with a server application,

00:00:25.725 --> 00:00:29.025
which in this case, will be a Node.js application?

00:00:29.024 --> 00:00:33.104
Well, what we will do is wait for

00:00:33.104 --> 00:00:38.119
the event that is triggered saying an Oracle needs to fetch information.

00:00:38.119 --> 00:00:44.399
In your code, you will start up as many Oracles as are registered,

00:00:44.399 --> 00:00:48.259
or you can choose the number of Oracles you want to register.

00:00:48.259 --> 00:00:51.619
Once those Oracles are set up,

00:00:51.619 --> 00:00:53.479
whenever the request comes in,

00:00:53.479 --> 00:00:55.174
you would loop through them,

00:00:55.174 --> 00:01:00.444
and depending on the Oracles that are assigned the request,

00:01:00.445 --> 00:01:04.594
you can then decide what response they provide.

00:01:04.594 --> 00:01:10.144
The easiest way would be to take a few of the status codes that are

00:01:10.144 --> 00:01:16.484
available for reporting the status of a flight and randomize it across the Oracles.

00:01:16.484 --> 00:01:18.234
Now, this is in Node.js,

00:01:18.234 --> 00:01:25.444
so you have a slightly better access to tools for creating randomness there.

00:01:25.444 --> 00:01:31.819
But in general, what you'll want to do is create a cluster of Oracles that in

00:01:31.819 --> 00:01:39.469
the simulation resolve with the same status code and some that don't.

00:01:39.469 --> 00:01:43.489
This will exercise your smart contract code which is checking to see

00:01:43.489 --> 00:01:48.619
which Oracles are providing one type of information versus other,

00:01:48.620 --> 00:01:51.954
and relying on the majority to make a decision.

00:01:51.954 --> 00:01:57.009
Now, how will the Oracles actually know that they have to do it?

00:01:57.010 --> 00:01:58.370
That's obviously with an event.

00:01:58.370 --> 00:01:59.915
But where does that even come from?

00:01:59.915 --> 00:02:03.925
Well, it originates with a button in the UI.

00:02:03.924 --> 00:02:06.504
So in ordinary circumstances,

00:02:06.504 --> 00:02:11.525
it would originate by a third party API notifying you

00:02:11.525 --> 00:02:17.855
or your server app that the flight has landed or it has taken off as the case may be.

00:02:17.854 --> 00:02:20.084
But since we don't have that capability,

00:02:20.085 --> 00:02:24.325
we'll result to using a button in the client depth.

00:02:24.324 --> 00:02:26.169
When you click the button,

00:02:26.169 --> 00:02:27.559
it triggers an event.

00:02:27.560 --> 00:02:32.254
That event communicates with the smart contract

00:02:32.254 --> 00:02:38.269
and causes a request to be generated for the oracles to fetch data for a specific flight.

00:02:38.270 --> 00:02:44.439
So that's the entire life cycle there of the Oracle involvement.

00:02:44.719 --> 00:02:49.750
One thing you want to keep in mind is that the more Oracles you have,

00:02:49.750 --> 00:02:53.544
the easier and more interesting your simulation becomes.

00:02:53.544 --> 00:02:56.530
But obviously, it also takes more time to register

00:02:56.530 --> 00:03:00.069
them and have them process during testing.

00:03:00.069 --> 00:03:02.379
So my recommendation is that initially during testing,

00:03:02.379 --> 00:03:05.819
you have a low number like 10 or 15 or perhaps 20.

00:03:05.819 --> 00:03:08.599
But then when your app is mostly done,

00:03:08.599 --> 00:03:12.430
start looking at what it's like to have 100 or 500 Oracles,

00:03:12.430 --> 00:03:15.760
because the idea behind the project is to give you a sense

00:03:15.759 --> 00:03:19.769
of what it's really like to develop such systems.

00:03:19.770 --> 00:03:22.570
You'll get a better feel for it if you use

00:03:22.569 --> 00:03:26.724
real-world numbers versus just focusing on the project requirements.

00:03:26.724 --> 00:03:31.099
Once you do get the experience of seeing how a large number

00:03:31.099 --> 00:03:35.840
of transactions come into your smart contract and how they can be handled.

00:03:35.840 --> 00:03:41.819
So that's the basic requirements around Oracles.

