WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.745
This concept is all about UML,

00:00:02.745 --> 00:00:05.175
the Unified Modeling Language diagrams,

00:00:05.175 --> 00:00:09.105
which are used to visually represent a system along with their main actors,

00:00:09.105 --> 00:00:11.445
roles, actions, and data.

00:00:11.445 --> 00:00:13.290
In this nanodegree program,

00:00:13.290 --> 00:00:17.100
we assume students are already familiar with creating UML diagrams.

00:00:17.100 --> 00:00:21.000
Well, if you're not familiar with creating these diagrams or would like a refresher,

00:00:21.000 --> 00:00:22.830
check out the resources link below.

00:00:22.830 --> 00:00:25.320
All right, now with the [inaudible] ,

00:00:25.320 --> 00:00:27.720
here's an overview of what we'll be covering.

00:00:27.720 --> 00:00:31.455
First, we'll take a quick look at the background of UML.

00:00:31.455 --> 00:00:34.125
Then we'll talk about designing the architecture.

00:00:34.125 --> 00:00:38.700
Later on, you'll get a chance to design your own UML diagrams.

00:00:38.700 --> 00:00:41.835
First, let's dive into the UML background.

00:00:41.835 --> 00:00:45.695
Now, why is UML useful for architecting a supply chain solution?

00:00:45.695 --> 00:00:49.595
Well, it's used to think about relationships required in application.

00:00:49.595 --> 00:00:52.159
For example, a supply chain application

00:00:52.159 --> 00:00:55.280
simulates the relationship between actors and goods,

00:00:55.280 --> 00:00:57.155
as they pass through their hands.

00:00:57.155 --> 00:01:02.810
Related to this, UML is helpful to abstractly think about database modeling patterns.

00:01:02.810 --> 00:01:05.225
As we saw in our two [inaudible] example,

00:01:05.225 --> 00:01:09.050
we're able to extract what data attributes about the tuna needs to be

00:01:09.050 --> 00:01:14.090
shown and stored to which actors at particular stages in the process flow.

00:01:14.090 --> 00:01:17.255
Not only that, but you'll know it's helpful to summarize

00:01:17.255 --> 00:01:21.740
database modeling of stored procedures and services at each stage.

00:01:21.740 --> 00:01:26.815
The level of extraction UML provides is useful as a cross team communication tool,

00:01:26.815 --> 00:01:29.425
when talking with business or engineering,

00:01:29.425 --> 00:01:31.810
in order for the project goals to align.

00:01:31.810 --> 00:01:34.660
So, there are different types of UML diagrams each,

00:01:34.660 --> 00:01:37.530
with different focuses, but they are all unrelated.

00:01:37.530 --> 00:01:40.680
So, in this program, we'll be working with the activity,

00:01:40.680 --> 00:01:43.800
sequence, state and class diagrams.

00:01:43.800 --> 00:01:46.270
Now, with that said, let's explore how we'll

00:01:46.270 --> 00:01:48.995
be designing the architecture using these diagrams.

00:01:48.995 --> 00:01:51.045
Now, Designing the Architecture.

00:01:51.045 --> 00:01:55.240
At a high level, UML diagrams predominantly fall into two categories,

00:01:55.240 --> 00:01:57.445
the behavior and structure.

00:01:57.445 --> 00:01:59.860
In the design phase of architecting a solution,

00:01:59.860 --> 00:02:02.845
we tackle the behavior first followed by the structure.

00:02:02.845 --> 00:02:04.455
Given this thought process,

00:02:04.455 --> 00:02:06.779
we'll be building it up from activity,

00:02:06.779 --> 00:02:09.115
sequence, state to class.

00:02:09.115 --> 00:02:12.020
These diagrams will help us determine the logic to

00:02:12.020 --> 00:02:15.110
develop smart contracts and the database layers.

00:02:15.110 --> 00:02:19.755
For activity diagram, we'll look at actors and their interactions, the sequence,

00:02:19.755 --> 00:02:22.170
we'll look at the functions in smart contracts,

00:02:22.170 --> 00:02:23.775
then we have our state diagram,

00:02:23.775 --> 00:02:26.430
which will help us determine the enum of the asset states,

00:02:26.430 --> 00:02:29.505
such as sold, shipped and received.

00:02:29.505 --> 00:02:31.480
Then we have our class diagram,

00:02:31.480 --> 00:02:34.295
which helps us determine what goes into the databases.

00:02:34.295 --> 00:02:38.010
For example, when we create our supply chain contract file,

00:02:38.010 --> 00:02:42.935
we'll create functions that represent the actions our users take on the assets.

00:02:42.935 --> 00:02:45.515
In this case, the seller shifts the item

00:02:45.515 --> 00:02:48.785
which triggers a change in the item state to be shipped.

00:02:48.785 --> 00:02:52.565
Now, let's use our pet shop depth example from an earlier lesson.

00:02:52.565 --> 00:02:56.860
This simple pet shop can be viewed as a very simple version of a supply chain.

00:02:56.860 --> 00:02:58.350
So, there's two actors,

00:02:58.350 --> 00:03:00.810
the responsible breeder and the consumer,

00:03:00.810 --> 00:03:03.120
and their asset is the pet.

00:03:03.120 --> 00:03:05.840
Now, it's important to call that were purposely keeping

00:03:05.840 --> 00:03:08.980
the example very simple and making several assumptions.

00:03:08.980 --> 00:03:11.660
Additionally, keeping the scope scale down will help you

00:03:11.660 --> 00:03:14.630
design the architecture without numerous factors considered.

00:03:14.630 --> 00:03:16.835
So, here are the assumptions we're making.

00:03:16.835 --> 00:03:19.520
First, payment will be kept very simple.

00:03:19.520 --> 00:03:21.800
The owner will pay using ETH.

00:03:21.800 --> 00:03:23.630
Change is also kept very simple.

00:03:23.630 --> 00:03:26.765
Any excess ETH is returned back to the buyer.

00:03:26.765 --> 00:03:29.975
Anyone in the value chain contract authenticity,

00:03:29.975 --> 00:03:32.755
and lastly, returns are out of scope.

00:03:32.755 --> 00:03:36.320
Now, the following concepts will be a short series of videos in

00:03:36.320 --> 00:03:39.815
which I'll walk you through each of these diagrams as it relates to our depth.

00:03:39.815 --> 00:03:41.435
After each new diagram,

00:03:41.435 --> 00:03:43.550
you'll get a chance to diagram a solution for

00:03:43.550 --> 00:03:46.800
your very own supply chain example of your choice.

