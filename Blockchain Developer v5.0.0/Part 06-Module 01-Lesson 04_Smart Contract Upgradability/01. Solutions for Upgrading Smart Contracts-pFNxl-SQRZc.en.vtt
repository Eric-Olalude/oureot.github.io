WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.879
So let's look at some of the possible solutions that are

00:00:02.879 --> 00:00:06.764
available for upgrading smart contracts.

00:00:06.764 --> 00:00:09.570
So one of the solutions is the ability to

00:00:09.570 --> 00:00:13.140
separate the contract data and application logic into

00:00:13.140 --> 00:00:16.245
separate contracts so that the app portion

00:00:16.245 --> 00:00:19.885
of the smart contract can be upgraded independently.

00:00:19.885 --> 00:00:23.970
Now, this works great for changing application logic,

00:00:23.969 --> 00:00:29.535
but it does not work if there are data structures in your data that need to be upgraded.

00:00:29.535 --> 00:00:34.049
For example, you might have a struct and you decide to add a property to that.

00:00:34.049 --> 00:00:35.969
Well, if the data part of

00:00:35.969 --> 00:00:40.269
your smart contract already has that struct define and you cannot change that,

00:00:40.270 --> 00:00:44.270
then your application obviously cannot refer to that.

00:00:44.270 --> 00:00:48.425
The other possible scenario is that you

00:00:48.424 --> 00:00:52.774
migrate your contract data to an altogether new contract.

00:00:52.774 --> 00:00:57.679
Now, this comes with a significant number of problems because

00:00:57.679 --> 00:01:00.140
if you have a significant amount of data that's already

00:01:00.140 --> 00:01:02.640
accumulated in your data smart contract,

00:01:02.640 --> 00:01:07.400
you have to go through the process of writing an application that moves the data,

00:01:07.400 --> 00:01:08.900
and in doing so,

00:01:08.900 --> 00:01:12.625
one of the challenges will be that you will have high gas costs.

00:01:12.625 --> 00:01:16.019
You will again run up into black gas limits.

00:01:16.019 --> 00:01:19.489
So the solution would be that you'd have to break up

00:01:19.489 --> 00:01:23.989
the data into smaller chunks and execute it that way.

00:01:23.989 --> 00:01:25.375
Anyway you look at it,

00:01:25.375 --> 00:01:30.635
if you are trying to migrate the data of an entire contract to a new contract,

00:01:30.635 --> 00:01:32.585
there's a lot of costs involved,

00:01:32.584 --> 00:01:33.829
there's a lot of time involved,

00:01:33.829 --> 00:01:36.094
and there is lot of resources involved.

00:01:36.094 --> 00:01:39.260
So it's probably not the best strategy,

00:01:39.260 --> 00:01:43.400
but one you can do if that's the only possibility available.

00:01:43.400 --> 00:01:51.020
Another way to do it is to create a separate data and application contract,

00:01:51.019 --> 00:01:55.429
but have a proxy dispatcher contract that acts as an intermediary.

00:01:55.430 --> 00:02:00.095
The way this works is that your proxy never changes,

00:02:00.094 --> 00:02:02.105
your data contract never changes,

00:02:02.105 --> 00:02:08.610
but what happens is that you move the application contract to a different one as needed,

00:02:08.610 --> 00:02:11.570
and since the proxy is aware because you will update

00:02:11.569 --> 00:02:14.949
it of where the new application logic contract is,

00:02:14.949 --> 00:02:17.179
it continues to work seamlessly.

00:02:17.180 --> 00:02:19.520
This is also a good solution.

00:02:19.520 --> 00:02:23.060
The problem that you will run into when you're implementing

00:02:23.060 --> 00:02:27.849
such a solution is that the proxy uses something called delegate call,

00:02:27.849 --> 00:02:33.439
and such calls encode are prone to a lot of security issues and you have

00:02:33.439 --> 00:02:39.324
to be very careful to make sure that you architect and code that in a very secure manner.

00:02:39.324 --> 00:02:44.109
The final way that I would propose that you can have

00:02:44.110 --> 00:02:48.895
such an architecture is to use what's called an eternal storage design pattern.

00:02:48.895 --> 00:02:53.755
This is an interesting design pattern because what it does is it essentially relegates

00:02:53.754 --> 00:02:58.930
your entire data storage contract to a key value pair storage.

00:02:58.930 --> 00:03:01.629
So this would be analogous to something like Redis.

00:03:01.629 --> 00:03:07.074
So you no longer have the benefit of having semantic data structures.

00:03:07.074 --> 00:03:11.399
So for example, if you are referring to a person in your smart contract,

00:03:11.400 --> 00:03:17.530
you couldn't have a struct that's called person with name, ID, etc.

00:03:17.530 --> 00:03:21.675
You would essentially have a number of key value pairs,

00:03:21.675 --> 00:03:27.590
and you would use a hash as the key and the value that is the actual value.

00:03:27.590 --> 00:03:35.870
So this has the long-term potential of becoming a data store that is immune to all

00:03:35.870 --> 00:03:39.935
application logic changes you make because your application logic can be

00:03:39.935 --> 00:03:44.270
updated to adapt to the key structure that you want.

00:03:44.270 --> 00:03:45.935
So that's a really good solution.

00:03:45.935 --> 00:03:47.780
For our purposes today,

00:03:47.780 --> 00:03:52.519
we are going to focus on the ability to simply separate

00:03:52.519 --> 00:03:58.890
your smart contract into data and application in a very simple way.

00:03:59.050 --> 00:04:04.505
So let's start right now by taking a brief quiz.

00:04:04.504 --> 00:04:07.789
What is the biggest challenge with migrating

00:04:07.789 --> 00:04:11.889
large amounts of contract data to a new contract?
最新课程跟课件还有一对一辅导请加wx：udacity6
