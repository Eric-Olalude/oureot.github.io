WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.240
Okay. Finally, we made it to the last function, fetchItem.

00:00:03.240 --> 00:00:07.815
The goal of this function is to get details about a specific item on the supply chain.

00:00:07.815 --> 00:00:10.845
First, let's create a function called fetchItem.

00:00:10.845 --> 00:00:13.470
It takes in the sku number as an argument,

00:00:13.470 --> 00:00:16.320
it is public so that means it can be called by anyone.

00:00:16.320 --> 00:00:20.070
Since it is only looking at information but not changing anything,

00:00:20.070 --> 00:00:23.010
we can also label it as a view function type.

00:00:23.010 --> 00:00:26.580
Finally, we want to return all these details about the item.

00:00:26.579 --> 00:00:28.169
So, inside the parenthesis,

00:00:28.170 --> 00:00:31.050
we can set every done value along with its type.

00:00:31.050 --> 00:00:33.840
So, we are returning the name,

00:00:33.840 --> 00:00:35.865
the sku, the price,

00:00:35.865 --> 00:00:38.625
the state, the seller, and the buyer.

00:00:38.625 --> 00:00:42.079
So, also all this information has the type.

00:00:42.079 --> 00:00:44.674
So string name, uint sku,

00:00:44.674 --> 00:00:46.519
the prices again if uint,

00:00:46.520 --> 00:00:49.160
stateis whatever the state is,

00:00:49.159 --> 00:00:52.889
again a string, and I'll show you why I'm actually setting in a string right now.

00:00:52.890 --> 00:00:55.045
Because as opposed to returning a zero or one,

00:00:55.045 --> 00:00:58.250
I actually wanted to return a for sale or sold state.

00:00:58.250 --> 00:01:01.009
So, I'm converting it and I'll show you that in just a second,

00:01:01.009 --> 00:01:04.855
and then the seller is an address type and buyer again an address type.

00:01:04.855 --> 00:01:06.855
Now, inside the function,

00:01:06.855 --> 00:01:10.695
we are creating a local uint state variable right there,

00:01:10.694 --> 00:01:16.944
and then we can set each of these values by accessing the mapping using the sku number.

00:01:16.944 --> 00:01:21.659
Now, enum values can be converted to zero or one and so on, explicitly.

00:01:21.659 --> 00:01:23.474
So if you look at this enum value.

00:01:23.474 --> 00:01:26.924
So, we're accessing the enum by state,

00:01:26.924 --> 00:01:30.019
so we're converting it into a zero or a one, so that is how it is.

00:01:30.019 --> 00:01:32.944
So, let me in fact go back and show you how enums are.

00:01:32.944 --> 00:01:35.869
So, we probably learned that in our sessions validity.

00:01:35.870 --> 00:01:39.635
But if you look at so this value if converts to uint,

00:01:39.635 --> 00:01:42.690
will return a zero and this will return a one.

00:01:42.689 --> 00:01:45.694
So, if you access, and this is exactly what we're doing right there.

00:01:45.694 --> 00:01:48.679
So we're accessing the mapping and then the state,

00:01:48.680 --> 00:01:49.940
and then we're converting into uint.

00:01:49.939 --> 00:01:52.164
So, either we get a zero or a one.

00:01:52.165 --> 00:01:55.300
Now, instead of returning a zero or a one, which could be fine,

00:01:55.299 --> 00:01:59.959
I'm actually converting the enum value to uint and then I'm using if blocks.

00:01:59.959 --> 00:02:01.309
If the state is zero,

00:02:01.310 --> 00:02:02.975
I'm returning a for sale value.

00:02:02.974 --> 00:02:05.359
If the state is one, I'm returning a sold value.

00:02:05.359 --> 00:02:07.105
So that's what I'm doing right there.

00:02:07.105 --> 00:02:09.870
So, I'm saying if the state, which is the uint,

00:02:09.870 --> 00:02:12.840
it comes to be zero, it means it's for sale.

00:02:12.840 --> 00:02:18.930
Remember, zero means for sale and one means for sold.

00:02:18.930 --> 00:02:20.760
So I'm just using simple if blocks,

00:02:20.759 --> 00:02:24.829
so I can actually get some clear indication as opposed to just returning zero and one.

00:02:24.830 --> 00:02:26.920
Again, if the state comes to one,

00:02:26.919 --> 00:02:29.519
I'm going to have a string, which state is.

00:02:29.520 --> 00:02:31.094
Remember, this is returning a string,

00:02:31.094 --> 00:02:33.134
we're calling it sold. All right.

00:02:33.134 --> 00:02:35.939
Finally, again, seller again accessing the mapping.

00:02:35.939 --> 00:02:39.055
Sellers, were just getting all of these values and returning them.

00:02:39.055 --> 00:02:42.080
Fantastic. Now, we've got everything written out and we're

00:02:42.080 --> 00:02:45.160
ready to test out all of our code that we've been working on.

