WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.790
Let's focus on the ERC-20 token standard.

00:00:03.790 --> 00:00:07.870
This is the best one to understand to really understand how tokens work.

00:00:07.870 --> 00:00:11.410
So, we will focus on this standard and then finally,

00:00:11.410 --> 00:00:14.210
I will show you how to create your own token,

00:00:14.210 --> 00:00:15.665
and then deploy it,

00:00:15.664 --> 00:00:17.695
and also give it to your friends.

00:00:17.695 --> 00:00:22.120
An ERC-20 token standard or a contract is

00:00:22.120 --> 00:00:27.640
defined by the contract's address and the total supply of tokens available to it.

00:00:27.640 --> 00:00:31.425
To create an ERC-20 compliant token,

00:00:31.425 --> 00:00:34.240
we need to implement certain functions and

00:00:34.240 --> 00:00:38.710
events that are described by the ERC-20 specifications.

00:00:38.710 --> 00:00:41.170
So, we have three optional fields,

00:00:41.170 --> 00:00:44.015
six functions, and two events.

00:00:44.015 --> 00:00:46.439
The first three optional items,

00:00:46.439 --> 00:00:50.089
they're usually provided to provide more detail to the public.

00:00:50.090 --> 00:00:51.840
These are the tokens name,

00:00:51.840 --> 00:00:54.770
its symbol, and the number of decimals.

00:00:54.770 --> 00:00:58.285
Let's talk about all these fields in detail now.

00:00:58.284 --> 00:01:01.334
So, we're looking at a sample,

00:01:01.335 --> 00:01:05.284
an ERC-20 interface contract what an interface would look like.

00:01:05.284 --> 00:01:08.075
So, let's start from the very first one, the name.

00:01:08.075 --> 00:01:11.659
The string public constant name that says Udacity Token.

00:01:11.659 --> 00:01:15.239
Now, these are all the first three are all optional items.

00:01:15.239 --> 00:01:17.839
The name of the token contract is the long name.

00:01:17.840 --> 00:01:22.520
So, this name is the long name by which the token contract should be known,

00:01:22.519 --> 00:01:24.530
for example, Udacity Token.

00:01:24.530 --> 00:01:27.379
There are no restrictions on the length of this name,

00:01:27.379 --> 00:01:31.324
but long names are likely to be truncated in some wallet applications,

00:01:31.325 --> 00:01:33.605
so it's best to keep the name short.

00:01:33.605 --> 00:01:35.460
Then we have the symbol.

00:01:35.459 --> 00:01:38.654
In this case, I'm using symbol, UDC.

00:01:38.655 --> 00:01:41.150
The symbol of the token contract is

00:01:41.150 --> 00:01:43.940
the symbol by which the token contract should be known,

00:01:43.939 --> 00:01:46.614
for example, UDC in this case.

00:01:46.614 --> 00:01:49.579
It is broadly equivalent to a stock symbol

00:01:49.579 --> 00:01:52.609
and although it has no restriction on its size,

00:01:52.609 --> 00:01:55.489
but it is usually three to four characters in length.

00:01:55.489 --> 00:01:58.390
Decimal ones, that's an interesting one.

00:01:58.390 --> 00:02:01.909
Now, decimal refers to how divisible a token can be.

00:02:01.909 --> 00:02:03.634
So, if you see in my case,

00:02:03.635 --> 00:02:05.430
I'm having my decimals equal to 18.

00:02:05.430 --> 00:02:08.645
So, let me give you a little bit more detail on what it means.

00:02:08.645 --> 00:02:13.860
So, like I said, decimals refers to how divisible a token can be from zero,

00:02:13.860 --> 00:02:17.810
not at all divisible to 18, pretty much continuous.

00:02:17.810 --> 00:02:21.949
Technically speaking, the decimal's value is the number of digits that can

00:02:21.949 --> 00:02:26.709
come after the decimal place when displaying token values on screen.

00:02:26.710 --> 00:02:32.885
The reason that decimal field exists is that Ethereum does not deal with decimal numbers,

00:02:32.884 --> 00:02:34.909
it can only deal with integers.

00:02:34.909 --> 00:02:37.669
Let me explain you this with some examples.

00:02:37.669 --> 00:02:40.809
For example, if you have a licensed token,

00:02:40.810 --> 00:02:45.189
a token that represents a software license for a given software product.

00:02:45.189 --> 00:02:50.544
That means, the users holding a licensed token will have access to the software.

00:02:50.544 --> 00:02:54.789
It makes no sense for the user to hold a fraction of a license, right?

00:02:54.789 --> 00:02:57.939
So, the token creator sets decimals to zero.

00:02:57.939 --> 00:03:04.405
In another case, let's say we have a gold token where users can hold some amount of gold.

00:03:04.405 --> 00:03:07.854
Let's say one token means one kg of gold,

00:03:07.854 --> 00:03:12.729
but we would like users to be able to buy lesser quantity if they wish to.

00:03:12.729 --> 00:03:15.054
Since in Ethereum and Solidity,

00:03:15.055 --> 00:03:16.870
we cannot represent decimals,

00:03:16.870 --> 00:03:20.259
so we can make our gold token divisible into smaller parts,

00:03:20.259 --> 00:03:24.049
and hence we can set a decimal value to 18.

