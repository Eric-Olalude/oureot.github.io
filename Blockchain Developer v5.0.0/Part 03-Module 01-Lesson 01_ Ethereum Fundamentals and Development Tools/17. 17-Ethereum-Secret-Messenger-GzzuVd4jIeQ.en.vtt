WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.570
The last step in creating a DApp is to build a front-end that

00:00:03.570 --> 00:00:06.975
users can interact with to call the functions on your smart contract.

00:00:06.975 --> 00:00:10.815
In this video, we'll create a simple front-end that does exactly that.

00:00:10.815 --> 00:00:13.890
The purpose of this site is to log a secret message that sends

00:00:13.890 --> 00:00:17.445
a transaction containing that message to your local Ethereum blockchain.

00:00:17.445 --> 00:00:20.085
Here's a quick demonstration to show you how it works.

00:00:20.085 --> 00:00:22.995
Users will come to your site and type you a secret message.

00:00:22.995 --> 00:00:24.885
Let's say, "I have a secret."

00:00:24.885 --> 00:00:26.790
This will log a transaction onto

00:00:26.790 --> 00:00:29.850
your blockchain that includes the message. That's it for now.

00:00:29.850 --> 00:00:32.430
It's a simple idea that shows you've got everything hooked

00:00:32.430 --> 00:00:35.055
up to begin building larger applications for yourself.

00:00:35.055 --> 00:00:36.870
So, let's get started.

00:00:36.870 --> 00:00:40.445
In terms of the tools and setup we're using, here's what's going on.

00:00:40.445 --> 00:00:43.970
It's really similar to what we put together in the previous concept,

00:00:43.970 --> 00:00:46.430
but I'll run through it quick to make sure you're all set up.

00:00:46.430 --> 00:00:51.640
First, I set up a project with npm init and installed Web3 as a dependency.

00:00:51.640 --> 00:00:56.805
Then, I created an index.html and a main.css file.

00:00:56.805 --> 00:01:00.645
Heading to Remix, I created and deployed our message contract.

00:01:00.645 --> 00:01:05.930
Using this, I pasted the ABI and the contract address into the HTML file.

00:01:05.930 --> 00:01:08.135
I've got the Ganache local blockchain running,

00:01:08.135 --> 00:01:10.780
and I've set up my connections to this using Web3.

00:01:10.780 --> 00:01:14.120
I also have another tab open with the website I'm building.

00:01:14.120 --> 00:01:18.170
Okay, So now, let's take a closer look at our HTML file.

00:01:18.170 --> 00:01:19.850
In the HTML file,

00:01:19.850 --> 00:01:21.920
it's almost all stuff you've seen before.

00:01:21.920 --> 00:01:23.750
I changed some of the body to give it

00:01:23.750 --> 00:01:26.090
a header and a title that matches what we're going for,

00:01:26.090 --> 00:01:28.250
an Ethereum Secret Messenger.

00:01:28.250 --> 00:01:30.380
One important element I added is

00:01:30.380 --> 00:01:34.925
the setMessageButton and an input for the users to submit their message to.

00:01:34.925 --> 00:01:37.610
Those were done using button and input tags.

00:01:37.610 --> 00:01:41.990
Here, you'll see I set the button to an ID of setMessageButton.

00:01:41.990 --> 00:01:45.460
That will be important for when we call it in the code below.

00:01:45.460 --> 00:01:47.785
Before getting into the JavaScript,

00:01:47.785 --> 00:01:51.185
I wanted to mention that I did add a script tag here to use jQuery.

00:01:51.185 --> 00:01:53.900
It's a bit old school, but it's more concise for now and

00:01:53.900 --> 00:01:57.025
it made it a little easier for me to show you what's going on.

00:01:57.025 --> 00:02:01.160
You can feel free to update any of the jQuery to Vanilla JavaScript using

00:02:01.160 --> 00:02:04.910
newer syntax like getById or querySelector if you want.

00:02:04.910 --> 00:02:06.335
If you're not sure how to do that,

00:02:06.335 --> 00:02:08.405
then jQuery works fine too.

00:02:08.405 --> 00:02:10.115
Scrolling down a little further,

00:02:10.115 --> 00:02:11.410
you'll see the button I made.

00:02:11.410 --> 00:02:14.525
If you're not familiar with the syntax, here's what's going on.

00:02:14.525 --> 00:02:17.150
This first part is the jQuery that's looking for

00:02:17.150 --> 00:02:21.410
the button setMessageButton that I set the ID for in the HTML.

00:02:21.410 --> 00:02:23.000
If that button gets clicked,

00:02:23.000 --> 00:02:24.620
it will run a function.

00:02:24.620 --> 00:02:28.760
The function that runs is to set a message using my message.

00:02:28.760 --> 00:02:33.145
My message is the Remix contract that we deployed that we set up here.

00:02:33.145 --> 00:02:36.350
So, by having the contract address and the ABI,

00:02:36.350 --> 00:02:38.570
we can search inside the contract and call any

00:02:38.570 --> 00:02:41.150
of the methods that exist within that contract.

00:02:41.150 --> 00:02:45.455
In this case, we're calling setMessage from the contract we've been working with.

00:02:45.455 --> 00:02:47.240
When we call that function,

00:02:47.240 --> 00:02:49.430
we'll need to pass in a string as the message,

00:02:49.430 --> 00:02:51.305
and we're doing that right here.

00:02:51.305 --> 00:02:53.735
In this case, it's jQuery again.

00:02:53.735 --> 00:02:56.540
What this is doing is looking for the value that the user

00:02:56.540 --> 00:02:59.825
typed into the input with the ID of user input.

00:02:59.825 --> 00:03:02.195
This is what I specified up top.

00:03:02.195 --> 00:03:05.435
Finally, I logged the input into the console.

00:03:05.435 --> 00:03:08.855
This is so just in case we run into issues logging in to the blockchain,

00:03:08.855 --> 00:03:12.700
we can at least check to see if the input is being captured at all.

00:03:12.700 --> 00:03:15.980
All right. So, if you're familiar with writing this type of code already,

00:03:15.980 --> 00:03:18.140
then there's not too much going on that's new to you.

00:03:18.140 --> 00:03:20.660
The one thing that is unique here is that you're capturing

00:03:20.660 --> 00:03:24.305
user input and logging it to the blockchain when you hit a button.

00:03:24.305 --> 00:03:27.260
I tried to keep the site simple for the demonstration,

00:03:27.260 --> 00:03:29.060
but the same idea can be used to call

00:03:29.060 --> 00:03:32.825
any contract functions with user interfaces that you decide to create.

00:03:32.825 --> 00:03:36.080
In this case, it's the setMethod function from our contract,

00:03:36.080 --> 00:03:38.450
but it could also be the methods from any of the contracts

00:03:38.450 --> 00:03:41.180
that we've been working with on Etherscan. It's up to you.

00:03:41.180 --> 00:03:43.790
So, feel free to take this and do what you want with it.

00:03:43.790 --> 00:03:47.350
You can now capture inputs from users that trigger events on the blockchain.

00:03:47.350 --> 00:03:49.400
From there, you can use any Web3 or

00:03:49.400 --> 00:03:52.190
front-end skills you have to make this as complex as you'd like.

00:03:52.190 --> 00:03:54.980
You can also deploy this to the test or main networks when you're

00:03:54.980 --> 00:03:58.070
ready by going back and changing some of the connections you setup.

00:03:58.070 --> 00:04:00.415
As you can see, there's a lot going on here.

00:04:00.415 --> 00:04:02.390
Even though the website is simple for now,

00:04:02.390 --> 00:04:05.750
it's an accumulation of tons of new tools you learn that you'll be able

00:04:05.750 --> 00:04:09.600
to expand on quickly as you pick up more skills in Ethereum and Solidity.

