WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.504
When sending Ethereum transactions,

00:00:02.504 --> 00:00:07.149
you're asking the network to execute code that sends ether to another account.

00:00:07.150 --> 00:00:10.085
Nodes execute this code in the network.

00:00:10.085 --> 00:00:13.365
Miners get paid fees using what's known as gas.

00:00:13.365 --> 00:00:16.135
In this video, we'll go over what gas is,

00:00:16.135 --> 00:00:20.425
how it's related to ether and how it helps facilitate transactions.

00:00:20.425 --> 00:00:23.250
To start, keep in mind that the lifecycle of

00:00:23.250 --> 00:00:27.500
an Ethereum transaction is not much different than that of a Bitcoin transaction.

00:00:27.500 --> 00:00:30.625
In Bitcoin, there are Bitcoin transaction fees.

00:00:30.625 --> 00:00:34.109
In Ethereum that process is similar and uses gas.

00:00:34.109 --> 00:00:37.200
The reason this is similar is because both ethereum

00:00:37.200 --> 00:00:40.605
and bitcoin currently use the proof-of-work algorithm.

00:00:40.604 --> 00:00:42.320
When using this algorithm,

00:00:42.320 --> 00:00:45.094
the miners need this incentive to pick up the work.

00:00:45.094 --> 00:00:46.659
So, that's simple enough.

00:00:46.659 --> 00:00:51.449
Ethereum pays gas to minors for executing code on the smart contracts you create.

00:00:51.450 --> 00:00:55.445
What gets sort of confusing is when you think why don't we just use ether for that?

00:00:55.445 --> 00:00:58.295
Well, we actually do pay them in ether.

00:00:58.295 --> 00:01:03.215
This is where it's important to understand the distinction between ether and gas.

00:01:03.215 --> 00:01:07.670
Gas accounts for the cost of executing the transactions in the first place.

00:01:07.670 --> 00:01:10.730
In your contract, every time you add, subtract,

00:01:10.730 --> 00:01:15.990
multiply or divide, that adds to the total amount of gas that the transaction will cost.

00:01:15.989 --> 00:01:19.265
It's not the actual currency used for payments.

00:01:19.265 --> 00:01:21.230
Once the contract runs,

00:01:21.230 --> 00:01:24.799
the sum of these fees gets converted to its equal value in ether.

00:01:24.799 --> 00:01:28.715
Miners receive this ether which does have real-world value.

00:01:28.715 --> 00:01:30.329
As a quick analogy,

00:01:30.329 --> 00:01:33.064
you can think of this like how gas works in a car.

00:01:33.064 --> 00:01:36.834
Gas is important because it's required for your car to function.

00:01:36.834 --> 00:01:40.875
The problem is you can't actually go buy food with the gas from your car.

00:01:40.875 --> 00:01:43.760
You will need to convert this gas into money by selling

00:01:43.760 --> 00:01:46.850
it and then use this money to buy whatever else you want.

00:01:46.849 --> 00:01:50.424
That's a bit strange, since no one really sells their cars gas,

00:01:50.424 --> 00:01:53.644
but it's very similar to what happens in ethereum.

00:01:53.644 --> 00:01:59.599
In ethereum, gas accounts for the total cost of executing operations on the contract.

00:01:59.599 --> 00:02:03.464
Once completed, ethereum converts this gas into its value in

00:02:03.465 --> 00:02:08.025
ether and this ether goes to the node that executed the transaction.

00:02:08.025 --> 00:02:09.849
When you hear the word gas,

00:02:09.849 --> 00:02:12.780
people are usually referring to one of two things,

00:02:12.780 --> 00:02:15.430
the gas price or the gas limit.

00:02:15.430 --> 00:02:17.900
In the last section, you saw that both of

00:02:17.900 --> 00:02:20.944
these terms are included in the fields of a transaction.

00:02:20.944 --> 00:02:23.599
Now that we have a better idea of what gas is,

00:02:23.599 --> 00:02:26.465
we can go over these in a little more detail.

00:02:26.465 --> 00:02:30.259
First, the gas price is the price per unit of gas that

00:02:30.259 --> 00:02:33.859
you're willing to pay for executing the code in your smart contract.

00:02:33.860 --> 00:02:37.895
This field is how you can incentivize workers to pick up your transaction.

00:02:37.895 --> 00:02:40.640
An important thing to note here is that the same amount of

00:02:40.639 --> 00:02:43.619
gas will be used regardless of what you're willing to pay.

00:02:43.620 --> 00:02:48.129
What this price specifies is how much you're willing to pay for each unit of gas.

00:02:48.129 --> 00:02:53.484
A low gas price will be cheap but it's less likely that a miner would pick up this work.

00:02:53.485 --> 00:02:56.990
A high gas price is more likely to get picked up but can get

00:02:56.990 --> 00:03:00.590
very expensive if you want to execute this code many times.

00:03:00.590 --> 00:03:03.530
Finding a gas price that is both affordable and

00:03:03.530 --> 00:03:07.275
effective is a balance you'll need to consider when determining the gas price.

00:03:07.275 --> 00:03:10.230
It's not an exact relationship like shown here,

00:03:10.229 --> 00:03:13.319
but hopefully this graph helps get the point across.

00:03:13.319 --> 00:03:16.009
Gas limit is the maximum amount of

00:03:16.009 --> 00:03:19.323
gas a sender is willing to pay for a given transaction.

00:03:19.324 --> 00:03:22.260
Setting this limit is important for a few reasons.

00:03:22.259 --> 00:03:26.299
One, it allows you to work within a budget that you're comfortable with.

00:03:26.300 --> 00:03:29.710
It also safeguards you from potential errors in the contract.

00:03:29.710 --> 00:03:32.965
For example, if there's an infinite loop in your code,

00:03:32.965 --> 00:03:34.349
that's bad enough already.

00:03:34.349 --> 00:03:38.400
With ethereum, you'll also lose gas for each time this loop executes.

00:03:38.400 --> 00:03:40.310
This can add up pretty quickly,

00:03:40.310 --> 00:03:43.905
and by setting a limit you can ensure things stay within your budget.

00:03:43.905 --> 00:03:46.849
If you don't include enough gas in the gas limit to

00:03:46.849 --> 00:03:49.614
execute the required code, you'll get an error.

00:03:49.615 --> 00:03:51.980
In this case, you've both spent money for

00:03:51.979 --> 00:03:54.604
the gas and you don't have the output you wanted.

00:03:54.604 --> 00:03:56.299
It's sort of like filling the tank of

00:03:56.300 --> 00:03:59.165
your car halfway and then getting stranded on the highway.

00:03:59.164 --> 00:04:02.819
You didn't get to where you wanted and you still wasted gas.

00:04:02.819 --> 00:04:06.139
However, it's fine to specify a higher gas limit.

00:04:06.139 --> 00:04:10.654
In this case, the unused gas will be returned after the contract executes.

00:04:10.655 --> 00:04:15.205
So that wraps up this intro to how gas works in ethereum.

00:04:15.205 --> 00:04:19.035
For now, the important thing to understand is what gas is,

00:04:19.035 --> 00:04:22.430
when it's used, and a few basic terms that we went over.

00:04:22.430 --> 00:04:27.365
Later on, you'll build contracts that have these operations and run using gas.

00:04:27.365 --> 00:04:29.750
Using some helpful Developer Tools,

00:04:29.750 --> 00:04:34.519
you'll be able to run tests and estimate the gas usage for your contracts.

