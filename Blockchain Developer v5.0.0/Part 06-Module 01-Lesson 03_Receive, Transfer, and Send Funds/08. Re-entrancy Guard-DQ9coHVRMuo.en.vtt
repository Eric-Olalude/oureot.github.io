WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.580
Our third payment protection pattern is re-entrancy guard.

00:00:05.580 --> 00:00:09.570
Re-entrancy guarding prevents a contract function from calling

00:00:09.570 --> 00:00:14.025
itself multiple times in a single transaction. How would that occur?

00:00:14.025 --> 00:00:16.500
Well, as with other attacks that you've seen,

00:00:16.500 --> 00:00:19.620
this is just another variant of a re-entrancy attack,

00:00:19.620 --> 00:00:24.495
where an attacker writes code that has a contract call

00:00:24.495 --> 00:00:30.330
your contract and essentially put it into an infinite loop causing funds to be drained.

00:00:30.329 --> 00:00:33.539
Re-entrancy guarding is also best implemented as

00:00:33.539 --> 00:00:36.689
a function modifier for greater reusability.

00:00:36.689 --> 00:00:38.863
The pattern is as follows;

00:00:38.863 --> 00:00:43.640
you first create a variable that's your guard variable.

00:00:43.640 --> 00:00:45.605
Let's call that counter.

00:00:45.604 --> 00:00:49.984
In your modifier, you increment the counter variable.

00:00:49.984 --> 00:00:55.445
In other words, every time the modifier is reference the counter gets incremented.

00:00:55.445 --> 00:00:59.265
Next, you instantiate a local variable inside

00:00:59.265 --> 00:01:03.969
a modifier that has the same value as the counter.

00:01:03.969 --> 00:01:07.219
Immediately after that, you use

00:01:07.219 --> 00:01:11.689
the underscore placeholder which as you may already know in Solidity,

00:01:11.689 --> 00:01:18.159
is where the function code that is being used by the modifier is actually placed.

00:01:18.159 --> 00:01:23.734
So the pattern so far is that you have created the guard variable,

00:01:23.734 --> 00:01:27.545
you've incremented it, you've set a local variable.

00:01:27.545 --> 00:01:29.659
Now your function code gets called,

00:01:29.659 --> 00:01:32.784
and after the function code is called,

00:01:32.784 --> 00:01:35.000
you then check with

00:01:35.000 --> 00:01:39.545
a require statement that the local variable has the same value as counter.

00:01:39.545 --> 00:01:41.825
Now, this is a little tricky.

00:01:41.825 --> 00:01:45.875
So let's walk through this and think about it from the stack perspective.

00:01:45.875 --> 00:01:49.700
Imagine a scenario where your contract function is being

00:01:49.700 --> 00:01:53.704
called by an external contract repeatedly.

00:01:53.704 --> 00:02:00.980
This pattern because of that very last require that occurs after the call function,

00:02:00.980 --> 00:02:05.600
ensures that even if that was situation were to occur,

00:02:05.599 --> 00:02:09.620
the last require would fail because the local variable would

00:02:09.620 --> 00:02:14.585
have the initial state when the modifier was set the first time.

00:02:14.585 --> 00:02:20.820
So let's look at the code for this in an exercise and it should become a little clearer.

