WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.899
So, now, this is going to be a very quick refresher video on how Mocha and Chai work.

00:00:03.899 --> 00:00:05.519
First of all, it's a very simple library.

00:00:05.519 --> 00:00:07.379
You just have three or four functions.

00:00:07.379 --> 00:00:11.640
We probably might not even use all of them in our testing for the smart contracts.

00:00:11.640 --> 00:00:13.410
Then, I'll explain you how and why very soon.

00:00:13.410 --> 00:00:15.210
But it's a very simple library to understand.

00:00:15.210 --> 00:00:17.670
Basically, it's a testing framework for JavaScript,

00:00:17.670 --> 00:00:21.510
that's what Mocha is, and it can be used to test any kind of JavaScript code.

00:00:21.510 --> 00:00:23.429
You can use for front end applications,

00:00:23.429 --> 00:00:25.410
back end applications, Node applications,

00:00:25.410 --> 00:00:27.105
and also even smart contracts,

00:00:27.105 --> 00:00:30.089
which is your files written in Solidity.

00:00:30.089 --> 00:00:32.429
On the other hand, Chai is more of an assertion library.

00:00:32.429 --> 00:00:35.399
So, you have assert.ok, assert.equal,

00:00:35.399 --> 00:00:37.229
so just comparing two values together,

00:00:37.229 --> 00:00:38.609
that's what Chai is, very simple,

00:00:38.609 --> 00:00:40.839
again, just a couple of commands to understand.

00:00:40.840 --> 00:00:43.485
Now, both are available as npm packages,

00:00:43.484 --> 00:00:46.549
of course, a very popular between a lot of developers to test their code.

00:00:46.549 --> 00:00:50.029
Now, Truffle comes preinstalled with Mocha and Chai.

00:00:50.030 --> 00:00:53.390
So, you don't have to do any npm installation separately, but because, like I said,

00:00:53.390 --> 00:00:55.640
if you want to do it, you can do it separately,

00:00:55.640 --> 00:00:58.295
but Truffle comes preinstalled with all the stuff.

00:00:58.295 --> 00:01:01.804
Moving on, let's talk a little bit more detail about Mocha and Chai.

00:01:01.804 --> 00:01:03.469
A Mocha has test cases,

00:01:03.469 --> 00:01:05.840
so you can create bunch of test cases, which are called it.

00:01:05.840 --> 00:01:07.969
So, use an it block to create a test.

00:01:07.969 --> 00:01:10.010
Again, lots of examples coming soon.

00:01:10.010 --> 00:01:12.079
Then, Chai is just assert,

00:01:12.079 --> 00:01:13.480
more of assert statement.

00:01:13.480 --> 00:01:15.270
Now, Mocha functions, basically,

00:01:15.269 --> 00:01:16.489
we're just looking at four functions.

00:01:16.489 --> 00:01:19.959
Those are the only ones that we pretty much would ever end up using: it function,

00:01:19.959 --> 00:01:22.434
describe function, beforeEach, and afterEach.

00:01:22.435 --> 00:01:25.480
It is used to run a test and make an assertion.

00:01:25.480 --> 00:01:28.424
Describe is used to group bunch of its together,

00:01:28.424 --> 00:01:30.349
and, again, we will look at examples soon.

00:01:30.349 --> 00:01:34.189
BeforeEach is used to run just some basic code

00:01:34.189 --> 00:01:35.780
that you really want to run before a lot of

00:01:35.780 --> 00:01:38.344
functions as opposed to doing them every time all together.

00:01:38.344 --> 00:01:40.250
You can just have a beforeEach function.

00:01:40.250 --> 00:01:42.409
So, before every it block is run,

00:01:42.409 --> 00:01:45.774
your contract or whatever that you're testing will just run the beforeEach.

00:01:45.775 --> 00:01:47.295
Same thing with an afterEach.

00:01:47.295 --> 00:01:48.719
An example would be, let's say,

00:01:48.719 --> 00:01:51.194
you read from a function in a smart contract.

00:01:51.194 --> 00:01:53.239
For that, you want to deploy the contract every time.

00:01:53.239 --> 00:01:55.670
So, as opposed to doing it in every single it function,

00:01:55.670 --> 00:01:58.370
you can put all of that code in the beforeEach function.

00:01:58.370 --> 00:02:00.785
So, beforeEach, all of the it blocks are run.

00:02:00.784 --> 00:02:02.239
You will deploy the contracts,

00:02:02.239 --> 00:02:04.834
you have a fresh copy to start with every time the block comes through.

00:02:04.834 --> 00:02:07.959
Same thing, afterEach, executed for some general cleanup code.

00:02:07.959 --> 00:02:10.459
It happens pretty much after every it test.

00:02:10.460 --> 00:02:12.469
Little bit more detailed, it function, like I said,

00:02:12.469 --> 00:02:17.389
the purpose of it is to run one individual assertion on something we are trying to test.

00:02:17.389 --> 00:02:21.154
Assertion means that we are taking two values and then comparing them together.

00:02:21.155 --> 00:02:24.060
Describe function, the purpose of describe is to run

00:02:24.060 --> 00:02:28.455
similar it functions together just for organization in nature, and you want to describe.

00:02:28.455 --> 00:02:30.450
A lot of it functions do something very similar.

00:02:30.449 --> 00:02:32.750
So, you can just all put them together and describe block.

00:02:32.750 --> 00:02:34.895
Again, examples coming very soon.

00:02:34.895 --> 00:02:38.290
BeforeEach, like we talked, but it's more of a utility function used to

00:02:38.289 --> 00:02:42.234
extract some common logic that is common to a lot of tests that you'll be running.

00:02:42.235 --> 00:02:44.965
So, you can put all of them in a beforeEach function together.

00:02:44.965 --> 00:02:49.465
So, that means now, beforeEach will be executed before a collection of it functions.

00:02:49.465 --> 00:02:51.270
AfterEach, the same thing,

00:02:51.270 --> 00:02:53.250
exactly same thing, utility function.

00:02:53.250 --> 00:02:57.784
All the common logic could be put together in an afterEach function, and similar thing.

00:02:57.784 --> 00:03:02.409
So, that means afterEach will be now executed after collection of it functions.

00:03:02.409 --> 00:03:04.754
Chai is in a social library.

00:03:04.754 --> 00:03:07.370
So, all you have, pretty much what you end up using is assert.

00:03:07.370 --> 00:03:09.920
So, you can do a assert.equal, you're comparing two values.

00:03:09.919 --> 00:03:12.864
So, in the first one, you're comparing owner to udacity.

00:03:12.865 --> 00:03:16.895
Next one, you can also do typeOf compare if foo is a typeOf string,

00:03:16.895 --> 00:03:18.770
and they can also check a length of something,

00:03:18.770 --> 00:03:20.409
you can also check the property of something.

00:03:20.409 --> 00:03:24.919
Pretty much we end up using mostly equal or ok with our smart contracts.

00:03:24.919 --> 00:03:26.539
So, use asserting two values,

00:03:26.539 --> 00:03:28.324
and you get a true or a false.

00:03:28.324 --> 00:03:30.229
Let's look at a very simple example here.

00:03:30.229 --> 00:03:32.179
So, if you see, we have a beforeEach function.

00:03:32.180 --> 00:03:35.090
So, what we're doing in the beforeEach function, we're just deploying.

00:03:35.090 --> 00:03:37.280
So, if you see, we have name of a contract called library,

00:03:37.280 --> 00:03:38.930
we're deploying it, and then,

00:03:38.930 --> 00:03:43.460
we have a fresh copy of this every time available before all the it blocks happen.

00:03:43.460 --> 00:03:45.170
If you also see, we have a describe.

00:03:45.169 --> 00:03:47.429
So, typically, what these functions do,

00:03:47.430 --> 00:03:48.560
they take two parameters.

00:03:48.560 --> 00:03:50.840
The first is just a description since, say,

00:03:50.840 --> 00:03:53.750
if you see the describe has a description, say, all tests.

00:03:53.750 --> 00:03:56.064
Then, the second is a function.

00:03:56.064 --> 00:03:57.329
Now, within that, then,

00:03:57.330 --> 00:03:58.575
we have all the it blocks.

00:03:58.574 --> 00:04:01.129
Exactly the same thing with it, two parameters.

00:04:01.129 --> 00:04:06.479
The first one is some description of that it test followed by the second is a function.

00:04:06.479 --> 00:04:09.840
Now, within that function, we can do all async await calls.

00:04:09.840 --> 00:04:11.930
We'll, again, look at those examples very soon,

00:04:11.930 --> 00:04:13.069
but that's the basics.

00:04:13.069 --> 00:04:14.465
So, you have a beforeEach,

00:04:14.465 --> 00:04:17.884
so this beforeEach would be called before all it blocks.

00:04:17.884 --> 00:04:22.384
Describe is just to organizational in nature to group bunch of it blocks together.

00:04:22.384 --> 00:04:24.439
Those are similar, and if you see,

00:04:24.439 --> 00:04:25.500
we have two it blocks,

00:04:25.500 --> 00:04:28.040
all grouped together inside the describe blocks.

00:04:28.040 --> 00:04:30.800
So, both describe and it take two function arguments.

00:04:30.800 --> 00:04:32.150
The first is a description,

00:04:32.149 --> 00:04:33.304
the second is a function.

00:04:33.305 --> 00:04:34.785
Same thing can happen it block.

00:04:34.785 --> 00:04:35.820
The first is description,

00:04:35.819 --> 00:04:37.860
so if you look at the first one, it says,

00:04:37.860 --> 00:04:39.530
create a library owner, and then,

00:04:39.529 --> 00:04:41.799
the second one is a function that it takes in.

00:04:41.800 --> 00:04:43.745
Then, you have the function definition after it.

00:04:43.745 --> 00:04:45.500
So, that's pretty much a Mocha and Chai is.

00:04:45.500 --> 00:04:47.870
Now, we're going to see lots and lots of examples of this as we

00:04:47.870 --> 00:04:51.449
start writing more tests on our smart contracts.

