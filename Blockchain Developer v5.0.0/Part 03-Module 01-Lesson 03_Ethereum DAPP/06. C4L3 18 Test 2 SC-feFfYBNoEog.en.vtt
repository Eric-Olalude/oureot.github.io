WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now, let's look at another test to claim a star,

00:00:03.000 --> 00:00:04.830
and let's see how to handle transactions.

00:00:04.830 --> 00:00:06.000
If you look at this second test,

00:00:06.000 --> 00:00:07.259
it's another new test that we added.

00:00:07.259 --> 00:00:09.750
So this was the first one, this is the second test right here.

00:00:09.750 --> 00:00:11.580
Now, transactions. First of all,

00:00:11.580 --> 00:00:13.544
in choosing between a transaction and the call,

00:00:13.544 --> 00:00:18.199
is as simple as deciding whether you want to read data or write data,

00:00:18.199 --> 00:00:19.445
which is modify data.

00:00:19.445 --> 00:00:22.550
Transactions fundamentally change the state of the network.

00:00:22.550 --> 00:00:26.225
A transaction can be as simple as sending either to another account,

00:00:26.225 --> 00:00:28.760
or as complicated as executing a function,

00:00:28.760 --> 00:00:31.750
or adding even a new contract to the network is also a transaction.

00:00:31.750 --> 00:00:36.019
The defining characteristic of a transaction is that it writes or changes data.

00:00:36.020 --> 00:00:38.410
Transactions caused ether to run,

00:00:38.409 --> 00:00:39.719
which is also known as gas,

00:00:39.719 --> 00:00:41.820
and transactions take time to process.

00:00:41.820 --> 00:00:44.520
When you execute a contracts function via a transaction,

00:00:44.520 --> 00:00:46.790
you cannot receive that functions return value

00:00:46.789 --> 00:00:49.868
because the transaction is not processed immediately,

00:00:49.868 --> 00:00:52.700
because it's a transaction, it takes time to process.

00:00:52.700 --> 00:00:55.880
In general, functions meant to be executed via a transaction,

00:00:55.880 --> 00:00:59.975
will not return a value and it will return a transaction ID instead.

00:00:59.975 --> 00:01:01.670
Okay? Now, to summarize,

00:01:01.670 --> 00:01:03.414
again transactions cost gas,

00:01:03.414 --> 00:01:05.234
they change the state of the network,

00:01:05.234 --> 00:01:07.004
they are not processed immediately,

00:01:07.004 --> 00:01:09.539
and also would not return for specific value.

00:01:09.540 --> 00:01:11.395
So that's the test we're looking at.

00:01:11.394 --> 00:01:13.864
So if you look over here, we have await.

00:01:13.864 --> 00:01:16.759
Again, same thing, we have a description, it function.

00:01:16.760 --> 00:01:18.410
We're describing what kind of tests it is,

00:01:18.409 --> 00:01:20.344
and we have the second argument is a function.

00:01:20.344 --> 00:01:21.844
I'm going to put the word async,

00:01:21.844 --> 00:01:24.200
just because I want to use await syntax.

00:01:24.200 --> 00:01:27.290
Again, we have await instance.claimStar,

00:01:27.290 --> 00:01:29.359
now we're recalling the function to claim a star.

00:01:29.359 --> 00:01:31.415
Remember now, I also wanted to mention,

00:01:31.415 --> 00:01:35.480
if you remember that our claims.function does not accept any arguments,

00:01:35.480 --> 00:01:36.655
so where is this coming from?

00:01:36.655 --> 00:01:38.439
This is an object that you pass to it,

00:01:38.439 --> 00:01:40.700
and it's a special object that can always

00:01:40.700 --> 00:01:43.165
be passed as the last parameter to any function.

00:01:43.165 --> 00:01:44.650
So any function like this,

00:01:44.650 --> 00:01:47.015
where you're trying to change something which is a transaction,

00:01:47.015 --> 00:01:48.545
what you pass is an object,

00:01:48.545 --> 00:01:51.079
and that object [inaudible].

00:01:51.079 --> 00:01:53.959
You can set the address that you want to send the transaction from,

00:01:53.959 --> 00:01:55.250
so I'm sending it from address owner.

00:01:55.250 --> 00:01:58.144
Remember add owner will set you to whatever account is zero right there.

00:01:58.144 --> 00:02:01.339
So I'm using address of owner who send this transaction for,

00:02:01.340 --> 00:02:05.015
or you can always specify gas parameters using a gas keyword here.

00:02:05.015 --> 00:02:07.070
You can also send ether along with [inaudible]

00:02:07.069 --> 00:02:11.060
Of course, you are going to see examples of that soon when you write more tests.

00:02:11.060 --> 00:02:13.009
So, you can use all those keywords right here.

00:02:13.009 --> 00:02:15.094
So, this is just an object that you pass along.

00:02:15.094 --> 00:02:17.330
If this function had parameters or arguments,

00:02:17.330 --> 00:02:19.850
you can pass them right here before this object,

00:02:19.849 --> 00:02:22.685
followed by the last one would be this object.

00:02:22.685 --> 00:02:24.469
Then, we have an assert.equal.

00:02:24.469 --> 00:02:25.669
So once we claim a star-

00:02:25.669 --> 00:02:28.669
Now, we of course remember in our function over here.

00:02:28.669 --> 00:02:30.280
If I go back to here.

00:02:30.280 --> 00:02:34.629
So once we claim a star, this is where the star owner is set to the msg.sender.

00:02:34.629 --> 00:02:36.900
What we're doing in our test file,

00:02:36.900 --> 00:02:39.575
we're making sure that this is equal to the owner, right?

00:02:39.574 --> 00:02:42.664
So this is what it was, because in this function we're setting it to the owner,

00:02:42.664 --> 00:02:44.209
which is the msg.sender,

00:02:44.210 --> 00:02:45.260
which is of course owner,

00:02:45.259 --> 00:02:47.729
because we're calling it from this address.

00:02:47.729 --> 00:02:51.649
Then what we're doing, is that we're comparing and making sure that this equals.

00:02:51.650 --> 00:02:53.110
Let's go write another test,

00:02:53.110 --> 00:02:56.040
and we'll go run a test after that in the next video.

