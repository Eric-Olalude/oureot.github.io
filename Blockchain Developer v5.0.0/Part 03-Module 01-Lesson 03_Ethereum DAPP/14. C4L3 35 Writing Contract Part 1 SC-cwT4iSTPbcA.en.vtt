WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.770
Now, that we've looked at how

00:00:01.770 --> 00:00:06.419
the ERC721 contract or the interface is implemented in open Zeppelin,

00:00:06.419 --> 00:00:07.964
so we're going to start importing it.

00:00:07.964 --> 00:00:12.240
So, I'm in my editor right now in my starNotaryv2 directory.

00:00:12.240 --> 00:00:13.500
This was the v1 that we did,

00:00:13.500 --> 00:00:16.199
this is the v2 that we're in right now.

00:00:16.199 --> 00:00:18.089
In my contracts folder,

00:00:18.089 --> 00:00:19.820
we're going to start creating our own contract,

00:00:19.820 --> 00:00:23.359
filing and import the open Zeppelin ERC721 token files.

00:00:23.359 --> 00:00:24.679
So, inside the contract,

00:00:24.679 --> 00:00:27.179
remember we already did some cleanup by deleting anything that came

00:00:27.179 --> 00:00:29.984
with the boilerplate code, except the Migrations.sol.

00:00:29.984 --> 00:00:36.539
So, let's go create our own file here, calling it starNotary.sol.

00:00:36.539 --> 00:00:40.219
I'm going to play some code here and I'm going to walk you through what's going on.

00:00:40.219 --> 00:00:41.719
So, this is what our second version of

00:00:41.719 --> 00:00:44.405
the smart contract would look like for the starNotary.

00:00:44.405 --> 00:00:45.800
If you see the first line,

00:00:45.799 --> 00:00:47.320
we start with importing this file,

00:00:47.320 --> 00:00:49.384
so we can actually call functions on it.

00:00:49.384 --> 00:00:51.710
The next is that, but of course this is how you define

00:00:51.710 --> 00:00:53.840
interfaces or you actually inherit.

00:00:53.840 --> 00:00:55.250
So, if you have contract,

00:00:55.250 --> 00:00:56.994
starNotary is the name of our contract,

00:00:56.994 --> 00:01:02.149
is ERC721 because we inheriting it from this contract and this is how you inherit.

00:01:02.149 --> 00:01:03.619
We've learned about this in our lesson,

00:01:03.619 --> 00:01:05.689
[inaudible] Then falling that,

00:01:05.689 --> 00:01:08.599
we're actually creating a struct the whole star information.

00:01:08.599 --> 00:01:10.849
Now, we're just storing the name of the star for now,

00:01:10.849 --> 00:01:12.789
but we can easily add information like star

00:01:12.790 --> 00:01:15.410
coordinates by a specific story and any similar stuff.

00:01:15.409 --> 00:01:17.810
But for now, we're just holding the name of the star right there.

00:01:17.810 --> 00:01:20.370
Okay? Then, we're also having two mappings here.

00:01:20.370 --> 00:01:23.880
Okay. The first mapping is called a tokenIdToStarInfo,

00:01:23.879 --> 00:01:26.859
to store the tokenId of the star as the key,

00:01:26.859 --> 00:01:29.000
and the star details as the value.

00:01:29.000 --> 00:01:32.694
This is really going to make it easy for us to look up any star using it's Id.

00:01:32.694 --> 00:01:36.679
Okay. Then, we're creating a mapping to store stars that are up for sale.

00:01:36.680 --> 00:01:40.010
We're calling this mapping stars for sale, mapping.

00:01:40.010 --> 00:01:43.715
Using the tokenId of the star as the star price, as the value.

00:01:43.715 --> 00:01:46.770
So, this is the Id and this is the price of the star,

00:01:46.769 --> 00:01:48.649
and so we're putting it up in the mapping right there.

00:01:48.650 --> 00:01:51.950
Okay. Then we have three functions broadly speaking create star,

00:01:51.950 --> 00:01:54.005
put up star for sale, and buy a star.

00:01:54.004 --> 00:01:57.144
In the createStar function, this function right there.

00:01:57.144 --> 00:01:58.679
Let's see what's going on.

00:01:58.680 --> 00:02:00.630
What we're doing is getting a name,

00:02:00.629 --> 00:02:03.449
using a name we're creating a star and also the Id.

00:02:03.450 --> 00:02:05.180
So, we're going to send these two parameters in

00:02:05.180 --> 00:02:08.090
and then of course, this is how you do it.

00:02:08.090 --> 00:02:09.740
Now, the way you're doing it, first of all,

00:02:09.740 --> 00:02:12.685
since this is the star is a struct.

00:02:12.685 --> 00:02:14.824
Right? So, all the information is coming in a struct.

00:02:14.824 --> 00:02:19.174
So, we are creating a newStar of type Star in memory.

00:02:19.175 --> 00:02:22.525
Then, we're adding this to the tokenId to Star info mapping.

00:02:22.525 --> 00:02:24.300
So, we're creating a newStar in memory,

00:02:24.300 --> 00:02:25.785
that is how you work with structs.

00:02:25.784 --> 00:02:27.680
Then, we're adding this to the mapping.

00:02:27.680 --> 00:02:31.849
Then, we're calling the Mint function that we saw in our ERC721.

00:02:31.849 --> 00:02:33.905
This is how we're minting new tokens.

00:02:33.905 --> 00:02:38.664
Remember, we saw this implemented the ERC721 opens up lens contract, the mint function.

00:02:38.664 --> 00:02:42.804
This function mints new tokens by adding one token to the msu.center.

00:02:42.805 --> 00:02:44.689
Now, you can always look up that function again in

00:02:44.689 --> 00:02:47.419
the ERC721 file to get a better understanding,

00:02:47.419 --> 00:02:49.399
but this is how you are creating a star.

00:02:49.400 --> 00:02:52.069
So, we're create a star with information that's passed in,

00:02:52.069 --> 00:02:53.870
we store it in the mapping and we're also calling

00:02:53.870 --> 00:02:58.409
the mint function to mint new tokens without specific tokenId.

