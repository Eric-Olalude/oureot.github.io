WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.660
In this video, we'll give a quick demonstration of how a blockchain

00:00:03.660 --> 00:00:07.740
works using the same website as before, anders.com.

00:00:07.740 --> 00:00:11.140
Follow the link below the video if you'd like to follow along.

00:00:11.140 --> 00:00:12.890
When you get to the site,

00:00:12.890 --> 00:00:14.810
navigate to the blockchain section from

00:00:14.810 --> 00:00:18.175
the top and you should end up on the screen you see here.

00:00:18.175 --> 00:00:20.810
In this example, you'll see a visual showing

00:00:20.809 --> 00:00:23.344
a chain of blocks rather than a single block.

00:00:23.344 --> 00:00:26.644
Looking at this should all hopefully seem pretty familiar.

00:00:26.644 --> 00:00:29.660
What you'll notice though is that there is a new field added to

00:00:29.660 --> 00:00:32.869
each block shown here as previous.

00:00:32.869 --> 00:00:37.744
This field shows that each block no longer only contains it's own hash value,

00:00:37.744 --> 00:00:41.419
it now also includes the hash of the previous block.

00:00:41.420 --> 00:00:43.469
By making this association,

00:00:43.469 --> 00:00:45.320
we're linking blocks together.

00:00:45.320 --> 00:00:48.869
This series of linked blocks is what forms the blockchain.

00:00:48.869 --> 00:00:53.129
Each block in this chain follows the same rules that we learned previously.

00:00:53.130 --> 00:00:56.040
Each block needs to be validated and we cannot

00:00:56.039 --> 00:00:59.049
change any data without invalidating the block.

00:00:59.049 --> 00:01:00.919
So, let's try it.

00:01:00.920 --> 00:01:03.490
On the first block type whatever you like.

00:01:03.490 --> 00:01:06.564
I'll type blockchain developer nanodegree program.

00:01:06.564 --> 00:01:08.299
Then click "Mine."

00:01:08.299 --> 00:01:11.564
There might be a delay here as you wait for the block to mine.

00:01:11.564 --> 00:01:14.724
Once completed, you'll see the block turn green.

00:01:14.724 --> 00:01:18.234
Now, on the second block type in something new.

00:01:18.234 --> 00:01:20.640
I'll try, "I love this course."

00:01:20.640 --> 00:01:22.390
Then click "Mine" again.

00:01:22.390 --> 00:01:25.060
Now, we have two validated block.

00:01:25.060 --> 00:01:28.225
What happens if we change data in the second block?

00:01:28.224 --> 00:01:32.324
To test this out let's delete the exclamation point.

00:01:32.325 --> 00:01:36.079
This invalidates the block and turns it red just like you'd

00:01:36.079 --> 00:01:39.849
expect because that's the same as what happened to a single block.

00:01:39.849 --> 00:01:43.919
Now, I'll add the exclamation point back to turn the black green again.

00:01:43.920 --> 00:01:45.600
But here's something new.

00:01:45.599 --> 00:01:48.709
What happens if we change data in the first block?

00:01:48.709 --> 00:01:51.125
I'll remove the word program from that block.

00:01:51.125 --> 00:01:55.655
In this case it invalidates both the first block and the second block.

00:01:55.655 --> 00:01:58.280
If we had more blocks that reaction would

00:01:58.280 --> 00:02:01.775
continue up the chain for as many blocks as we had created.

00:02:01.775 --> 00:02:04.200
This happens because of how the hash values

00:02:04.200 --> 00:02:06.765
are linked together like we mentioned previously.

00:02:06.765 --> 00:02:09.960
Let's see if we can follow the same logic as before,

00:02:09.960 --> 00:02:12.555
this time for the live demonstration.

00:02:12.555 --> 00:02:15.930
You'll hopefully recognize this pattern from before,

00:02:15.930 --> 00:02:19.409
but I thought it might be helpful to go through it again with this demo.

00:02:19.409 --> 00:02:23.625
The value of the second block includes the hash of the first block.

00:02:23.625 --> 00:02:27.629
That hash needs to stay the same for the second block to stay valid.

00:02:27.629 --> 00:02:30.000
When you change data in the first block,

00:02:30.000 --> 00:02:31.844
you're also changing it's hash.

00:02:31.844 --> 00:02:34.830
Since this hash is used in the second block it

00:02:34.830 --> 00:02:38.225
changes the field for the previous hash in that block.

00:02:38.224 --> 00:02:44.288
Changing any data in the block including the previous hash value makes the block invalid.

00:02:44.288 --> 00:02:47.229
This small change causes a reaction that keeps

00:02:47.229 --> 00:02:50.599
running through an invalidating every block in the chain.

00:02:50.599 --> 00:02:53.319
This visual demonstration definitely helped

00:02:53.319 --> 00:02:56.019
me when I was first trying to understand blockchains.

00:02:56.020 --> 00:02:58.030
Try messing around a little more with the data

00:02:58.030 --> 00:03:01.400
here until you get comfortable with these new ideas.

