WEBVTT
Kind: captions
Language: en

00:00:00.170 --> 00:00:03.840
Okay. So, now let's go and talk about Merkle trees,

00:00:03.840 --> 00:00:07.080
since I've explained to you in the previous video what Merkle trees are,

00:00:07.080 --> 00:00:11.430
like we learned, that Merkle trees are a fundamental part of Blockchain technology.

00:00:11.430 --> 00:00:15.180
A Merkle tree pretty much summarizes all the transactions in a block

00:00:15.180 --> 00:00:19.470
by producing a digital fingerprint of the entire set of transactions,

00:00:19.470 --> 00:00:24.570
thereby enabling a user to verify whether or not a transaction is included in a block.

00:00:24.570 --> 00:00:28.750
Now, Merkle trees are created by repeatedly hashing pairs of nodes,

00:00:28.750 --> 00:00:31.080
and I'm going to show you exactly how that happens.

00:00:31.080 --> 00:00:34.035
So, like we said, the way it's done,

00:00:34.035 --> 00:00:38.445
it actually repeatedly hashes pairs of nodes until there's only one hash left,

00:00:38.445 --> 00:00:41.310
and this is called the root hash or the Merkle root.

00:00:41.310 --> 00:00:45.770
Now, they're constructed from the bottom up from hashes of individual transactions.

00:00:45.770 --> 00:00:48.860
Each leaf node is a hash of transactional data,

00:00:48.860 --> 00:00:52.115
and each non-leaf node is a hash of its previous hashes.

00:00:52.115 --> 00:00:57.110
Now, let's look at a couple of code samples here using how Merkle trees work.

00:00:57.110 --> 00:00:58.850
So, what we're going to do in this example,

00:00:58.850 --> 00:01:00.620
roughly we're actually going to create our own Merkle tree,

00:01:00.620 --> 00:01:02.750
and I'll show you exactly the function that we do that,

00:01:02.750 --> 00:01:06.930
and then we're going to create a Merkle root from it. So, let's get started.

00:01:06.930 --> 00:01:09.200
So, if you see the first thing that we'll of course need

00:01:09.200 --> 00:01:11.615
is the module which is called merkletreejs.

00:01:11.615 --> 00:01:14.434
So, npm installed merkeltreejs,

00:01:14.434 --> 00:01:16.295
and you're going to require the module,

00:01:16.295 --> 00:01:20.150
and this is a module that actually helps us create a Merkle tree,

00:01:20.150 --> 00:01:23.490
and the next one that you'll need is a crypto module,

00:01:23.490 --> 00:01:25.130
and this is for hashing, so,

00:01:25.130 --> 00:01:27.280
this npm install crypto, so, again,

00:01:27.280 --> 00:01:29.780
this module just provides cryptographic functionality.

00:01:29.780 --> 00:01:31.910
So, we are going to require both of these modules,

00:01:31.910 --> 00:01:34.475
and just defining bunch of variables,

00:01:34.475 --> 00:01:37.055
leaves, tree, layers, root, proof, and verified.

00:01:37.055 --> 00:01:41.240
Now, this is the function that is used for hashing leaves and nodes.

00:01:41.240 --> 00:01:43.070
So, we're passing information

00:01:43.070 --> 00:01:45.140
to it and we're going to call this function from right here,

00:01:45.140 --> 00:01:47.495
and so we're just calling this function.

00:01:47.495 --> 00:01:50.465
What this function is doing, first of all,

00:01:50.465 --> 00:01:52.160
crypto is the module that we're calling,

00:01:52.160 --> 00:01:55.670
and then the createHash method is to use to create hash instances.

00:01:55.670 --> 00:01:59.060
Now, after we have a hash instance,

00:01:59.060 --> 00:02:03.550
we have the update method that updates the hash content by the given data.

00:02:03.550 --> 00:02:06.660
Then for the recalculate the digest of all the data

00:02:06.660 --> 00:02:10.240
passed to hashed function using the hashtag.update method,

00:02:10.240 --> 00:02:11.690
and then of course the digest method.

00:02:11.690 --> 00:02:13.550
So, this is just a simple way that you're going to

00:02:13.550 --> 00:02:16.565
create a hash of any data that's passed in.

00:02:16.565 --> 00:02:18.500
Once we have that,

00:02:18.500 --> 00:02:19.670
and so what I'm doing,

00:02:19.670 --> 00:02:21.710
is that I'm just taking some random sample data,

00:02:21.710 --> 00:02:23.915
you can always try it with any data you want to.

00:02:23.915 --> 00:02:26.360
So, have a function that's called createLeaves,

00:02:26.360 --> 00:02:28.500
and I am just taking an array of a,

00:02:28.500 --> 00:02:31.560
b, c, three values and I'm mapping through them,

00:02:31.560 --> 00:02:34.760
and I'm individually hashing every single value.

00:02:34.760 --> 00:02:37.145
That means, a is being hashed, b is being hashed,

00:02:37.145 --> 00:02:41.570
c is being hashed, and then I'm putting all the hashes in an array.

00:02:41.570 --> 00:02:43.205
So, I'm just creating an array of hash leaves.

00:02:43.205 --> 00:02:46.130
So, I'm passing this to my function sha256.

00:02:46.130 --> 00:02:47.855
Every single a, b, c,

00:02:47.855 --> 00:02:50.000
in all the values, and I am just putting in.

00:02:50.000 --> 00:02:51.880
I'm also doing a console.log.

00:02:51.880 --> 00:02:55.085
Then, this is the main function that actually creates the tree.

00:02:55.085 --> 00:02:59.270
So, this is the function that creates a new Merkle tree with the hashed leaves.

00:02:59.270 --> 00:03:03.275
So, if you see I'm passing the array and then I'm also passing a hashed function,

00:03:03.275 --> 00:03:04.820
the hashing function over here,

00:03:04.820 --> 00:03:06.080
and it just creates a tree.

00:03:06.080 --> 00:03:07.460
So, new Merkle tree,

00:03:07.460 --> 00:03:09.875
and that's the syntax you pass your leaves,

00:03:09.875 --> 00:03:12.260
whatever data that you wanted to pass the hashed one,

00:03:12.260 --> 00:03:15.010
and then you pass also the hashing algorithm.

00:03:15.010 --> 00:03:18.220
Then, we also, again, that's not important,

00:03:18.220 --> 00:03:21.050
but I just wanted to show you there are bunch of functions you can actually call,

00:03:21.050 --> 00:03:23.630
on a Merkle tree, there's a function called getLeaves,

00:03:23.630 --> 00:03:27.350
it just outputs all the leaves that you just created using the hash,

00:03:27.350 --> 00:03:28.975
and then it can also get layers,

00:03:28.975 --> 00:03:32.690
and it just returns all the layers of the Merkle tree including leaves and roots.

00:03:32.690 --> 00:03:34.850
But this is an important one that I want you to look at.

00:03:34.850 --> 00:03:36.725
So, I have a function that I'm calling getRoot.

00:03:36.725 --> 00:03:39.550
In this, I'm calling tree.getRoot.

00:03:39.550 --> 00:03:42.695
This is what actually creates the real Merkle root hash.

00:03:42.695 --> 00:03:46.940
So, it just hashes all the pairs to individually down to just one Merkle root hash.

00:03:46.940 --> 00:03:51.170
So, that's the function. Now, and I'm going to show you that you can always trace back.

00:03:51.170 --> 00:03:53.105
So, once you create a Merkle tree,

00:03:53.105 --> 00:03:57.005
you can always trace back to an individual node and compare values.

00:03:57.005 --> 00:03:59.485
So, the function is called getProof.

00:03:59.485 --> 00:04:02.745
Okay. So, I'm going to call three.getProof and I'm passing leaves

00:04:02.745 --> 00:04:06.615
the second or the second element from the array,

00:04:06.615 --> 00:04:09.240
leaves two, and I'm getting the proof out.

00:04:09.240 --> 00:04:10.850
What I'm doing in this function,

00:04:10.850 --> 00:04:16.010
I'm actually verifying if the proof matches my initial value that was stored in my array.

00:04:16.010 --> 00:04:18.965
This is the format or the syntax of the function.

00:04:18.965 --> 00:04:23.975
So, again, this is going to return true if the proof matches the target node.

00:04:23.975 --> 00:04:29.690
So, just tree.verify, and then you pass in the proof and to what you were comparing to,

00:04:29.690 --> 00:04:32.630
and then your Merkle root. So, let's go try it.

00:04:32.630 --> 00:04:34.885
I'm just calling all these function in this order here.

00:04:34.885 --> 00:04:37.770
Again, some of the bottom function are just for demonstration purposes,

00:04:37.770 --> 00:04:39.764
but the real one is createLeaves,

00:04:39.764 --> 00:04:41.970
getRoot, getProof, and VerifyNode.

00:04:41.970 --> 00:04:44.250
So, we're just doing that, but I just also wanted to show you they can

00:04:44.250 --> 00:04:47.370
always get your trees and layers,

00:04:47.370 --> 00:04:48.555
and all that stuff too.

00:04:48.555 --> 00:04:51.460
So, let's go and run this function now.

00:04:53.090 --> 00:04:57.090
So, again lot of information, you can always scroll up so to look at it.

00:04:57.090 --> 00:04:58.290
So, the first one that we're having,

00:04:58.290 --> 00:04:59.865
we're just outputting the leaves,

00:04:59.865 --> 00:05:03.090
and this is the tree that was created, Merkle tree,

00:05:03.090 --> 00:05:05.385
and then those are the layers of the tree,

00:05:05.385 --> 00:05:09.495
and then we're also putting out the leaves,

00:05:09.495 --> 00:05:13.760
and then the next thing that we're also doing is this is the root.

00:05:13.760 --> 00:05:16.430
This is the root. Remember, we're doing a console.log on the root.

00:05:16.430 --> 00:05:18.635
So, this is a mean Merkle root that's created,

00:05:18.635 --> 00:05:20.465
a hash of the Merkle root.

00:05:20.465 --> 00:05:22.880
So, if you see, the answer comes to be true.

00:05:22.880 --> 00:05:24.545
That means it is verified to be true,

00:05:24.545 --> 00:05:28.170
and what we did is that we just compared our hash.

00:05:28.170 --> 00:05:29.730
So, we're just getting it down.

00:05:29.730 --> 00:05:31.470
So, from the Merkle root,

00:05:31.470 --> 00:05:35.180
we're actually comparing if the proof of this matches initial value which it does.

00:05:35.180 --> 00:05:39.290
So, I'm actually now going to show you to change this and see if we get false.

00:05:39.290 --> 00:05:42.095
Remember, so this proof is getting from leaves two.

00:05:42.095 --> 00:05:45.680
Let's actually go compare it to leaves one and see what happens.

00:05:45.680 --> 00:05:48.540
Of course, it's going to fill in that case.

00:05:48.540 --> 00:05:51.655
Let's go save our file and run our file again.

00:05:51.655 --> 00:05:55.435
Let me just go on the top of the screen so you can see me better.

00:05:55.435 --> 00:05:57.780
So, if you see it,

00:05:57.780 --> 00:06:00.450
it is false now. So, it fills.

00:06:00.450 --> 00:06:03.620
So, again that is exactly the way that you can actually trace back

00:06:03.620 --> 00:06:09.060
and make sure that all the roots in the nodes are traced back from the Merkle root.

