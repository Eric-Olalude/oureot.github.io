WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.850
Welcome back. Hopefully, you learned a lot from

00:00:02.850 --> 00:00:05.610
the two examples shown so far throughout this lesson.

00:00:05.610 --> 00:00:09.630
The goal was to help you learn these examples but also to help convince you just

00:00:09.630 --> 00:00:14.025
how important it actually is to make sure you're up on the latest research in this field.

00:00:14.025 --> 00:00:17.190
As you'll see, there are many other ways contracts can be

00:00:17.190 --> 00:00:20.895
hacked and it really takes seeing them to understand how it could happen.

00:00:20.895 --> 00:00:23.580
For that reason, the rest of this lesson won't do

00:00:23.580 --> 00:00:26.295
the same deep dives on every single possibility.

00:00:26.295 --> 00:00:30.615
Instead, I'll guide you towards the resources research, best practices,

00:00:30.615 --> 00:00:32.280
and tools needed to help put you in

00:00:32.280 --> 00:00:36.075
the best possible position to continue learning these ideas in the future.

00:00:36.075 --> 00:00:38.850
This will help ensure you're set up for success well

00:00:38.850 --> 00:00:42.020
beyond this lesson to utilize these resources for yourself.

00:00:42.020 --> 00:00:43.940
To start, in this video,

00:00:43.940 --> 00:00:46.130
we'll head over to the solidity documentation

00:00:46.130 --> 00:00:48.350
to see their written security considerations,

00:00:48.350 --> 00:00:50.525
common patterns, and style guides.

00:00:50.525 --> 00:00:51.880
As we get to each of them,

00:00:51.880 --> 00:00:53.960
I'll describe in a little more detail how you can

00:00:53.960 --> 00:00:57.305
utilize these to build more secure smart contracts.

00:00:57.305 --> 00:01:00.335
First, let's head over to the solidity site.

00:01:00.335 --> 00:01:04.280
You can find the link to their security considerations down below the video.

00:01:04.280 --> 00:01:06.919
Take some time now to read through this page,

00:01:06.919 --> 00:01:08.740
they update their documentation often,

00:01:08.740 --> 00:01:10.010
so by the time you read this,

00:01:10.010 --> 00:01:12.575
it may look a little different than mine does now.

00:01:12.575 --> 00:01:16.130
But as it is now, there's a few things I'd like to call out.

00:01:16.130 --> 00:01:19.370
For one, re-entrancy is the name of the attack that

00:01:19.370 --> 00:01:22.610
was used for the DAO attack that we discussed earlier in the lesson.

00:01:22.610 --> 00:01:24.815
You really start seeing this everywhere now.

00:01:24.815 --> 00:01:28.130
It's one of the most famous attacks that have happened on the network.

00:01:28.130 --> 00:01:30.770
This example isn't exactly the same as we went

00:01:30.770 --> 00:01:33.665
over and it goes about it in a slightly different way.

00:01:33.665 --> 00:01:36.350
See if you can apply what you learned earlier to find

00:01:36.350 --> 00:01:39.440
the similarity between the DAO attack and this code here.

00:01:39.440 --> 00:01:41.900
Below that, you'll see a few new things like

00:01:41.900 --> 00:01:45.095
gas limits and loops and sending and receiving ether.

00:01:45.095 --> 00:01:49.460
Another thing to note is that this callstack depth section is obsolete.

00:01:49.460 --> 00:01:51.890
This security vulnerability was fixed using

00:01:51.890 --> 00:01:55.730
EIP-150 and is no longer a problem with smart contracts.

00:01:55.730 --> 00:01:59.875
It does help to look over it if you like just to see how it did work in the past.

00:01:59.875 --> 00:02:04.700
Finally, check out the recommendations they provide on how to make contracts more secure.

00:02:04.700 --> 00:02:07.040
This will continue to develop over time and

00:02:07.040 --> 00:02:10.255
provides great guidance on how to build secure contracts.

00:02:10.255 --> 00:02:14.570
Next, the common patterns sections isn't necessarily about security,

00:02:14.570 --> 00:02:17.945
but it helps you understand ways to take common actions with your contract.

00:02:17.945 --> 00:02:20.480
This will keep you from needing to reinvent these ideas

00:02:20.480 --> 00:02:22.910
in ways that may end up with security vulnerabilities.

00:02:22.910 --> 00:02:24.965
So, it's worth taking a look.

00:02:24.965 --> 00:02:27.920
You'll find guidance on things like how to withdraw from

00:02:27.920 --> 00:02:30.950
contracts and restrict access on this page.

00:02:30.950 --> 00:02:34.700
Finally, the style guide is another section that's worth looking at.

00:02:34.700 --> 00:02:36.530
Again, this has more to do with

00:02:36.530 --> 00:02:39.650
general programming guidelines but as far as I'm concerned,

00:02:39.650 --> 00:02:42.305
it absolutely has to do with security as well.

00:02:42.305 --> 00:02:45.780
The better you follow the guidelines necessary for making contracts,

00:02:45.780 --> 00:02:48.320
the more easy it is to read the contract.

00:02:48.320 --> 00:02:52.430
Later in this lesson, we'll get into contract auditing and bug bounties which are

00:02:52.430 --> 00:02:56.735
ways to get community support on identifying vulnerabilities within your contract.

00:02:56.735 --> 00:03:00.035
These services are a great way to ensure that your contract has been

00:03:00.035 --> 00:03:03.320
audit by professionals and the easier it is for them to read,

00:03:03.320 --> 00:03:05.440
the more effectively there'll be able to help you.

00:03:05.440 --> 00:03:08.120
So, you should always follow coding guidelines.

00:03:08.120 --> 00:03:10.160
But in this case, I wanted to point out that they

00:03:10.160 --> 00:03:12.605
can help with the security of your contract too.

00:03:12.605 --> 00:03:14.930
So, that's it for the documentation.

00:03:14.930 --> 00:03:18.370
There's plenty of information here and a lot of information about security.

00:03:18.370 --> 00:03:20.870
Hopefully, I helped focus your attention enough that

00:03:20.870 --> 00:03:23.510
you're not overwhelmed with the amount of documentation here.

00:03:23.510 --> 00:03:26.090
You can take some time to read this now and continue

00:03:26.090 --> 00:03:28.940
revisiting the material as solidity continues to evolve.

