WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.934
Welcome back. Hopefully you had some time to think about the vulnerability in this code.

00:00:04.934 --> 00:00:06.614
If you didn't get it that's fine.

00:00:06.615 --> 00:00:08.085
We'll go over the answer now.

00:00:08.085 --> 00:00:11.700
To see what's wrong with the code let's walk through what's actually happening here.

00:00:11.699 --> 00:00:13.769
Like we said earlier it all makes sense.

00:00:13.769 --> 00:00:15.990
Set the balance that sender has contributed,

00:00:15.990 --> 00:00:19.019
set there wallet address then return the Ether.

00:00:19.019 --> 00:00:21.269
The problem is you don't ever know exactly how

00:00:21.269 --> 00:00:23.730
a while it will choose to interact with your contract.

00:00:23.730 --> 00:00:26.640
They might do something completely different than you had expected.

00:00:26.640 --> 00:00:29.414
In this case, the problem is right here.

00:00:29.414 --> 00:00:34.140
In this line payout is calling a function that exists within the contributing wallet.

00:00:34.140 --> 00:00:36.840
Once calling that wallet we're leaving it up to its function

00:00:36.840 --> 00:00:39.755
to determine what commands exist inside of that wallet.

00:00:39.755 --> 00:00:43.190
What if for instance the function in the contributing wallet were

00:00:43.189 --> 00:00:46.699
to call the withdrawal coins function from this fundraiser contract.

00:00:46.700 --> 00:00:50.050
In this case, the withdrawal coins function would start over,

00:00:50.049 --> 00:00:53.089
this happens before the balances ever set to zero.

00:00:53.090 --> 00:00:56.195
If we can do this over and over we'll continue taking

00:00:56.195 --> 00:00:59.554
Ether potentially until we drain the entire contract.

00:00:59.554 --> 00:01:02.975
So, that's it, that's the secret of how this code the Dao

00:01:02.975 --> 00:01:06.269
resulted in the loss of around $60 million and Ether,

00:01:06.269 --> 00:01:07.560
it's really that simple,

00:01:07.560 --> 00:01:11.435
and it's a great example of how easily something like this can be overlooked.

00:01:11.435 --> 00:01:15.650
Before we move on there's a couple more steps I'd like you to get some experience with.

00:01:15.650 --> 00:01:17.420
Now that you know the vulnerability,

00:01:17.420 --> 00:01:19.549
see if you can write the code into the wallet

00:01:19.549 --> 00:01:21.799
that would actually exploit the weakness shown here.

00:01:21.799 --> 00:01:25.090
To do that you can copy the code down below over to re-mix,

00:01:25.090 --> 00:01:28.280
from there write a few lines of code into the wallet contract.

00:01:28.280 --> 00:01:32.659
Once you're don, e deploy each wallet then use them to interact with each other.

00:01:32.659 --> 00:01:36.530
One tip I'll give ahead of time is that you can't just withdraw infinitely,

00:01:36.530 --> 00:01:39.230
and lists execution of the function within the contract will

00:01:39.230 --> 00:01:42.355
max out the contracts capacity resulting in an error.

00:01:42.355 --> 00:01:44.990
Like before we'll go over this in the next video,

00:01:44.989 --> 00:01:47.969
but see if you can get the solution ahead of time to get some practice.

