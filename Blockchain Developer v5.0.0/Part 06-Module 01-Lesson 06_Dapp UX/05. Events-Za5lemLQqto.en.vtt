WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.714
Next topic is events.

00:00:02.714 --> 00:00:09.794
Unlike real-world events blockchain events happen in large numbers sometimes.

00:00:09.794 --> 00:00:13.949
One transaction might cause a lot of events to happen.

00:00:13.949 --> 00:00:19.379
One of the best things you can do as a DAPP developer is to ensure that you

00:00:19.379 --> 00:00:25.515
provide from the very beginning in your app an ability to easily surface the events.

00:00:25.515 --> 00:00:32.100
Whether that is a indicator that goes to a different view or you have chose,

00:00:32.100 --> 00:00:36.530
you need to have the ability to make sure these events are surfaced.

00:00:36.530 --> 00:00:38.435
Now, this is a double-edged sword.

00:00:38.435 --> 00:00:40.400
You want to surface the events,

00:00:40.399 --> 00:00:42.634
but you also do not want to annoy the user.

00:00:42.634 --> 00:00:44.750
So it's very important that if you do have

00:00:44.750 --> 00:00:48.365
a mechanism such as a toast mechanism to surface events,

00:00:48.365 --> 00:00:54.510
and the results to the user that you also have the ability to group them,

00:00:54.509 --> 00:00:58.039
to filter them, and potentially to have the user squelch them.

00:00:58.039 --> 00:01:00.259
So events can be very important,

00:01:00.259 --> 00:01:02.659
because they can give the user that

00:01:02.659 --> 00:01:06.649
confidence that is not possible to get with DAPPS today,

00:01:06.650 --> 00:01:11.600
as opposed to mobile apps and web apps where the feedback is very instant and you can

00:01:11.599 --> 00:01:14.704
have things like on a mobile app you

00:01:14.704 --> 00:01:18.495
might shake the screen if something bad is happening,

00:01:18.495 --> 00:01:22.390
on a web app you might show something full-screen etc.

00:01:22.390 --> 00:01:25.549
It's really hard to do in a DAPP when the user might be in

00:01:25.549 --> 00:01:29.284
the middle of some important task and maybe an event notification comes in,

00:01:29.284 --> 00:01:32.299
that a prior transaction is completed.

00:01:32.299 --> 00:01:34.299
You do not want to disturb them,

00:01:34.299 --> 00:01:36.274
yet, you do want to communicate that.

00:01:36.275 --> 00:01:41.420
So choose carefully and you should be able to come up with

00:01:41.420 --> 00:01:48.070
a balance where you don't have the user barraged with a lot of event notifications,

00:01:48.069 --> 00:01:52.054
but you also can make sure that they get the important information.

00:01:52.055 --> 00:01:53.390
One way to do that,

00:01:53.390 --> 00:01:57.234
is in your smart contract code

00:01:57.234 --> 00:02:02.989
perhaps makes sure that every event has some user priority indicator,

00:02:02.989 --> 00:02:06.920
that way front-end apps which you may not have control over,

00:02:06.920 --> 00:02:12.259
can consume and use to determine is this something that's super-critical that must be

00:02:12.259 --> 00:02:17.944
shown to the user immediately or is this just this thing happened we let it go.

00:02:17.944 --> 00:02:21.215
So those are some techniques you can use.

00:02:21.215 --> 00:02:28.414
I really like using a standard value that in the events that are emitted that

00:02:28.414 --> 00:02:36.870
is explicitly designed for client apps to consume to determine what action to take.

