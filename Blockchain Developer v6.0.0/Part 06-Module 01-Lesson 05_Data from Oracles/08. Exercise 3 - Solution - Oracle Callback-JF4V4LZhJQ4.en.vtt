WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.544
Let's look at our code and implement the changes required for this exercise.

00:00:07.544 --> 00:00:11.879
One of the things we want to do here is to ensure that

00:00:11.880 --> 00:00:20.130
the responses only come in from oracles that match,

00:00:20.129 --> 00:00:23.384
then we want to also introduce the key here.

00:00:23.385 --> 00:00:29.415
So for the key, one of the easiest things to do is to grab the code that's right here,

00:00:29.414 --> 00:00:32.170
and just modify it slightly.

00:00:32.600 --> 00:00:38.145
So we'll put that there and we need the key

00:00:38.145 --> 00:00:44.240
to contain the index also so we'll put that in there.

00:00:44.240 --> 00:00:45.649
So now that we have that,

00:00:45.649 --> 00:00:49.969
we want to have a require statement that checks that

00:00:49.969 --> 00:00:55.170
the oracle that is submitting their response is actually authorized,

00:00:55.170 --> 00:00:58.950
if you will, to submit this.

00:00:58.950 --> 00:01:02.290
So we'll check that out.

00:01:04.549 --> 00:01:11.060
Sorry, the authorization is already done here, I misspoke.

00:01:11.060 --> 00:01:13.840
So here, we're going to check that it's open.

00:01:13.840 --> 00:01:25.469
So, in some fashion,

00:01:25.469 --> 00:01:31.789
there was an invalid key or it's not open,

00:01:31.790 --> 00:01:34.355
it might have already been completed.

00:01:34.355 --> 00:01:40.670
So we let that go and now we want to make sure

00:01:40.670 --> 00:01:46.490
that any applications that are listening

00:01:46.489 --> 00:01:50.000
in are informed about

00:01:50.000 --> 00:01:55.745
the flight status info and the information that's communicated is going to be the flight,

00:01:55.745 --> 00:01:59.584
the timestamp, the status ID,

00:01:59.584 --> 00:02:04.225
that is being reported and in the first one here,

00:02:04.224 --> 00:02:08.900
the length of our responses has exceeded the min responses,

00:02:08.900 --> 00:02:10.775
so it's going to be true.

00:02:10.775 --> 00:02:14.129
But in the else condition,

00:02:15.680 --> 00:02:22.810
the length has not yet been exceeded and so we'll make that false.

00:02:22.810 --> 00:02:29.099
So let's compile and that works,

00:02:29.099 --> 00:02:32.840
let's take a quick peek at the test code now that we've

00:02:32.840 --> 00:02:35.509
completed all the modifications that are

00:02:35.509 --> 00:02:38.209
needed and see what's going to happen when we run that.

00:02:38.210 --> 00:02:41.435
So the registration of the oracles happens there.

00:02:41.435 --> 00:02:45.090
But here, we start doing the arrangement,

00:02:45.090 --> 00:02:48.360
we have a flight for ND one,

00:02:48.360 --> 00:02:51.650
that's nano degree 1309, the course number.

00:02:51.650 --> 00:02:55.215
We pick a current timestamp,

00:02:55.215 --> 00:02:59.099
JavaScript timestamps are in milliseconds,

00:02:59.099 --> 00:03:05.013
and in Solidity the timestamp is seconds so we do that little conversion

00:03:05.014 --> 00:03:13.640
there and what is going to happen here is we're going to put in a request.

00:03:13.639 --> 00:03:18.214
So this would be analogous to a user triggering or your code

00:03:18.215 --> 00:03:23.180
on the client application triggering or request for the status of a particular flight.

00:03:23.180 --> 00:03:27.020
So since flight numbers are not unique

00:03:27.020 --> 00:03:32.020
enough to get status information from most APIs out there,

00:03:32.020 --> 00:03:33.650
we also put in the timestamps.

00:03:33.650 --> 00:03:37.145
So it gives us a general idea of when that flight is supposed to be.

00:03:37.145 --> 00:03:42.455
Then what we do is we go ahead and start notifying all the oracles.

00:03:42.455 --> 00:03:46.250
I said all the oracles when all this time we've been talking about,

00:03:46.250 --> 00:03:49.439
"Well, it needs to be a limited number of oracles."

00:03:49.439 --> 00:03:51.859
So here's what's happening in this test code.

00:03:51.860 --> 00:03:53.900
We're going to simultaneously test,

00:03:53.900 --> 00:03:56.929
not only the ability for the oracles to work,

00:03:56.929 --> 00:04:00.574
but we're also going to test a defensive coding.

00:04:00.574 --> 00:04:05.269
What that means is we are going to get every oracle that has been

00:04:05.270 --> 00:04:12.155
registered and we're going to go ahead and submit the job for them.

00:04:12.155 --> 00:04:18.949
The idea is that the key that we set the index that limits

00:04:18.949 --> 00:04:26.784
their ability to access should prevent them from actually getting that notification.

00:04:26.785 --> 00:04:30.345
So when they do get a notification,

00:04:30.345 --> 00:04:34.985
they will call in and that's what will actually be prevented from occurring.

00:04:34.985 --> 00:04:37.925
So let's go ahead and run this test.

00:04:37.925 --> 00:04:40.670
I'm going to expand the window.

00:04:40.670 --> 00:04:43.830
Now because we are using a lot of events here,

00:04:43.829 --> 00:04:49.189
there's a fair bit of asynchronous stuff going on and so we have to

00:04:49.189 --> 00:04:55.160
rely on Truffle generating those event notifications when they occur.

00:04:55.160 --> 00:04:56.460
But in my experience,

00:04:56.459 --> 00:05:01.069
that doesn't happen very reliably all the time and in fact not only does it not

00:05:01.069 --> 00:05:05.805
happen very reliably in the development environment also on mainland,

00:05:05.805 --> 00:05:10.050
in production, there different rules for the different networks about

00:05:10.050 --> 00:05:16.439
which events they will publish on which events they want.

00:05:16.439 --> 00:05:18.899
So let's look at the log that has happened here.

00:05:18.899 --> 00:05:21.974
So the oracle requested,

00:05:21.975 --> 00:05:24.330
index assigned was zero,

00:05:24.329 --> 00:05:28.829
the flight and timestamp was requested and we had one,

00:05:28.829 --> 00:05:34.019
two, three, four oracles comeback and respond.

00:05:34.019 --> 00:05:39.459
When we crossed the threshold from the third one to the fourth one,

00:05:43.730 --> 00:05:46.530
we went from unverified to verified.

00:05:46.529 --> 00:05:50.104
Now let's validate that our security is working.

00:05:50.105 --> 00:05:51.485
If it is working,

00:05:51.485 --> 00:05:59.840
we should find only four oracles here that have the the index zero appear anywhere.

00:05:59.839 --> 00:06:03.229
So there's one, there's two,

00:06:03.230 --> 00:06:08.210
there's three, there's four, and there's five.

00:06:08.209 --> 00:06:14.644
Now the fifth one most likely did report in,

00:06:14.644 --> 00:06:20.689
but because our threshold had already been crossed, it was ignored.

00:06:20.689 --> 00:06:26.344
So that's the gist of the oracle service working.

00:06:26.345 --> 00:06:31.375
What we've done is we've simulated here not only the smart contract.

00:06:31.375 --> 00:06:33.355
Well, the smart contract is actual code,

00:06:33.355 --> 00:06:37.670
but we've essentially simulated the client and the server side of things.

00:06:37.670 --> 00:06:38.915
In the next lesson,

00:06:38.915 --> 00:06:42.439
when we get closer to our final project,

00:06:42.439 --> 00:06:46.879
we're going to continue building upon this code and move some

00:06:46.879 --> 00:06:51.420
of the code that we're testing through Truffle right now,

00:06:51.420 --> 00:06:56.960
to a separate node service.

00:06:56.959 --> 00:07:02.419
So let's now go back and take a quick quiz.

00:07:02.420 --> 00:07:08.400
What is the cheapest way to store information in Ethereum smart contracts?

