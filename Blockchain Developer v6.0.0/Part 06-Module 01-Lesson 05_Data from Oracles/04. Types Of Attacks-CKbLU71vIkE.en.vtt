WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.905
Let's now look at the types of attacks that Oracles might be subject to.

00:00:04.905 --> 00:00:08.359
There are five basic types: Sybil attacks,

00:00:08.359 --> 00:00:14.289
cartel attacks, mirroring, freeloading, and privacy.

00:00:14.289 --> 00:00:19.649
Sybil attacks are named after a character of a book,

00:00:19.649 --> 00:00:23.265
a woman who had a multiple personality disorder.

00:00:23.265 --> 00:00:28.649
So that should tell you a little bit about the nature of this particular attack.

00:00:28.649 --> 00:00:35.704
Essentially, a single entity attempts to be multiple entities.

00:00:35.704 --> 00:00:40.759
So if you have a scenario where the ability to impersonate users

00:00:40.759 --> 00:00:46.320
or to create fake personas has no cost or has a very low cost,

00:00:46.320 --> 00:00:50.329
it incentivizes people to create Sybil attacks,

00:00:50.329 --> 00:00:53.119
where a single entity might create hundreds,

00:00:53.119 --> 00:01:00.364
thousands of accounts and use those to influence some action.

00:01:00.365 --> 00:01:02.103
In the case of Oracles,

00:01:02.103 --> 00:01:05.944
perhaps there is a game or a lottery,

00:01:05.944 --> 00:01:13.354
and the larger number of participants could influence who wins or who gains money.

00:01:13.355 --> 00:01:16.730
So that's the basic purpose of a Sybil attack.

00:01:16.730 --> 00:01:21.590
It's one entity that pretends to be many entities.

00:01:21.590 --> 00:01:25.490
A cartel attack is as you might have

00:01:25.489 --> 00:01:30.319
guessed from watching Hollywood movies when you talk about the drug cartels etc,

00:01:30.319 --> 00:01:33.019
it's where a group of people,

00:01:33.019 --> 00:01:37.849
maybe a group of people with malicious intent who are in the oracles business,

00:01:37.849 --> 00:01:45.349
they essentially collude to create scenarios and to create outcomes that favor them.

00:01:45.349 --> 00:01:52.199
Mirroring is a type of attack in which multiple nodes,

00:01:52.200 --> 00:01:56.734
multiple Oracles will essentially just do what others do,

00:01:56.734 --> 00:01:58.954
and in doing so,

00:01:58.954 --> 00:02:02.914
tip the balance, influence the outcome of things.

00:02:02.915 --> 00:02:09.625
Freeloading is when an Oracle requires certain work to be done,

00:02:09.625 --> 00:02:13.719
which might cost money or funds in Cryptocurrency.

00:02:13.719 --> 00:02:17.419
What freeloading Oracles do is they basically steal

00:02:17.419 --> 00:02:21.849
the output of another Oracle and present it as their own,

00:02:21.849 --> 00:02:26.030
but without paying the cost of having done whatever work needed to be done.

00:02:26.030 --> 00:02:28.460
So what that does is potentially reduce

00:02:28.460 --> 00:02:32.080
the quality of information you will get from your Oracle.

00:02:32.080 --> 00:02:34.880
Privacy, this is where an Oracle takes

00:02:34.879 --> 00:02:39.349
undue advantage of access it might have to certain data,

00:02:39.349 --> 00:02:43.250
and inverse or directly accesses

00:02:43.250 --> 00:02:48.110
confidential data that it should not have in order to tip the scales.

00:02:48.110 --> 00:02:50.120
If you notice in all of these attacks,

00:02:50.120 --> 00:02:52.969
the root idea is,

00:02:52.969 --> 00:02:56.539
how can you influence the outcome based on

00:02:56.539 --> 00:03:00.364
the input that the oracle is providing to the Smart Contract?

00:03:00.365 --> 00:03:02.770
So that's the common thread that goes through all of them,

00:03:02.770 --> 00:03:06.140
and it's just slightly different variance of each one.

00:03:06.139 --> 00:03:10.159
Now, let's look at how you might go about preventing such attacks.

00:03:10.159 --> 00:03:13.064
So there's three ways. The first is,

00:03:13.064 --> 00:03:17.495
you could block the means of communication with other Oracles.

00:03:17.495 --> 00:03:23.030
So if you provide the Oracles with no way to communicate with

00:03:23.030 --> 00:03:28.939
each other because there's just no mechanism provided by the smart contract to do so,

00:03:28.939 --> 00:03:35.585
you greatly reduce the ability of them to collude and to influence outcomes.

00:03:35.585 --> 00:03:37.640
The second point here,

00:03:37.639 --> 00:03:40.744
the ability to identify the Oracles is important.

00:03:40.745 --> 00:03:44.930
If it is impossible for one Oracle to even know that

00:03:44.930 --> 00:03:49.295
another account participating in the Smart Contract is an Oracle,

00:03:49.294 --> 00:03:53.149
that greatly increases your security and greatly

00:03:53.150 --> 00:03:58.455
decreases their ability to communicate with other Oracles.

00:03:58.455 --> 00:04:02.880
Now, while blockchain data is public inherently,

00:04:02.879 --> 00:04:06.754
there are techniques you can use such as hashing,

00:04:06.754 --> 00:04:13.219
where the answers submitted by other Oracles are not visible to their peers.

00:04:13.219 --> 00:04:17.839
When this happens, it makes it easy for Oracles to influence outcomes

00:04:17.839 --> 00:04:23.599
because they can just repeat the answers they see submitted from other oracles.

00:04:23.600 --> 00:04:26.615
But if it was possible to deny that capability,

00:04:26.615 --> 00:04:30.800
then you could be ensured that every Oracle is actually

00:04:30.800 --> 00:04:36.210
producing the output it is submitting to the Smart Contract on its own.

