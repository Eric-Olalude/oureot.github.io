WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.855
Now, let's take a look at the Smart Contract architecture

00:00:03.855 --> 00:00:08.700
for the exercises we are going to be working on today.

00:00:08.700 --> 00:00:16.425
So what you've seen here is the big picture of the Smart Contract we are building.

00:00:16.425 --> 00:00:19.950
On the left, you see the Smart Contract and there

00:00:19.950 --> 00:00:23.520
are three key functions that we want to address here.

00:00:23.520 --> 00:00:26.415
The first one is register Oracle.

00:00:26.415 --> 00:00:28.320
So in our smart contract,

00:00:28.320 --> 00:00:33.690
we have a process by which an Oracle must first register itself.

00:00:33.690 --> 00:00:37.700
Now, in the code that you're going to work with today,

00:00:37.700 --> 00:00:42.230
we require the Oracle to pay a fee in order to register as

00:00:42.230 --> 00:00:49.070
a deterrent to have Oracles that intend to do malicious harm to the Smart Contract.

00:00:49.070 --> 00:00:52.970
Having a prepayment necessary is a form of a stake.

00:00:52.970 --> 00:00:56.045
So the Oracle that registers itself

00:00:56.045 --> 00:00:59.645
for working with the Smart Contract has to provide one ether,

00:00:59.645 --> 00:01:03.620
and the ether can be used for different purposes.

00:01:03.620 --> 00:01:06.975
It could perhaps be used by the Smart Contract as a bounty.

00:01:06.975 --> 00:01:09.524
But for today's exercise,

00:01:09.524 --> 00:01:13.105
we'll just accept those funds and do nothing else with them.

00:01:13.105 --> 00:01:17.645
So that's the first step in the process the Oracle or Oracles.

00:01:17.645 --> 00:01:20.240
That's what the, and there represents,

00:01:20.240 --> 00:01:21.950
that there could be many of them and, in fact,

00:01:21.950 --> 00:01:25.340
you want many of them as we discussed earlier in

00:01:25.340 --> 00:01:29.045
order to minimize the trust you have to place on any single one.

00:01:29.045 --> 00:01:31.415
So the first step is to register.

00:01:31.415 --> 00:01:36.695
At which point, the register Oracle Function immediately returns

00:01:36.695 --> 00:01:43.080
three random integers to the Oracle ranging from 0-9.

00:01:43.080 --> 00:01:47.600
Now, this is a technique that we are going to use in the contract today.

00:01:47.600 --> 00:01:50.255
It doesn't necessarily mean it's the only way,

00:01:50.255 --> 00:01:52.490
it's in order to help you understand,

00:01:52.490 --> 00:01:56.870
how you could randomize Oracle participation and how you could

00:01:56.870 --> 00:02:01.430
ensure that Oracles cannot necessarily see each other's work.

00:02:01.430 --> 00:02:08.255
So by providing these index values to the Oracle what it does is it tells each Oracle,

00:02:08.255 --> 00:02:09.875
here are some keys.

00:02:09.875 --> 00:02:12.230
So you can think of the index values as keys,

00:02:12.230 --> 00:02:20.105
and you should only respond to requests for data when your key is part of that request.

00:02:20.105 --> 00:02:23.420
So you might have a 100 Oracles,

00:02:23.420 --> 00:02:28.345
but your index that you might use for a particular request might be five,

00:02:28.345 --> 00:02:30.650
and what that means is only the Oracles that have

00:02:30.650 --> 00:02:34.900
an index value of five should be the ones responding.

00:02:34.900 --> 00:02:39.155
So that's the first interaction back and forth register Oracle,

00:02:39.155 --> 00:02:41.770
the Oracle gets added to the Smart Contract,

00:02:41.770 --> 00:02:46.630
and the Smart Contract responds by giving the oracle three random values.

00:02:46.630 --> 00:02:50.050
The next step is fetched flight status.

00:02:50.050 --> 00:02:51.850
As I've mentioned several times,

00:02:51.850 --> 00:02:57.250
we are working at the end of this course and the final lesson on the project,

00:02:57.250 --> 00:03:00.100
that's called Flight Shorty, about flight insurance.

00:03:00.100 --> 00:03:02.770
So I thought it would be a good idea to

00:03:02.770 --> 00:03:06.985
introduce the concept of fetching the status of flight,

00:03:06.985 --> 00:03:09.100
departure, and arrival information.

00:03:09.100 --> 00:03:12.520
So while we are not interacting with external APIs today,

00:03:12.520 --> 00:03:17.470
we're still building up to that point by having a function that

00:03:17.470 --> 00:03:23.825
simulates fetching whether a flight departed or arrived on time.

00:03:23.825 --> 00:03:27.390
So with this particular function,

00:03:27.390 --> 00:03:30.000
it's the trigger for starting

00:03:30.000 --> 00:03:34.530
the Oracle life-cycle after the registration process has completed.

00:03:34.530 --> 00:03:37.580
The registration processes a onetime thing so you won't see again.

00:03:37.580 --> 00:03:43.790
The way the fetch flight status function would be triggered is by a client application.

00:03:43.790 --> 00:03:50.630
So it might be in the application that you have reached a point where you know

00:03:50.630 --> 00:03:54.350
the time at which a flight was supposed to depart has elapsed

00:03:54.350 --> 00:03:58.610
and so you can now go and fetch the flight status from an external entity.

00:03:58.610 --> 00:04:02.575
Now, ordinarily, if you had a web app it would be trivial,

00:04:02.575 --> 00:04:07.880
you would create a call using HTTP to

00:04:07.880 --> 00:04:10.205
a rest API and fetched the data

00:04:10.205 --> 00:04:13.250
assuming the license key and other things had been taking care of.

00:04:13.250 --> 00:04:16.705
You cannot do that in your Smart Contract. So how do you deal with it?

00:04:16.705 --> 00:04:20.660
Well, Smart Contracts do have a very nice mechanism for

00:04:20.660 --> 00:04:26.315
communicating with the outside world and that is in the form of asynchronous events.

00:04:26.315 --> 00:04:33.515
So the way it works is that your fetch flight status function would trigger an event,

00:04:33.515 --> 00:04:37.550
would emit specifically an event and in that,

00:04:37.550 --> 00:04:42.680
you would submit a request for a specific flight.

00:04:42.680 --> 00:04:44.885
As I mentioned earlier,

00:04:44.885 --> 00:04:52.160
a random index so that only a subset of all the oracles would process that request.

00:04:52.160 --> 00:04:56.330
So fetch flight status emits an event,

00:04:56.330 --> 00:04:59.120
event contains information about which flight,

00:04:59.120 --> 00:05:01.060
data is being sought.

00:05:01.060 --> 00:05:04.850
Oracle's, once they have registered should in

00:05:04.850 --> 00:05:09.410
theory be watching and monitoring for those events.

00:05:09.410 --> 00:05:12.590
So once they see that event occur on the Blockchain,

00:05:12.590 --> 00:05:17.885
they look at the log data and they see that the flight data that's requested.

00:05:17.885 --> 00:05:20.970
They see the index that's requested,

00:05:20.970 --> 00:05:24.800
and the third step in the process is the Oracle checks to any of

00:05:24.800 --> 00:05:30.020
my indexes that I was assigned when I registered match the index that is desired.

00:05:30.020 --> 00:05:33.740
If there is a match, it means the Oracle should now process

00:05:33.740 --> 00:05:38.150
that request and fetch the flight data that is requested.

00:05:38.150 --> 00:05:40.970
So what happens beyond the boundary of that

00:05:40.970 --> 00:05:44.180
Oracle is outside the purview of the Smart Contract,

00:05:44.180 --> 00:05:51.320
but what really happens is that it's got an API and it calls an API and fetches the data.

00:05:51.320 --> 00:05:53.435
So once that data is back,

00:05:53.435 --> 00:05:56.660
now the Oracle has to communicate that data

00:05:56.660 --> 00:06:00.050
back to the Smart Contract and that's where the third entity on the left,

00:06:00.050 --> 00:06:03.965
the submit Oracle response function comes into play.

00:06:03.965 --> 00:06:09.120
So the Oracle now submits the response to the Smart Contract.

00:06:09.120 --> 00:06:13.190
Now, this is the point at which the Smart Contract has to do some validation.

00:06:13.190 --> 00:06:17.315
Is this a legitimate Oracle that is communicating,

00:06:17.315 --> 00:06:20.710
is this an Oracle that is communicating the right data,

00:06:20.710 --> 00:06:26.680
is this one of the oracles that was tasked with providing this information, and so on.

00:06:26.680 --> 00:06:31.930
So there could be many checks like that before you accept that Oracles response.

00:06:31.930 --> 00:06:37.550
Now keep in mind that the scenario here displays one oracle,

00:06:37.550 --> 00:06:40.820
but really that one oracle represents n Oracles?

00:06:40.820 --> 00:06:46.865
So it has to repeat that process for any number of oracles that are providing data.

00:06:46.865 --> 00:06:48.695
In the Smart Contract,

00:06:48.695 --> 00:06:52.600
when you are using multiple Oracles you will need to build in

00:06:52.600 --> 00:06:58.145
rules for how to handle data that is different between Oracles,

00:06:58.145 --> 00:07:00.900
you also have to handle what is the threshold of crust,

00:07:00.900 --> 00:07:03.835
and what point do you consider that

00:07:03.835 --> 00:07:08.015
the data is good and you can move on and process that data.

00:07:08.015 --> 00:07:10.910
So typically, there will be a threshold similar to

00:07:10.910 --> 00:07:15.709
the multi-sig and multi-party consensus that was discussed in a prior lesson,

00:07:15.709 --> 00:07:17.975
where there's an m of n kind of scenario.

00:07:17.975 --> 00:07:20.479
So once you reach a certain threshold,

00:07:20.479 --> 00:07:26.615
the smart contract will then process that data and potentially emit another event.

00:07:26.615 --> 00:07:29.900
In this case, it would emit the flight status information it

00:07:29.900 --> 00:07:34.580
received which would be consumed by a client and displayed.

00:07:34.580 --> 00:07:40.310
But, another thing it could also do is trigger an internal process.

00:07:40.310 --> 00:07:44.375
For example, in the case of the flight status data,

00:07:44.375 --> 00:07:50.975
it would pay out any passengers that were due money if the flight had been delayed.

00:07:50.975 --> 00:07:53.990
So that's the overall scenario that we have here

00:07:53.990 --> 00:07:56.990
in the architecture of our Smart Contract,

00:07:56.990 --> 00:08:01.625
and that's exactly what we are going to work on building through the exercises.

00:08:01.625 --> 00:08:06.030
So before we get into the exercises, let's take a quiz.

00:08:06.250 --> 00:08:12.780
What is the primary difference between civil and cartel attacks?

