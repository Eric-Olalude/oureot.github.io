WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.780
All right. So, hopefully you had some time to think about the answer to this problem.

00:00:03.780 --> 00:00:06.210
Now, I'll show you how this hack happened.

00:00:06.210 --> 00:00:07.530
Once you understand it,

00:00:07.530 --> 00:00:11.655
it's really unique and interesting concept that hopefully sticks with you in the future.

00:00:11.655 --> 00:00:13.920
As I mentioned in the previous video,

00:00:13.920 --> 00:00:16.740
there's a way to take over this wallet entering the funds.

00:00:16.740 --> 00:00:20.865
Here's how you would do it. First, check out this fallback function.

00:00:20.865 --> 00:00:23.640
The function will be called anytime you make a call to

00:00:23.640 --> 00:00:27.735
this contract with a function name that doesn't exist within the contract.

00:00:27.735 --> 00:00:30.060
When you call that non-existing function,

00:00:30.060 --> 00:00:32.745
it will default to calling this fallback function.

00:00:32.745 --> 00:00:34.600
What someone could do in this case,

00:00:34.600 --> 00:00:36.890
is called the wallet contract with the name of

00:00:36.890 --> 00:00:39.475
the function that only exists in the library.

00:00:39.475 --> 00:00:42.070
Since that call doesn't exist in the wallet,

00:00:42.070 --> 00:00:46.550
it would default to the fallback function which delegates this call to the library.

00:00:46.550 --> 00:00:49.670
If the name of the function you call is say add owner,

00:00:49.670 --> 00:00:51.360
and you can supply it with your address,

00:00:51.360 --> 00:00:53.650
you just make yourself the owner of this wallet.

00:00:53.650 --> 00:00:55.790
From there, you can drain the funds from the wallet

00:00:55.790 --> 00:00:58.450
or transfer it to another wallet that you own.

00:00:58.450 --> 00:01:00.935
Hopefully, that's clear what's going on.

00:01:00.935 --> 00:01:04.670
Neither of these contracts actually contain the flaw by itself but

00:01:04.670 --> 00:01:06.770
the interaction between these contracts and

00:01:06.770 --> 00:01:09.290
the properties of fallback functions and delegate calls,

00:01:09.290 --> 00:01:13.975
allow someone to hack the wallet of users that made the use of this library.

00:01:13.975 --> 00:01:15.725
That's how the hack happened.

00:01:15.725 --> 00:01:18.275
This is different from the Dow in a few ways.

00:01:18.275 --> 00:01:20.390
One important thing to note that's different,

00:01:20.390 --> 00:01:24.155
is that the attack wasn't done on a single pooled resource of ether.

00:01:24.155 --> 00:01:26.390
In the Dow, users were sending money

00:01:26.390 --> 00:01:29.255
into a single contract that pulled everything together.

00:01:29.255 --> 00:01:33.845
This made it so that that single contract could be exploited to steal from this pool.

00:01:33.845 --> 00:01:35.660
The parody hack was different.

00:01:35.660 --> 00:01:38.090
In this case, individual users were using

00:01:38.090 --> 00:01:41.060
a library that made it possible to get their wallet hacked.

00:01:41.060 --> 00:01:42.410
When the attack happened,

00:01:42.410 --> 00:01:44.690
it was done to each of these wallets separately,

00:01:44.690 --> 00:01:46.690
draining accounts as it went along.

00:01:46.690 --> 00:01:49.010
This made it possible in some cases to

00:01:49.010 --> 00:01:51.620
save the accounts that would have otherwise been affected.

00:01:51.620 --> 00:01:56.250
If a trustworthy source were to exploit the vulnerability before the hackers got to it,

00:01:56.250 --> 00:01:58.970
they could funnel the money into a location that was safe.

00:01:58.970 --> 00:02:01.640
Then later return it to the owner of these wallets.

00:02:01.640 --> 00:02:03.619
I did hear that that actually happened,

00:02:03.619 --> 00:02:07.405
but I'm not sure if the money was actually ever returned to their original owners.

00:02:07.405 --> 00:02:08.810
Finally, if you'd like,

00:02:08.810 --> 00:02:12.020
I left a link to the original parity code down below the video.

00:02:12.020 --> 00:02:14.660
Try exploring this for yourself to see if you can spot

00:02:14.660 --> 00:02:18.530
the similarities between the live code and the smaller examples shown here.

00:02:18.530 --> 00:02:22.550
Personally, looking through this code gave me a better perspective on how complex

00:02:22.550 --> 00:02:24.950
these contracts can actually get and how something

00:02:24.950 --> 00:02:28.080
that seems simple now can easily go unnoticed.

