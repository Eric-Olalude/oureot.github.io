WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.879
Okay. So, now, we've seen how we decode artifacts,

00:00:02.879 --> 00:00:05.144
which is a JSON representation of the contract.

00:00:05.144 --> 00:00:07.589
Now, we have just one test to write in here.

00:00:07.589 --> 00:00:09.654
So, let's walk through what's going on.

00:00:09.654 --> 00:00:12.059
One interface will show you remembering more kind Chai.

00:00:12.060 --> 00:00:15.089
We talked about before each and describe logs.

00:00:15.089 --> 00:00:16.250
You don't see them here, right?

00:00:16.250 --> 00:00:18.405
All we see is a contract keyword.

00:00:18.405 --> 00:00:20.160
This is what is coming with Truffle.

00:00:20.160 --> 00:00:21.480
So let me explain what that is doing.

00:00:21.480 --> 00:00:25.839
So truffle, first of all provides a clean room environment when running your test files.

00:00:25.839 --> 00:00:28.844
When running your tests against Ganesh or Truffle develop,

00:00:28.844 --> 00:00:33.269
the Truffle will redeploy all of your migrations at the beginning of every test file,

00:00:33.270 --> 00:00:36.920
to ensure that you have a fresh set of contracts to test against.

00:00:36.920 --> 00:00:40.579
Truffle uses the Mocha testing framework in trivial assertions,

00:00:40.579 --> 00:00:43.174
so you can write your JavaScript tests just this way.

00:00:43.174 --> 00:00:46.759
Now the contract keyword right there works exactly like the describing

00:00:46.759 --> 00:00:50.795
before each functions like we talked about in the Mocha and Chai video except that,

00:00:50.795 --> 00:00:54.094
it automatically enables Truffle's clean room features.

00:00:54.094 --> 00:00:57.409
Remember we used before each so that we could run some tests,

00:00:57.409 --> 00:01:00.500
some kind of generic setup that we wanted to do before every it block.

00:01:00.500 --> 00:01:02.450
We could just put in the before each block.

00:01:02.450 --> 00:01:04.570
The contract does it automatically for you.

00:01:04.569 --> 00:01:06.259
Okay. Let me explain how it works.

00:01:06.260 --> 00:01:08.450
So before each contract function is run,

00:01:08.450 --> 00:01:11.329
your contract are redeployed to the running Ethereum client.

00:01:11.329 --> 00:01:13.125
So the tests within it,

00:01:13.125 --> 00:01:15.135
will run with a clean contract state.

00:01:15.135 --> 00:01:17.320
So you don't need to have a separate before each block.

00:01:17.319 --> 00:01:19.939
Also the contract function provides a list of

00:01:19.939 --> 00:01:22.745
accounts available to buy your Ethereum client,

00:01:22.745 --> 00:01:25.070
so you can write your tests and this happens this way.

00:01:25.069 --> 00:01:26.149
So the way you do it.

00:01:26.150 --> 00:01:29.885
So, if you see we have a contract block and then we have in it block right there.

00:01:29.885 --> 00:01:33.195
Okay. What's going on is contract you have the contract keyword,

00:01:33.194 --> 00:01:34.429
and then first argument.

00:01:34.430 --> 00:01:37.310
If you see the two arguments here and the first argument goes like this.

00:01:37.310 --> 00:01:41.359
So, you have whatever information remember like in before each we just give information.

00:01:41.359 --> 00:01:43.084
All of this is some description.

00:01:43.084 --> 00:01:45.439
So, I'm just saying I'm running the contract StarNotary.

00:01:45.439 --> 00:01:47.629
And the second is a function right there.

00:01:47.629 --> 00:01:50.699
And this is a function and this is how you get the account.

00:01:50.700 --> 00:01:54.079
So, when you run the contract function this way like I said,

00:01:54.079 --> 00:01:56.375
the list of accounts made by Ethereum client you

00:01:56.375 --> 00:01:58.849
can just get them directly by using this option.

00:01:58.849 --> 00:02:02.469
So, the second is a function argument here and

00:02:02.469 --> 00:02:04.789
this is automatically getting the accounts in

00:02:04.790 --> 00:02:07.150
here and what I am doing is that once I get the accounts,

00:02:07.150 --> 00:02:09.319
I'm storing it is in my variable accounts

00:02:09.319 --> 00:02:11.525
that I'm declaring outside of my function right there.

00:02:11.525 --> 00:02:13.390
So, now I have my accounts all ready.

00:02:13.389 --> 00:02:16.889
Okay. So I have array of accounts ready that I can call anywhere,

00:02:16.889 --> 00:02:18.119
I can call the account zero,

00:02:18.120 --> 00:02:20.069
accounts two, whatever. That's just the way it is.

00:02:20.069 --> 00:02:21.840
Also the second thing,

00:02:21.840 --> 00:02:23.569
once we have all the accounts ready,

00:02:23.569 --> 00:02:26.750
now we are also having the instance of the notary,

00:02:26.750 --> 00:02:30.590
we're deploying it and this is exactly the same way like we did in our deploy file.

00:02:30.590 --> 00:02:32.134
If you see we deployed it.

00:02:32.134 --> 00:02:35.014
So now what we're doing is that we're actually deploying it in

00:02:35.014 --> 00:02:39.049
this file await syntax and we are calling the StarNotary and then we're deploying it.

00:02:39.050 --> 00:02:41.570
So again walking you through contract keyword,

00:02:41.569 --> 00:02:44.569
followed by any description you want to give the second argument is

00:02:44.569 --> 00:02:48.019
a function and the function automatically gets the way you run this function,

00:02:48.020 --> 00:02:50.719
it will automatically gets all the accounts that are available to

00:02:50.719 --> 00:02:53.585
you when you deploy the contract with a clean room state.

00:02:53.585 --> 00:02:55.955
And then I'm storing them in my accounts variable.

00:02:55.955 --> 00:02:57.335
And then I'm just calling,

00:02:57.335 --> 00:02:59.659
saying that I want to call my owner is account zero.

00:02:59.659 --> 00:03:02.460
Because that's by default the first person who's going to

00:03:02.460 --> 00:03:05.670
deploy the first account to deploys, is accounts zero.

00:03:05.669 --> 00:03:10.039
And then I'm having an instance of the contract and the way I do that I of course a bait,

00:03:10.039 --> 00:03:14.419
like I said everything in solidity and also in the word of Ethereum is not synchronous.

00:03:14.419 --> 00:03:15.649
So it's mostly L synchronous.

00:03:15.650 --> 00:03:17.659
So that's the reason I'm using the async keyword.

00:03:17.659 --> 00:03:20.525
So I can officially use now my await syntax.

00:03:20.525 --> 00:03:25.355
So I'm using await and then I call StarNotary dot deployed and that's it.

00:03:25.354 --> 00:03:28.069
I'm also wanted to mention it's not happening here but again

00:03:28.069 --> 00:03:31.639
a Web3 instance is automatically available in each test file.

00:03:31.639 --> 00:03:33.934
Remember Web3's only programmatic way

00:03:33.935 --> 00:03:35.960
that you can actually connect to the world of Ethereum.

00:03:35.960 --> 00:03:37.385
So, Web3 like I said,

00:03:37.384 --> 00:03:39.560
when you have your contracts you have to

00:03:39.560 --> 00:03:42.229
interact with the Ethereum board you need a copy of Web3.

00:03:42.229 --> 00:03:45.810
So Web3 instance is automatically available in test file,

00:03:45.810 --> 00:03:49.349
so you can just call Web3 dot Eth Module to get the balance,

00:03:49.349 --> 00:03:51.710
get accounts and all that stuff and it just works perfectly fine.

00:03:51.710 --> 00:03:55.340
So, again we said in this line again it creates an instance of the contract that

00:03:55.340 --> 00:03:56.810
represents the default address of

00:03:56.810 --> 00:03:59.449
the contract that we're storing in the variable instance.

00:03:59.449 --> 00:04:01.369
Now we can use this instance to run

00:04:01.370 --> 00:04:05.360
our test cases and then we will look at that in our next video.

