WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.635
So in our exercise,

00:00:01.635 --> 00:00:03.855
we're going to validate your development environment.

00:00:03.855 --> 00:00:09.134
Specifically, we are going to add some code to make a truffle test that initially,

00:00:09.134 --> 00:00:13.559
is set to be failing to start passing in your development environment.

00:00:13.560 --> 00:00:16.469
The commands you will run our NPM test,

00:00:16.469 --> 00:00:18.314
and initially you will get an error.

00:00:18.315 --> 00:00:22.590
We will fix it using the test script that I've already provided,

00:00:22.589 --> 00:00:23.954
then we will test it again.

00:00:23.954 --> 00:00:27.449
If at that point the test passes successfully,

00:00:27.449 --> 00:00:30.929
you have a good development environment and you can go on to the next step.

00:00:30.929 --> 00:00:34.064
All right. I'm going to switch over to my code editor now.

00:00:34.064 --> 00:00:39.875
If you have the repo that is associated with this course on your computer,

00:00:39.875 --> 00:00:45.689
you should now be looking at visual studio code similar to this.

00:00:46.450 --> 00:00:51.540
The specific test we want to look at is in the file

00:00:51.539 --> 00:00:56.615
named ExerciseC6A.js. So we'll open that.

00:00:56.615 --> 00:01:04.920
I'm going ahead and view my terminal here. All right.

00:01:04.920 --> 00:01:10.594
Bump up my code size just a little bit more. All right.

00:01:10.594 --> 00:01:13.670
So now that this is in place,

00:01:13.670 --> 00:01:17.284
one of the first things you would have already done is NPM install.

00:01:17.284 --> 00:01:21.869
I'll go ahead and do it again just to make sure that I have the latest and greatest.

00:01:22.129 --> 00:01:27.344
So since my computer was already up to date for this particular project,

00:01:27.344 --> 00:01:29.355
there's no other files downloaded.

00:01:29.355 --> 00:01:31.380
All right, and now let's run test,

00:01:31.379 --> 00:01:38.920
npm test, and we expect to get a failure.

00:01:39.200 --> 00:01:43.719
So the contracts are being compiled,

00:01:44.540 --> 00:01:48.065
and you should be seeing the exact same scenario here.

00:01:48.064 --> 00:01:51.109
If you are running into any problems at this point,

00:01:51.109 --> 00:01:53.989
please check to make sure that Grenache is running.

00:01:53.989 --> 00:01:56.569
Also if you refer to the Read Me file,

00:01:56.569 --> 00:01:59.134
I'll create a handy section there called troubleshooting,

00:01:59.135 --> 00:02:04.010
that lists some of the common causes why this might fail at this point.

00:02:04.010 --> 00:02:06.380
So please review that also.

00:02:06.379 --> 00:02:08.224
So at this point,

00:02:08.224 --> 00:02:09.544
we've got our code,

00:02:09.544 --> 00:02:13.250
and we've got a test that's failing.

00:02:13.250 --> 00:02:17.074
So our first exercise which will work on together,

00:02:17.074 --> 00:02:21.259
and subsequent exercises you can do yourself initially,

00:02:21.259 --> 00:02:23.074
is to make this test pass.

00:02:23.074 --> 00:02:26.000
Now let's review what this test is actually doing.

00:02:26.000 --> 00:02:29.044
So what this test is doing is,

00:02:29.044 --> 00:02:32.919
checking that the contract can register a new user.

00:02:32.919 --> 00:02:35.159
Let's look at the code for that.

00:02:36.500 --> 00:02:38.715
So it might contract here,

00:02:38.715 --> 00:02:40.515
it's a very simple scenario,

00:02:40.514 --> 00:02:47.429
where you can add users with a specific profile to a collection called user profiles.

00:02:49.370 --> 00:02:51.995
Here's the code that we are testing.

00:02:51.995 --> 00:02:53.405
It says registered user.

00:02:53.405 --> 00:02:55.564
It takes two parameters and address,

00:02:55.564 --> 00:03:00.875
and whether the user that we're registering is going to be an admin or not,

00:03:00.875 --> 00:03:04.930
and it ensures that we don't duplicate users.

00:03:04.930 --> 00:03:07.069
If that user is not already registered,

00:03:07.069 --> 00:03:09.439
they can go ahead and get registered.

00:03:09.439 --> 00:03:12.889
Notice here that on line 85,

00:03:12.889 --> 00:03:15.784
we have require contract owner.

00:03:15.784 --> 00:03:17.495
So this is a function modifier.

00:03:17.495 --> 00:03:20.180
Let's take a look at what that function modifier does.

00:03:20.180 --> 00:03:24.230
What that function modifier is doing is checking to make sure that

00:03:24.229 --> 00:03:29.659
the person or the user calling this particular function is the contract owner.

00:03:29.659 --> 00:03:34.500
The contract owner is set up at the beginning when the contract is deployed in

00:03:34.500 --> 00:03:39.514
the constructor to be the person or the account that is deploying the contract.

00:03:39.514 --> 00:03:42.274
So what that tells us is that,

00:03:42.275 --> 00:03:48.080
this particular function is going to fail if the caller is not the contract owner.

00:03:48.080 --> 00:03:50.120
Let's go back to our test,

00:03:50.120 --> 00:03:55.189
and you can see here that the caller is set to account one.

00:03:55.189 --> 00:03:57.409
Now to give you an idea of what that is,

00:03:57.409 --> 00:03:59.824
I'd like to orient you a little bit with how

00:03:59.824 --> 00:04:03.754
the testing framework is set up in this particular project.

00:04:03.754 --> 00:04:08.814
So the important thing to consider here is a file name testConfig.

00:04:08.814 --> 00:04:10.544
So what this does,

00:04:10.544 --> 00:04:14.809
is provide you various accounts and

00:04:14.810 --> 00:04:20.314
the artifacts needed to test your contract functions quickly and easily.

00:04:20.314 --> 00:04:22.925
So the first thing is you have here is accounts.

00:04:22.925 --> 00:04:24.410
Now this is something that truffle does.

00:04:24.410 --> 00:04:28.955
It provides all the accounts that are unlocked and usable with Grenache.

00:04:28.954 --> 00:04:32.169
There should be 10 of them in the setup we have.

00:04:32.170 --> 00:04:37.685
In this testConfig, I also provide an array of Ethereum addresses.

00:04:37.685 --> 00:04:41.824
These are just random addresses for the purpose of testing later in the script.

00:04:41.824 --> 00:04:44.899
Ultimately, what we do is we combine all of this,

00:04:44.899 --> 00:04:48.204
and we pass it off as the return value,

00:04:48.204 --> 00:04:54.490
which is then used in the test as config.

00:04:54.490 --> 00:05:00.509
So the variable config is hydrated right here by calling test.config.

00:05:00.509 --> 00:05:02.509
So now for all your tests,

00:05:02.509 --> 00:05:05.659
you have this nice environment where you've got test addresses,

00:05:05.660 --> 00:05:08.240
as well as the accounts that can be used.

00:05:08.240 --> 00:05:12.394
The test that is set up here is set up in a typical arrange,

00:05:12.394 --> 00:05:16.039
act, and assert pattern. So let's see what happens.

00:05:16.040 --> 00:05:19.160
So we set the caller to be accounts one.

00:05:19.160 --> 00:05:22.925
Now recollect that config has accounts

00:05:22.925 --> 00:05:27.569
zero through nine setup as unlocked accounts on Grenache.

00:05:27.569 --> 00:05:32.569
So this should work in terms of sending the transaction over.

00:05:32.569 --> 00:05:37.024
We then set up a new user with an arbitrary test address.

00:05:37.024 --> 00:05:41.875
This is where those test addresses are referred to earlier are useful.

00:05:41.875 --> 00:05:44.720
We will call the register user function,

00:05:44.720 --> 00:05:49.085
and we'll say the admin user is false,

00:05:49.084 --> 00:05:54.724
and the caller of that particular function is going to be accounts one.

00:05:54.725 --> 00:05:56.975
So when we run this,

00:05:56.975 --> 00:05:58.640
we are getting a failure,

00:05:58.639 --> 00:06:02.959
and the reason for that failure is because the contract is

00:06:02.959 --> 00:06:08.629
deployed by the accounts index zero.

00:06:08.629 --> 00:06:14.464
So simply changing this index to zero, saving,

00:06:14.464 --> 00:06:22.349
and then re-running the test will ensure that you will have a successful test.

00:06:23.449 --> 00:06:26.904
So it's compiled, reset,

00:06:26.904 --> 00:06:32.519
and will execute the test momentarily just a contract,

00:06:33.459 --> 00:06:36.544
and we have one test passing.

00:06:36.545 --> 00:06:40.220
So what I'll do now is give you

00:06:40.220 --> 00:06:42.425
about five minutes to ensure that

00:06:42.425 --> 00:06:45.439
the development environment is set up correctly on your end,

00:06:45.439 --> 00:06:48.334
and that you are able to get the project to the point

00:06:48.334 --> 00:06:51.349
where your test is successfully passing.

