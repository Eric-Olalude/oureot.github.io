WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.815
At this point, we've got some of the core features of a contract written out.

00:00:04.815 --> 00:00:09.705
In this section, we'll write out each of the modifiers needed for a contract.

00:00:09.705 --> 00:00:14.009
Modifiers allow us to build certain checks before the function is run.

00:00:14.009 --> 00:00:19.545
Now, this allows us to move forward with a function only if a certain modifier is true.

00:00:19.545 --> 00:00:24.360
It is possible to write this type of functionality into the functions themselves.

00:00:24.359 --> 00:00:27.298
But by breaking them out into their own functions,

00:00:27.298 --> 00:00:30.300
we can give ourselves the opportunity to reuse them.

00:00:30.300 --> 00:00:33.975
Now, we will write out five modifiers like we discussed.

00:00:33.975 --> 00:00:37.635
The format of a modifier looks like this.

00:00:37.634 --> 00:00:39.184
So it looks like a function.

00:00:39.185 --> 00:00:41.150
So you type the word ''Modifier'',

00:00:41.149 --> 00:00:43.574
followed by name of the modifier,

00:00:43.575 --> 00:00:46.250
and then we have parenthesis if you want to pass in

00:00:46.250 --> 00:00:49.729
any arguments in any parameters, and then braces.

00:00:49.729 --> 00:00:51.904
Then, within the braces,

00:00:51.905 --> 00:00:54.024
you type in the check that you're trying to do.

00:00:54.024 --> 00:00:57.195
Now, that's done with some required statement,

00:00:57.195 --> 00:01:00.619
and some kind of comparison inside the require statement.

00:01:00.619 --> 00:01:02.089
Finally on the next line,

00:01:02.090 --> 00:01:05.034
you type an underscore followed by semicolon.

00:01:05.034 --> 00:01:09.399
Now, this is a very special notation used specifically in modifiers.

00:01:09.400 --> 00:01:12.500
What this does is that it returns the execution of

00:01:12.500 --> 00:01:16.180
the code to the original function that called the modifier.

00:01:16.180 --> 00:01:19.590
Now, let's look at the very first modifier owner only.

00:01:19.590 --> 00:01:21.770
So what we're trying to do here is we're trying to

00:01:21.769 --> 00:01:24.545
check that the msg.sender is equal to the owner.

00:01:24.545 --> 00:01:28.805
So we're doing require msg.sender is equal to equal to owner.

00:01:28.805 --> 00:01:32.860
We can do that by just typing the statement inside the required statement.

00:01:32.859 --> 00:01:36.974
Now, let's look at the second modifier, verifyCaller.

00:01:36.974 --> 00:01:40.099
Now, this will check that the msg.sender is equal to

00:01:40.099 --> 00:01:43.269
the address that we're passing inside as a parameter.

00:01:43.269 --> 00:01:47.054
To do that, what we do is we do msg.sender is equal to

00:01:47.055 --> 00:01:51.030
equal to _address inside the required statement.

00:01:51.030 --> 00:01:52.814
Now, since we're checking the address,

00:01:52.814 --> 00:01:55.640
we'll need to pass that in as a variable to the modifier.

00:01:55.640 --> 00:01:59.960
We can do that by writing this address since the type address,

00:01:59.959 --> 00:02:02.024
and then whatever is being passed in.

00:02:02.025 --> 00:02:03.770
We will pass this address as

00:02:03.769 --> 00:02:07.039
a parameter from the function that we will call this modifier.

00:02:07.040 --> 00:02:09.110
We will look at that later when we write

00:02:09.110 --> 00:02:12.190
the function and also apply that specific modifier for them.

00:02:12.189 --> 00:02:15.925
Now, great, let's go onto the next one which is paidEnough.

00:02:15.925 --> 00:02:21.230
Now, we want to check that the amount paid is enough to cover the price of the item.

00:02:21.229 --> 00:02:25.244
The amount paid would be delivered within the msg.dissent,

00:02:25.245 --> 00:02:27.295
since we will make our function paid.

00:02:27.294 --> 00:02:29.369
So whatever function, for example,

00:02:29.370 --> 00:02:30.569
let's say a by function,

00:02:30.569 --> 00:02:33.724
by item function, we are going to try to make that function payable.

00:02:33.724 --> 00:02:36.094
So whoever is trying to buy an item,

00:02:36.094 --> 00:02:37.564
send some amount with it,

00:02:37.564 --> 00:02:39.710
and that comes in the msg.value.

00:02:39.710 --> 00:02:41.705
So we're trying to make sure that this value

00:02:41.705 --> 00:02:44.230
is greater than equal to the price of the item.

00:02:44.229 --> 00:02:46.789
To get that price, we will again need to add

00:02:46.789 --> 00:02:49.189
the parameter to the modifier to pass this in.

00:02:49.189 --> 00:02:50.778
So we're going to pass this price,

00:02:50.778 --> 00:02:53.270
though it's going to be compared over here,

00:02:53.270 --> 00:02:57.230
and only if the price is less or the value that's coming in

00:02:57.229 --> 00:03:02.000
is more is when the function or the by item function will be carried through.

00:03:02.000 --> 00:03:04.099
Now, let's look at the last modifier.

00:03:04.099 --> 00:03:05.389
In fact, we have two more.

00:03:05.389 --> 00:03:07.549
Look at the forSale modifier.

00:03:07.550 --> 00:03:10.430
Now, this will check if an item is up for sale.

00:03:10.430 --> 00:03:13.379
For this, we will check that this queue of the item

00:03:13.379 --> 00:03:16.590
is equal to the forSales date we created.

00:03:16.590 --> 00:03:21.650
To do this, we will look inside the mapping items using the SKU.

00:03:21.650 --> 00:03:25.515
Remember, this is when we look up mappings this way,

00:03:25.514 --> 00:03:27.439
and then we'll look up the state.

00:03:27.439 --> 00:03:31.639
So looking up the mapping for that special SKU that's been passed in.

00:03:31.639 --> 00:03:33.509
and we're looking at the state of this,

00:03:33.509 --> 00:03:39.114
and then we're checking to make sure that this value is equal to state forSale.

00:03:39.115 --> 00:03:44.555
To do this, all we do is we say equal to equal to State.ForSale.

00:03:44.555 --> 00:03:47.780
One last modifier which is the sold modifier,

00:03:47.780 --> 00:03:50.000
very similar to the sale modifier.

00:03:50.000 --> 00:03:52.759
All we're doing is that we're trying to make sure that the item is

00:03:52.759 --> 00:03:55.250
sold in this one as opposed to states.

00:03:55.250 --> 00:03:56.719
We're looking up in the mapping,

00:03:56.719 --> 00:03:58.009
looking at the state,

00:03:58.009 --> 00:04:00.669
and also making sure that the state is sold.

00:04:00.669 --> 00:04:03.419
Fantastic. All right. Now, we've just laid out each of

00:04:03.419 --> 00:04:07.250
the modifiers that we will be using throughout the functions that we're about to write.

00:04:07.250 --> 00:04:11.569
Remember, the goal of the modifiers was to create a set of checks that

00:04:11.569 --> 00:04:16.175
we can use to make sure certain things are true before moving on with the functions.

00:04:16.175 --> 00:04:19.595
We can call this modifiers from within the functions we create,

00:04:19.595 --> 00:04:22.325
then continue the execution of the original function

00:04:22.324 --> 00:04:25.839
given that the required statement inside the modifier is true.

00:04:25.839 --> 00:04:27.869
Fantastic. In the next video,

00:04:27.870 --> 00:04:29.655
let's write the constructor function,

00:04:29.654 --> 00:04:33.209
and also start writing out some of the other functions.

