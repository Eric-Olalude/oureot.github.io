WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.830
First technique we're going to learn about is Hashing.

00:00:02.830 --> 00:00:05.234
We introduce hashes early in term one.

00:00:05.235 --> 00:00:08.640
But in this lesson, we'll learn to use hashing to preserve privacy.

00:00:08.640 --> 00:00:12.120
A Hash Function is a mathematical calculation that

00:00:12.119 --> 00:00:15.689
when applied to data always computes an answer has the same length.

00:00:15.689 --> 00:00:17.655
Hash functions have two parts.

00:00:17.655 --> 00:00:21.060
The data we put into the function that's called the Preimage,

00:00:21.059 --> 00:00:24.464
and the result of the calculation is called the Hash Value.

00:00:24.464 --> 00:00:28.574
We can think of the hash as a fingerprint of the preimage data,

00:00:28.574 --> 00:00:31.155
and this makes hashes particularly useful.

00:00:31.155 --> 00:00:33.795
Let's look at a simple hash function.

00:00:33.795 --> 00:00:35.170
Here's our simple hash function,

00:00:35.170 --> 00:00:38.300
h of x equals x mod 10.

00:00:38.299 --> 00:00:41.029
For any value x, we just take the last digit.

00:00:41.030 --> 00:00:44.600
That last digit is the hash or fingerprint of our data.

00:00:44.600 --> 00:00:47.060
So, in this case it's h of 14,

00:00:47.060 --> 00:00:50.060
that's four and h of 26 is six.

00:00:50.060 --> 00:00:51.875
But just like a physical fingerprint,

00:00:51.875 --> 00:00:56.869
we can compare that hash value to its preimage and pretty quickly verify that they match.

00:00:56.869 --> 00:00:59.419
But it will be hard to figure out what that preimage

00:00:59.420 --> 00:01:01.940
was just by looking at the hash value alone.

00:01:01.939 --> 00:01:04.414
Our simple hash function has a problem though.

00:01:04.415 --> 00:01:06.530
It'd be really easy to find lots of

00:01:06.530 --> 00:01:08.859
different preimage values that all have the same hash.

00:01:08.859 --> 00:01:11.209
So, our fingerprint hash isn't really

00:01:11.209 --> 00:01:14.390
authoritative about which preimage was used to create it.

00:01:14.390 --> 00:01:17.885
To solve this problem, we use a Cryptographic Hash.

00:01:17.885 --> 00:01:21.460
Cryptographic hash functions work just like our simple hash function,

00:01:21.459 --> 00:01:25.789
but the calculation is performed using a function based on cryptography.

00:01:25.790 --> 00:01:28.940
This means that given a particular hash value it's

00:01:28.939 --> 00:01:32.554
extremely difficult to find which preimage was used to calculate it.

00:01:32.555 --> 00:01:36.575
But it's still easy to check that a cryptographic hash value is correct.

00:01:36.575 --> 00:01:40.280
It's also hard to find two preimages that produce the same hash.

00:01:40.280 --> 00:01:43.745
That's a super important feature as we'll see in the next example.

00:01:43.745 --> 00:01:48.469
So, let's use a cryptographic hash to solve our privacy problem.

00:01:48.469 --> 00:01:54.034
In this example, Dr. Alice would like to send some medical records to her patient Bob.

00:01:54.034 --> 00:01:57.670
The trouble is, Dr. Alice doesn't want to put them on the blockchain

00:01:57.670 --> 00:02:02.015
and Bob doesn't know whether or not he could trust the documents he gets are legitimate.

00:02:02.015 --> 00:02:05.269
The good news is, they can use hashing to securely pass

00:02:05.269 --> 00:02:08.780
documents between one another and verify their accuracy.

00:02:08.780 --> 00:02:11.765
To start, Alice sends Bob the medical records.

00:02:11.764 --> 00:02:15.774
This solves Alice's problem because she just avoid using the blockchain though.

00:02:15.775 --> 00:02:17.765
The same can't be said for Bob though.

00:02:17.764 --> 00:02:21.064
He has no way to verify that his documents are legitimate.

00:02:21.064 --> 00:02:23.090
To be able to verify this,

00:02:23.090 --> 00:02:27.020
Alice will need to use the blockchain along with some hash values.

00:02:27.020 --> 00:02:30.860
Alice needs to generate a hash for the document that she was sending to Bob,

00:02:30.860 --> 00:02:32.735
and commit this hash to the block chain.

00:02:32.735 --> 00:02:35.060
From there, Bob can first check that

00:02:35.060 --> 00:02:38.134
the hash value committed was indeed committed by Alice.

00:02:38.134 --> 00:02:40.370
This confirms her identity,

00:02:40.370 --> 00:02:43.009
but not necessarily the contents of the document itself.

00:02:43.009 --> 00:02:44.959
To verify its accuracy,

00:02:44.960 --> 00:02:47.555
Bob will also need to hash the document he received.

00:02:47.555 --> 00:02:49.340
After generating his hash,

00:02:49.340 --> 00:02:53.330
he can compare that value to the value Alice stored on the blockchain.

00:02:53.330 --> 00:02:55.540
If these hash values are the same,

00:02:55.539 --> 00:02:59.224
it means that the document was received exactly as it was sent.

00:02:59.224 --> 00:03:03.574
If they are different, Bob will know there's something about the document was changed.

00:03:03.574 --> 00:03:06.709
As you can see, this example allowed Alice

00:03:06.710 --> 00:03:09.860
to avoid storing Bob's medical records on the blockchain.

00:03:09.860 --> 00:03:12.590
It used the functionality of blockchain and hash

00:03:12.590 --> 00:03:15.680
values to allow Alice to send her document privately.

00:03:15.680 --> 00:03:20.849
While allowing Bob to verify the accuracy of the document he received.

