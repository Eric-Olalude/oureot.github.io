WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.605
So as I had before,

00:00:01.605 --> 00:00:06.990
I have the solution outlined in a snippet file that we can copy paste from.

00:00:06.990 --> 00:00:10.800
But what I want to make sure is that we understand what is

00:00:10.800 --> 00:00:14.655
actually happening instead of just copy pasting that.

00:00:14.655 --> 00:00:18.750
So what I'm going to do is step by step go through all the code as I

00:00:18.750 --> 00:00:23.205
move it over to the contract and we'll see how this works.

00:00:23.205 --> 00:00:33.420
So we'll start off by moving a constant that represents M. In this case,

00:00:33.420 --> 00:00:34.650
I have M equals to,

00:00:34.650 --> 00:00:37.240
we can change it to anything we want.

00:00:37.640 --> 00:00:42.270
The next thing I have here is an array,

00:00:42.270 --> 00:00:49.120
and what this array is going to be used for is to track all the addresses that

00:00:49.120 --> 00:00:56.635
have called a function that needs to implement this multi-party consensus.

00:00:56.635 --> 00:00:58.195
So we'll put that right there.

00:00:58.195 --> 00:01:00.710
So it's a variable length array,

00:01:00.710 --> 00:01:03.919
it can be used in any N scenario,

00:01:03.919 --> 00:01:09.890
and it just keeps track of all the addresses that I have called.

00:01:09.890 --> 00:01:13.365
Now, here's our setOperatingStatus variable.

00:01:13.365 --> 00:01:20.635
What I am going to do is augment that code that's already there with completely new code.

00:01:20.635 --> 00:01:24.890
So let me go ahead and move that code over.

00:01:26.610 --> 00:01:32.840
So right now, it directly just changes the mode and we're going to restrict that

00:01:32.840 --> 00:01:38.190
considerably by implementing the ability to have multi-party consensus.

00:01:38.190 --> 00:01:40.850
All right. Let's walk through this code step-by-step.

00:01:40.850 --> 00:01:45.035
So the first thing you'll notice is that there are two requires.

00:01:45.035 --> 00:01:49.340
Now one of the important best practices you want to

00:01:49.340 --> 00:01:54.665
develop is to make sure that all your contract functions fail first.

00:01:54.665 --> 00:01:57.440
The idea here is that execution of code on

00:01:57.440 --> 00:02:02.880
the ethereum blockchain via a Smart Contract costs money in the form of gas.

00:02:02.880 --> 00:02:04.980
As a responsible developer,

00:02:04.980 --> 00:02:10.675
you want to make sure that every possible way in which that

00:02:10.675 --> 00:02:13.640
Smart Contract would have a condition or that function would have

00:02:13.640 --> 00:02:16.775
a condition that would not work is avoid it upfront.

00:02:16.775 --> 00:02:21.290
So you want to have your require statements that address every scenario.

00:02:21.290 --> 00:02:22.730
So the first thing is,

00:02:22.730 --> 00:02:26.030
we want to make sure that people don't waste money trying to change

00:02:26.030 --> 00:02:30.080
the operating status to a status that is already present.

00:02:30.080 --> 00:02:34.045
So that's what this line 134 does,

00:02:34.045 --> 00:02:39.830
it ensures that you're actually trying to change the mode to something that it's not.

00:02:39.830 --> 00:02:46.805
The next thing we want to do is constrain who can call this and what we require

00:02:46.805 --> 00:02:53.810
is for the user to have an isAdmin equals true in their profile.

00:02:53.810 --> 00:02:55.940
So if you recollect earlier,

00:02:55.940 --> 00:03:02.270
we had this register user function and it has a boolean called isAdmin,

00:03:02.270 --> 00:03:07.945
and any user that's registered would be considered an admin if this were true.

00:03:07.945 --> 00:03:10.560
Now, I'm using the dynamic approach.

00:03:10.560 --> 00:03:13.205
In other words, I am using the register user approach.

00:03:13.205 --> 00:03:14.540
When starting the exercise,

00:03:14.540 --> 00:03:17.135
I offered the possibility that you could have

00:03:17.135 --> 00:03:21.970
all the admin users also set-up via the constructor,

00:03:21.970 --> 00:03:25.670
and that might be what you did for your solution and that's perfectly valid.

00:03:25.670 --> 00:03:29.300
In that case, you would have an array,

00:03:29.300 --> 00:03:30.755
a set of five,

00:03:30.755 --> 00:03:37.945
four or whatever your M is pass through as a constructor and you would retain that state.

00:03:37.945 --> 00:03:42.070
But I like using the register user capability because it's very

00:03:42.070 --> 00:03:46.480
dynamic and it allows us to add users later,

00:03:46.480 --> 00:03:51.245
especially if a private key is lost or forgotten or such.

00:03:51.245 --> 00:03:55.150
The next thing we want to do is prevent double voting.

00:03:55.150 --> 00:04:01.675
So I have a boolean here called isDuplicate and I initially set it to false,

00:04:01.675 --> 00:04:07.315
and then I loop through the current values of the multi calls

00:04:07.315 --> 00:04:10.190
array which will store every address

00:04:10.190 --> 00:04:14.240
that has called this particular function and is an administrator.

00:04:14.240 --> 00:04:20.720
If the current caller which is represented by message.sender is already in the array,

00:04:20.720 --> 00:04:25.160
then we break out and we report that it's a duplicate.

00:04:25.160 --> 00:04:29.360
Now, I said earlier that we want to fail first and so obviously,

00:04:29.360 --> 00:04:33.140
this particular require on line 144 is

00:04:33.140 --> 00:04:37.420
going to incur some costs because there's this cost of iteration and this code here.

00:04:37.420 --> 00:04:40.280
But that's unavoidable with an array approach.

00:04:40.280 --> 00:04:42.560
Now, there's other approaches you could take,

00:04:42.560 --> 00:04:44.680
including storing the names in the mapping etc,

00:04:44.680 --> 00:04:47.720
where it might be possible to avoid that cost.

00:04:47.720 --> 00:04:50.960
But that's an optimization exercise you can do.

00:04:50.960 --> 00:04:55.159
One thing I'd like to point out here is that on line 138,

00:04:55.159 --> 00:05:00.410
I have a for loop that goes through an array and the length of the array.

00:05:00.410 --> 00:05:07.130
When you see a for loop with an iteration that is going through the length of an array,

00:05:07.130 --> 00:05:11.870
that is a signal that you need to pay greater attention to the code there.

00:05:11.870 --> 00:05:15.170
Now, because this is an exercise, it's fine to have it.

00:05:15.170 --> 00:05:16.865
But in your regular contract,

00:05:16.865 --> 00:05:23.300
you should carefully consider if an iteration should even be in your function.

00:05:23.300 --> 00:05:28.549
The reason for that is because as you iterate through an array,

00:05:28.549 --> 00:05:30.800
if the array is sufficiently long,

00:05:30.800 --> 00:05:35.990
you risk the real possibility of hitting the block gas limit,

00:05:35.990 --> 00:05:41.150
which will essentially prevent your smart contract from running any further.

00:05:41.150 --> 00:05:44.405
This is a potential lockout scenario.

00:05:44.405 --> 00:05:47.705
If you have for example an array of

00:05:47.705 --> 00:05:57.055
a 101 entities and the block gas limit is reached at entity number 100,

00:05:57.055 --> 00:06:01.745
whatever it is that your function is doing for entity 100 onward,

00:06:01.745 --> 00:06:06.245
it will be impossible for it to ever perform that function,

00:06:06.245 --> 00:06:08.495
so hat's a very serious lockout scenario.

00:06:08.495 --> 00:06:10.100
So how would you mitigate that?

00:06:10.100 --> 00:06:12.620
Well, you would want to not use arrays in

00:06:12.620 --> 00:06:16.415
any scenarios where the arrays can grow very long,

00:06:16.415 --> 00:06:21.080
in excess of perhaps 10, 20 items.

00:06:21.080 --> 00:06:26.285
A better way to do that is to have an external client perform

00:06:26.285 --> 00:06:31.520
the task of repeatedly calling the function with each entity that's there.

00:06:31.520 --> 00:06:36.570
So the loop is essentially by the calling program versus within the Smart Contract.

00:06:36.570 --> 00:06:41.285
Anyway, with that little best-practice knock it out of the way, let's move on.

00:06:41.285 --> 00:06:45.530
So we have now defined a loop and we are ensuring

00:06:45.530 --> 00:06:50.265
that the same user is not calling the contract,

00:06:50.265 --> 00:06:53.615
and what we do is now that we've reached the point where

00:06:53.615 --> 00:06:57.750
the caller is a legitimate admin and not a duplicate,

00:06:57.750 --> 00:06:59.975
we go ahead and add them to the array.

00:06:59.975 --> 00:07:04.980
So at this point, we have one user in the array if it's the first call,

00:07:04.980 --> 00:07:07.850
and what we do is we check to see if the length of

00:07:07.850 --> 00:07:12.140
the array is greater than or equal to the value of M,

00:07:12.140 --> 00:07:14.930
that is our constant which defines how many are

00:07:14.930 --> 00:07:19.745
required in order for the multiparty call to be executed.

00:07:19.745 --> 00:07:21.875
If that is the case,

00:07:21.875 --> 00:07:23.825
if the condition is met,

00:07:23.825 --> 00:07:27.920
then we go ahead and change the mode and at the same time,

00:07:27.920 --> 00:07:31.745
we also re-initialize multi calls.

00:07:31.745 --> 00:07:36.350
This is an important step right here on 149 because if you forget to do that,

00:07:36.350 --> 00:07:40.909
what will happen is that every subsequent call will automatically

00:07:40.909 --> 00:07:46.925
have the multi calls length condition met and it'll just pass through,

00:07:46.925 --> 00:07:53.015
thus defeating the very purpose of the multi call feature that you're implementing here.

00:07:53.015 --> 00:07:55.340
So let's save this,

00:07:55.340 --> 00:07:58.685
and I'm going to make sure that my code compiles,

00:07:58.685 --> 00:08:02.730
so that's done with Truffle compile.

00:08:05.720 --> 00:08:09.525
All right. So that compiled well,

00:08:09.525 --> 00:08:13.720
so now let's go ahead and add a test.

