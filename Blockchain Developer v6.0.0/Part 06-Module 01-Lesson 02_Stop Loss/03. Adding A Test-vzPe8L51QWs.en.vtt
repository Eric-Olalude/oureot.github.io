WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.740
Anytime, as I mentioned earlier,

00:00:01.740 --> 00:00:05.190
you have these scenarios that involve security lockouts,

00:00:05.190 --> 00:00:11.429
etc, it's very important to have tests that will test that out thoroughly.

00:00:11.429 --> 00:00:15.000
So the test here is a bit lengthy.

00:00:15.000 --> 00:00:20.160
So what I'm going to do is go through every step of it for you so we

00:00:20.160 --> 00:00:25.935
can ensure that we've got the coverage we need.

00:00:25.934 --> 00:00:29.640
So the first thing we want to do is arrange.

00:00:29.640 --> 00:00:30.800
So in this case,

00:00:30.800 --> 00:00:34.079
note that what we are trying to do is create a scenario

00:00:34.079 --> 00:00:39.030
where there are multiple admins that are already registered.

00:00:39.030 --> 00:00:44.105
I want to go back and look at my value of m. My value of m is two.

00:00:44.104 --> 00:00:50.314
So I need to make sure that I have at least two but really

00:00:50.314 --> 00:00:57.030
we want n to be much larger than the m value.

00:00:57.030 --> 00:01:00.560
So I'm going to make sure that I have at least three maybe even four.

00:01:00.560 --> 00:01:06.545
So let's go ahead and add one more admin there just to ensure that things work correctly.

00:01:06.545 --> 00:01:08.370
Now notice that on the admins,

00:01:08.370 --> 00:01:14.829
I'm using accounts and I'm not using my config.test addresses that I used earlier.

00:01:14.829 --> 00:01:17.929
Just to remind you the test addresses are

00:01:17.930 --> 00:01:22.580
just arbitrary addresses that can be used in code.

00:01:22.579 --> 00:01:26.825
But accounts are the accounts that are

00:01:26.825 --> 00:01:30.965
associated with Ganache here and are already unlocked.

00:01:30.965 --> 00:01:36.875
So if you intend for the user to be creating a right transaction,

00:01:36.875 --> 00:01:40.430
which in this case we do want them to be able to do a right transaction,

00:01:40.430 --> 00:01:43.870
you want to make sure you use accounts and not test addresses.

00:01:43.870 --> 00:01:46.350
So with that out of the way,

00:01:46.349 --> 00:01:50.179
the next step here is we're going to go ahead and register these users.

00:01:50.180 --> 00:01:52.355
So we haven't gotten to the part yet where we're actually

00:01:52.355 --> 00:01:54.829
exercising our multi-party code.

00:01:54.829 --> 00:01:56.269
This is just the arrange part.

00:01:56.269 --> 00:02:01.579
So we're going to set up four of our users to be admin and

00:02:01.579 --> 00:02:07.265
note here that we are using config.owner to make this call.

00:02:07.265 --> 00:02:10.084
The reason for that is because,

00:02:10.084 --> 00:02:18.004
if you go look at register user you will see that it has a require contract owner flag.

00:02:18.004 --> 00:02:25.069
So the next thing is to get the current status of the contract.

00:02:25.069 --> 00:02:26.449
Now why do I do that,

00:02:26.449 --> 00:02:33.349
why don't I just set up the start status that I want as a static value,

00:02:33.349 --> 00:02:34.594
either true or false?

00:02:34.594 --> 00:02:36.710
Well, the reason is you're going to run this test

00:02:36.710 --> 00:02:40.090
repeatedly and perhaps you might have multiple tests in sequence.

00:02:40.090 --> 00:02:43.310
What will happen very quickly is you might have

00:02:43.310 --> 00:02:46.835
your test code set up to change from true to false.

00:02:46.835 --> 00:02:50.000
But then, the contract state has now changed to false and the next time you

00:02:50.000 --> 00:02:53.340
run that same test, it'll immediately fail.

00:02:53.340 --> 00:02:55.985
To avoid that and to make it more efficient,

00:02:55.985 --> 00:02:59.615
what I do is first retrieve the current state

00:02:59.615 --> 00:03:03.935
of the operational value from the contract by calling.

00:03:03.935 --> 00:03:08.930
Then I set what will be the new state to be the opposite of that,

00:03:08.930 --> 00:03:10.625
so the negated value of it.

00:03:10.625 --> 00:03:14.705
So the new change status will be whatever that is not.

00:03:14.705 --> 00:03:16.160
So that's our setup.

00:03:16.159 --> 00:03:19.264
We've arranged all the variables and the scenario we need.

00:03:19.264 --> 00:03:20.750
Now it's time to act.

00:03:20.750 --> 00:03:27.683
So our action involves calling the set operating status function

00:03:27.683 --> 00:03:32.359
repeatedly for the number of admins that are

00:03:32.360 --> 00:03:37.010
required for the multi-party consensus to take effect.

00:03:37.009 --> 00:03:38.465
So I have first here,

00:03:38.465 --> 00:03:40.400
admin one and then admin two.

00:03:40.400 --> 00:03:43.219
Now we know that is likely to work if my code is

00:03:43.219 --> 00:03:46.310
correct but what we'd like to do is make this test fail first.

00:03:46.310 --> 00:03:48.905
So I'm going to comment that out and first try it with

00:03:48.905 --> 00:03:52.640
just one admin and see how that works.

00:03:52.639 --> 00:04:00.234
Once that's done, our new status will be available in the contract and we'll fetch that.

00:04:00.235 --> 00:04:02.115
Then finally we'll assert that.

00:04:02.115 --> 00:04:04.545
We'll check what we changed it to,

00:04:04.544 --> 00:04:06.794
with what the status of the contract is,

00:04:06.794 --> 00:04:10.869
and that comparison will tell us if our call failed or succeeded.

00:04:10.870 --> 00:04:14.525
By the way, you will notice here that in my test,

00:04:14.525 --> 00:04:17.824
I'm using the async and await operators.

00:04:17.824 --> 00:04:21.740
This really cuts down on a lot of promises and

00:04:21.740 --> 00:04:26.150
other such code that can make your tests very verbose and harder to understand.

00:04:26.149 --> 00:04:29.060
So I highly recommend using async,

00:04:29.060 --> 00:04:31.925
await in order to run these tests

00:04:31.925 --> 00:04:37.175
because it really cuts down on the code clutter that's there.

00:04:37.175 --> 00:04:41.090
Let's go ahead and save this and run our test.

00:04:41.089 --> 00:04:47.834
We expect it to fail because we have set m to two.

00:04:47.834 --> 00:04:51.789
But although we've defined multiple admins,

00:04:51.790 --> 00:04:54.845
our call value is only once.

00:04:54.845 --> 00:04:59.570
So we are calling the operating status once and we don't expect that it will change.

00:04:59.569 --> 00:05:06.060
So let's run our test and expand the size of my terminal here so it's easier to see.

00:05:11.149 --> 00:05:15.889
There we go. So our first test which is related to

00:05:15.889 --> 00:05:21.229
the registration worked and then we have a failure.

00:05:21.230 --> 00:05:24.730
It says the caller is not the contract owner.

00:05:24.730 --> 00:05:29.200
So where is that error coming from?

00:05:30.199 --> 00:05:40.240
So notice here that we are changing the status from admin one, from admin two.

00:05:40.240 --> 00:05:44.560
So what we have here is an artifact from a prior run,

00:05:44.560 --> 00:05:48.399
and in that run we still had

00:05:48.399 --> 00:05:50.109
the operating status setup with

00:05:50.110 --> 00:05:53.439
a function modifier that required it to be contract owner.

00:05:53.439 --> 00:05:55.240
So now we've got both,

00:05:55.240 --> 00:06:01.750
a requirement that the caller be the contract owner and the multi-party consensus.

00:06:01.750 --> 00:06:04.269
Obviously, those are mutually exclusive.

00:06:04.269 --> 00:06:10.674
So I'll save that and run again and it should fail again but for a different reason.

00:06:10.675 --> 00:06:18.910
Part of helping improve your skills in coding is to observe some of these failures.

00:06:18.910 --> 00:06:26.240
Hopefully, we'll get one pass and one fail. There we go.

00:06:26.240 --> 00:06:31.535
So our test has correctly reported that the multi-party call failed.

00:06:31.535 --> 00:06:35.405
We expected it to be true but what we got was false.

00:06:35.404 --> 00:06:39.019
So now let's go back and improve our test.

00:06:39.019 --> 00:06:44.659
We'll go ahead and add that second caller in our multi-party scenario.

00:06:44.660 --> 00:06:46.325
In this case, admin two.

00:06:46.324 --> 00:06:52.139
Save and run our test again.

00:06:55.060 --> 00:07:01.749
This time, we expect it to have two passing tests,

00:07:02.899 --> 00:07:05.709
and we do. So there you have it.

00:07:05.709 --> 00:07:12.414
So that's the code to implement a multi-party consensus in code.

00:07:12.415 --> 00:07:18.715
Now let's look at what we've learned as part of this section.

00:07:18.714 --> 00:07:25.044
So we learn how to implement what is essentially multisig for smart contracts.

00:07:25.045 --> 00:07:29.620
We did that and we require such capability to prevent

00:07:29.620 --> 00:07:34.120
one individual from arbitrarily performing actions on a smart contract.

00:07:34.120 --> 00:07:37.144
The primary goal of this is to prevent theft.

00:07:37.144 --> 00:07:43.174
But it also enables enforcement of specific business rules in code.

00:07:43.175 --> 00:07:44.824
Now, let's take a quiz.

00:07:44.824 --> 00:07:49.979
What is multi-party consensus designed to prevent?

