WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.080
We just discussed how to use UML to model our solution which

00:00:04.080 --> 00:00:08.100
gave us a clear understanding of what we need to build and for whom.

00:00:08.100 --> 00:00:10.680
Using this information, we'll cover questions

00:00:10.680 --> 00:00:13.245
to ask when choosing the appropriate services.

00:00:13.245 --> 00:00:16.650
Now, earlier you saw new layers of services are added onto Web

00:00:16.650 --> 00:00:20.925
2.0 in order to make use of Web 3.0 services such as wallets,

00:00:20.925 --> 00:00:24.405
blockchain services, and in some cases, the IPFS services.

00:00:24.405 --> 00:00:25.980
So in the remainder of this lesson,

00:00:25.980 --> 00:00:28.320
we'll walk you through the thought process to help you narrow

00:00:28.320 --> 00:00:31.230
down your choices when choosing the right tool for each service.

00:00:31.230 --> 00:00:34.700
Now, these are the same questions that you'll need to consider when working as

00:00:34.700 --> 00:00:38.335
a blockchain developer no matter what scale of application that you're building.

00:00:38.335 --> 00:00:39.975
For the following discussion,

00:00:39.975 --> 00:00:42.365
let's assume we're going to grow way beyond

00:00:42.365 --> 00:00:45.590
our two actor pet example. So start thinking big.

00:00:45.590 --> 00:00:49.730
In this scenario, you're part of a blockchain developer team tasked to

00:00:49.730 --> 00:00:53.885
build a blockchain solution for a prominent wine producer, Vindacity.

00:00:53.885 --> 00:00:57.650
They take their wines very seriously and so do their consumers

00:00:57.650 --> 00:01:01.910
who want to know the origins and authenticity of the products they buy.

00:01:01.910 --> 00:01:04.880
It was also recently reported that on average,

00:01:04.880 --> 00:01:07.595
consumers paid about a 25 percent premium

00:01:07.595 --> 00:01:10.850
for fair trade labeled wines versus unlabeled wines,

00:01:10.850 --> 00:01:13.760
if they want the consumers to be confident in their labels.

00:01:13.760 --> 00:01:18.340
Vindacity is a middle-sized business who have about hundred actors involved in

00:01:18.340 --> 00:01:20.590
their system and expected grow to handle

00:01:20.590 --> 00:01:23.560
about a thousand transactions per second per year.

00:01:23.560 --> 00:01:26.345
You'll need to make decisions about the platform,

00:01:26.345 --> 00:01:30.055
database, and the supporting frameworks and supporting libraries.

00:01:30.055 --> 00:01:33.910
Now, the platform and database will be our biggest decisions since

00:01:33.910 --> 00:01:36.070
the frameworks and libraries will be decided on as

00:01:36.070 --> 00:01:38.515
a result of the decisions of our first two choices.

00:01:38.515 --> 00:01:40.675
Let's look at the platform decisions.

00:01:40.675 --> 00:01:45.490
The core metrics that will help us narrow down on the platforms will be network,

00:01:45.490 --> 00:01:50.665
performance, business logic, and consensus. First, network.

00:01:50.665 --> 00:01:52.550
What's scale are we expecting,

00:01:52.550 --> 00:01:56.545
and how many participants do we expect to interact within the solution?

00:01:56.545 --> 00:02:00.365
Will it be hundreds of thousands of users or just a small handful?

00:02:00.365 --> 00:02:04.975
Also, do we want or need to know the participants in the network?

00:02:04.975 --> 00:02:08.930
Or can we trust them without knowing everything about them?

00:02:08.930 --> 00:02:13.880
In our case, we expect at most about a hundred active users on the network at a time.

00:02:13.880 --> 00:02:15.830
We also expect them to be able to

00:02:15.830 --> 00:02:18.700
participate without knowing everything about each other.

00:02:18.700 --> 00:02:21.500
Now, what about the performance of the network?

00:02:21.500 --> 00:02:27.350
So for this, we need to consider how many transactions we're anticipating per second,

00:02:27.350 --> 00:02:30.455
and how much data per transaction do we expect.

00:02:30.455 --> 00:02:35.660
We can use existing metrics to conclude average shipment orders to be executed.

00:02:35.660 --> 00:02:38.540
We should also consider the transactional throughput,

00:02:38.540 --> 00:02:42.455
meaning the amount of transactions that can be executed at a given time.

00:02:42.455 --> 00:02:45.020
Now there are two sides of interacting with data.

00:02:45.020 --> 00:02:47.555
There's the creation and modification of the data,

00:02:47.555 --> 00:02:49.595
and then the querying of that data.

00:02:49.595 --> 00:02:51.560
In a supply chain use case,

00:02:51.560 --> 00:02:55.100
most of our application interactions will be on the querying side.

00:02:55.100 --> 00:02:57.530
The creation of the data is restricted to

00:02:57.530 --> 00:03:00.890
the producer who creates goods for the marketplace.

00:03:00.890 --> 00:03:03.575
Next, let's look at the business logic.

00:03:03.575 --> 00:03:06.365
So here we'll assume the business logic is kept simple.

00:03:06.365 --> 00:03:09.130
Meaning will be a stand-alone solution.

00:03:09.130 --> 00:03:11.840
Also, the privacy of the transaction is not

00:03:11.840 --> 00:03:14.960
important feature and the data should be public since we want

00:03:14.960 --> 00:03:17.630
our consumers and other actors in the supply chain to be able to

00:03:17.630 --> 00:03:21.460
track the product details and reassure them of its authenticity.

00:03:21.460 --> 00:03:25.160
Lastly, let's consider the type of consensus required.

00:03:25.160 --> 00:03:28.535
Will we need an arbitrator in the event of a dispute?

00:03:28.535 --> 00:03:31.445
In the case of our example, we'll not.

00:03:31.445 --> 00:03:36.160
But say our blockchain were tracking legal deeds passed amongst landowners,

00:03:36.160 --> 00:03:39.470
then in that case, that would be a strong consideration.

00:03:39.470 --> 00:03:44.720
Next, we want all participants to be involved in the validation of transactions.

00:03:44.720 --> 00:03:47.180
For the sake of simplicity in assumptions,

00:03:47.180 --> 00:03:52.790
we want strict immutability of the records with no need to amend or cancel transactions.

00:03:52.790 --> 00:03:56.000
Now with decisions about what we need from the platform discussed,

00:03:56.000 --> 00:03:58.520
let's look at our database storage needs.

00:03:58.520 --> 00:04:00.970
First, what data are we storing?

00:04:00.970 --> 00:04:03.255
We need to store data about the transactions,

00:04:03.255 --> 00:04:08.285
as well as the fields about the wine to prove authenticity such as the origin,

00:04:08.285 --> 00:04:10.505
the producer, and the bottling date.

00:04:10.505 --> 00:04:12.860
Now for the premise of our supply chain,

00:04:12.860 --> 00:04:17.585
data's collected in a transactional manner solely on the blockchain platform.

00:04:17.585 --> 00:04:21.920
There's no need for the data to be stored in a separate database for now since we'll

00:04:21.920 --> 00:04:26.615
only focus on the validation of product authenticity using a public blockchain.

00:04:26.615 --> 00:04:30.710
Given that, we need to determine the chain's visibility meaning,

00:04:30.710 --> 00:04:32.360
will it be public or private?

00:04:32.360 --> 00:04:34.880
If the number of transactions needed are relatively

00:04:34.880 --> 00:04:37.180
low and there's no need for private data,

00:04:37.180 --> 00:04:40.130
we can utilize a publicly visible chain.

00:04:40.130 --> 00:04:42.480
Now with all these decisions concluded,

00:04:42.480 --> 00:04:44.360
we decided to select a Ethereum as

00:04:44.360 --> 00:04:47.315
a platform of choice for this product as it suits our needs.

00:04:47.315 --> 00:04:50.555
Now there are a number of possible contenders such as Neo,

00:04:50.555 --> 00:04:52.405
Hyper ledger or CoData.

00:04:52.405 --> 00:04:54.140
We highly advise you to follow

00:04:54.140 --> 00:04:57.875
a similar thought process when deciding on a platform and database.

00:04:57.875 --> 00:04:59.210
With the platform chosen,

00:04:59.210 --> 00:05:01.865
we can look into the frameworks that support the platform.

00:05:01.865 --> 00:05:05.990
So Truffle and Ganache are popular ones that you should be familiar with already.

00:05:05.990 --> 00:05:08.390
Choosing a framework depends on the language

00:05:08.390 --> 00:05:11.375
the software application solution is being developed with.

00:05:11.375 --> 00:05:14.030
For instance, knowing that our target is to

00:05:14.030 --> 00:05:16.850
develop an interface for the front end with JavaScript,

00:05:16.850 --> 00:05:19.060
we can utilize the Truffle framework.

00:05:19.060 --> 00:05:21.000
Once a framework is decided,

00:05:21.000 --> 00:05:23.630
the libraries chosen should be compatible.

00:05:23.630 --> 00:05:27.020
Choosing the libraries depends on choosing the service type.

00:05:27.020 --> 00:05:29.060
So whether that's back-end or front-end,

00:05:29.060 --> 00:05:31.955
as well as, the language being used for that development.

00:05:31.955 --> 00:05:33.920
As we covered in the previous term,

00:05:33.920 --> 00:05:37.490
make sure the libraries are well-maintained and community vetted.

00:05:37.490 --> 00:05:42.110
Now that wraps it up for this section on making decisions on service layers.

00:05:42.110 --> 00:05:45.035
Remember to consider these core components;

00:05:45.035 --> 00:05:48.375
the network, performance, business logic,

00:05:48.375 --> 00:05:51.935
consensus, and data storage concerns when making decisions

00:05:51.935 --> 00:05:56.610
about new layers of service no matter what scale of application you're building.

