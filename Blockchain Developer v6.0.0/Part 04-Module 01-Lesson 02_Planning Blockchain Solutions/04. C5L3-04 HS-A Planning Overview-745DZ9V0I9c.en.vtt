WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.695
As we mentioned above,

00:00:01.695 --> 00:00:05.549
planning the architecture for a solution that encompasses different layers,

00:00:05.549 --> 00:00:09.509
legacy systems, and more than one actor involved is really important.

00:00:09.509 --> 00:00:12.000
In this concept, we'll review

00:00:12.000 --> 00:00:14.550
the Blockchain solution layers then

00:00:14.550 --> 00:00:18.045
model a Blockchain solution with behavior and structure.

00:00:18.045 --> 00:00:20.070
Before we begin this section,

00:00:20.070 --> 00:00:22.320
I highly recommend that you read through what is

00:00:22.320 --> 00:00:25.170
expected in the related project because knowing what

00:00:25.170 --> 00:00:27.330
the project requirements are will better help you

00:00:27.329 --> 00:00:30.704
understand how all these pieces of the course fit together.

00:00:30.704 --> 00:00:33.570
So, let's get started by discussing the different layers that you'll

00:00:33.570 --> 00:00:36.299
interact with in the Blockchain application solution,

00:00:36.299 --> 00:00:40.259
or what's commonly referred to as our DApp or decentralized application.

00:00:40.259 --> 00:00:41.744
In this simplified diagram,

00:00:41.744 --> 00:00:46.189
this is a purely Blockchain use case in which all data is stored in the Blockchain.

00:00:46.189 --> 00:00:49.070
Later on, we'll discuss solutions where data is stored

00:00:49.070 --> 00:00:52.280
both in the Blockchain as well as in a traditional database.

00:00:52.280 --> 00:00:54.425
In the back-end portion, we have

00:00:54.424 --> 00:00:58.054
our Blockchain where the data is stored and transactions are trapped.

00:00:58.054 --> 00:01:00.439
Coupled on that are smart contracts.

00:01:00.439 --> 00:01:03.229
Programs that perform transactions with the ability to

00:01:03.229 --> 00:01:06.454
act on accounts and the data that's stored in the Blockchain.

00:01:06.454 --> 00:01:10.159
In the front-end, the application can have front-end code and

00:01:10.159 --> 00:01:14.319
the user-interfaces written in any language that can make calls to our back-end.

00:01:14.319 --> 00:01:20.794
In our case, we've created front-ends with our NodeJS Webserver, HTML and CSS.

00:01:20.795 --> 00:01:24.400
So, in order for users to interact with the distributed application,

00:01:24.400 --> 00:01:27.500
we'll be using applications such as meta mask which allow

00:01:27.500 --> 00:01:31.325
users to run DApps specifically a theory and DApps in this case,

00:01:31.325 --> 00:01:35.420
directly in their browser without running a full theory of node.

00:01:35.420 --> 00:01:37.385
Now, some of you might be asking, "Well,

00:01:37.385 --> 00:01:39.810
I can see how the back-end portion is decentralized,

00:01:39.810 --> 00:01:42.710
but how's the front-end of this application still centralized?"

00:01:42.709 --> 00:01:44.329
So, what's up with that?

00:01:44.329 --> 00:01:46.474
Now, we won't be getting into this now

00:01:46.474 --> 00:01:49.129
but what you will see later is that the front-end can

00:01:49.129 --> 00:01:53.979
be hosted on decentralized storage such as Swarm or IPFS.

00:01:53.980 --> 00:01:56.630
So, now that we've seen the layers of a general DApp,

00:01:56.629 --> 00:01:59.015
let's discuss about how to model

00:01:59.015 --> 00:02:03.469
this Blockchain solution focusing on the behavioral and structural aspects.

00:02:03.469 --> 00:02:05.855
Remember that the same planning principles

00:02:05.855 --> 00:02:08.615
will apply for any application that you build in the future.

00:02:08.615 --> 00:02:10.939
When architecting an application,

00:02:10.939 --> 00:02:13.550
it's important to consider the behavior and

00:02:13.550 --> 00:02:17.500
structure in the real world where your application will be assisting.

00:02:17.500 --> 00:02:21.004
Remember, at the end of the day the applications we create are simply

00:02:21.004 --> 00:02:25.639
a technical representation of the information and entities in the real world.

00:02:25.639 --> 00:02:28.579
Properly scoping this out is even more vital in

00:02:28.580 --> 00:02:30.260
a supply chain where information and

00:02:30.259 --> 00:02:32.929
goods are flowing through a number of different actors.

00:02:32.930 --> 00:02:35.300
Let's check out a tuna fishing supply chain

00:02:35.300 --> 00:02:38.844
example provided by the World Wildlife Foundation.

00:02:38.844 --> 00:02:41.719
So, this is part of a pilot project used to prove

00:02:41.719 --> 00:02:44.478
Blockchain use case in seafood traceability,

00:02:44.479 --> 00:02:48.860
specifically for the tuna that's caught in the Fujian long line fishery.

00:02:48.860 --> 00:02:53.140
This diagram shows what happens to a tuna as it passes from the fisher

00:02:53.139 --> 00:02:57.875
all the way to the consumer and traces what actions each actor in the supply chain takes.

00:02:57.875 --> 00:03:00.245
Using this example, we'll discuss

00:03:00.245 --> 00:03:03.080
the essential components to consider in a supply chain model.

00:03:03.080 --> 00:03:06.065
Now, the first thing we think about is the asset.

00:03:06.064 --> 00:03:10.340
An asset is any physical or digital entity that requires tracking.

00:03:10.340 --> 00:03:12.905
This can be real estate, education,

00:03:12.905 --> 00:03:15.995
oil or gas, transportation, or even healthcare.

00:03:15.995 --> 00:03:20.620
In this case, the asset is a physical entity, the tuna that was caught.

00:03:20.620 --> 00:03:25.400
So, asset can have attributes such as ownership or who owns it,

00:03:25.400 --> 00:03:26.960
time when it was caught,

00:03:26.960 --> 00:03:28.715
and the location where it was caught.

00:03:28.715 --> 00:03:31.729
In this case, as the tuna passes through the chain,

00:03:31.729 --> 00:03:34.969
information such as where and when it was caught,

00:03:34.969 --> 00:03:36.289
information about the fisher,

00:03:36.289 --> 00:03:39.304
processor and distributor may need to be documented.

00:03:39.305 --> 00:03:41.765
Next, who interacts with this asset?

00:03:41.764 --> 00:03:44.419
Actors. So, these actors interact with

00:03:44.419 --> 00:03:47.674
asset and transform the asset from one state to the next.

00:03:47.675 --> 00:03:50.090
Users can participate in the audit,

00:03:50.090 --> 00:03:53.030
review and attest to the assets validation history.

00:03:53.030 --> 00:03:54.590
So, for each actor,

00:03:54.590 --> 00:03:57.170
it's important to scope out their role permissions which are

00:03:57.169 --> 00:03:59.899
specific functions such as web permissions,

00:03:59.900 --> 00:04:01.745
which are granted to a group of users.

00:04:01.745 --> 00:04:04.580
In our diagram, we see that each actor can take

00:04:04.580 --> 00:04:07.460
on specific actions when interacting with the fish.

00:04:07.460 --> 00:04:10.310
For example, the regulator does not have

00:04:10.310 --> 00:04:13.944
the role permissions to pack and sell the fish in the application.

00:04:13.944 --> 00:04:16.189
Like in the real world, they likely don't have

00:04:16.189 --> 00:04:19.055
those permissions and are not qualified to do this.

00:04:19.055 --> 00:04:21.350
Additionally, role permissions allow

00:04:21.350 --> 00:04:24.605
the necessary information to be shown at the appropriate time.

00:04:24.605 --> 00:04:28.460
For example, the regulator will likely need to know the name

00:04:28.459 --> 00:04:32.534
and registration details of the fisher in order to prove the fish landing.

00:04:32.535 --> 00:04:37.115
However, the fisher doesn't need to share such detailed information with the consumer.

00:04:37.115 --> 00:04:39.259
Knowing the asset and the actors,

00:04:39.259 --> 00:04:41.389
we can understand the business process.

00:04:41.389 --> 00:04:43.759
So, this is the progression of the asset through

00:04:43.759 --> 00:04:47.615
various steps which will be recorded on the chain for the evidence of trail.

00:04:47.615 --> 00:04:51.095
How this translate to our application is in the business actions.

00:04:51.095 --> 00:04:54.890
Business actions are user or machine initiated actions that

00:04:54.889 --> 00:04:58.834
allow assets to progress from one process state to the next.

00:04:58.834 --> 00:05:00.844
Let's see the action for each actor.

00:05:00.845 --> 00:05:03.200
So, fisher catches the fish.

00:05:03.199 --> 00:05:05.750
The regulator approves the landing,

00:05:05.750 --> 00:05:09.185
which means bringing the fish out of the water and onto land.

00:05:09.185 --> 00:05:11.300
Once the fish has been approved,

00:05:11.300 --> 00:05:15.290
it is the responsibility of the fisher to bring the fish back onto the land.

00:05:15.290 --> 00:05:17.610
The processor then receive the fish,

00:05:17.610 --> 00:05:19.634
processes and packs it.

00:05:19.634 --> 00:05:24.454
Next, it's passed on to the distributor or the retailer that sells the fish.

00:05:24.454 --> 00:05:27.800
Lastly, our story ends with a tuna on our consumers

00:05:27.800 --> 00:05:30.889
plate and since the bait to play history was tracked,

00:05:30.889 --> 00:05:32.884
the consumer can rest assure that the fish

00:05:32.884 --> 00:05:35.629
they're about to dine on was sourced responsibly.

00:05:35.629 --> 00:05:38.689
Notice that some actors perform more than one action

00:05:38.689 --> 00:05:41.930
and sometimes the asset is actually passed back and forth between actors.

00:05:41.930 --> 00:05:46.250
So, breaking down the supply chain into the behavior and structure,

00:05:46.250 --> 00:05:51.230
will help you scope out how to develop the functionality each user needs as well as

00:05:51.230 --> 00:05:53.569
what data should be saved off and who and

00:05:53.569 --> 00:05:56.629
when certain actors should be able to access that data.

00:05:56.629 --> 00:05:58.100
In the following quiz,

00:05:58.100 --> 00:06:02.900
you'll be given a simple supply chain example and have the chance to identify the asset,

00:06:02.899 --> 00:06:04.669
business process and actors.

00:06:04.670 --> 00:06:09.449
To recap, in this concept we covered the Blockchain solution DApp layers.

00:06:09.449 --> 00:06:13.339
Then we modeled a Blockchain solution with the behavior and structures.

00:06:13.339 --> 00:06:15.469
Looking at the asset and attributes,

00:06:15.470 --> 00:06:17.390
the business process and actions,

00:06:17.389 --> 00:06:19.805
and the actors and their role permissions.

00:06:19.805 --> 00:06:21.500
In the next concept,

00:06:21.500 --> 00:06:25.144
we'll be using the modeling of our behavior and structures from this concept

00:06:25.144 --> 00:06:30.359
to create UML diagrams that will assist us to architect the technical layers.

