WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.555
Now, let's talk about fallback functions.

00:00:03.555 --> 00:00:06.720
Fallback functions are automatically triggered when

00:00:06.720 --> 00:00:09.330
the function signature does not match any of

00:00:09.330 --> 00:00:12.315
the available functions in a solidity contract.

00:00:12.315 --> 00:00:14.985
For example, if you call a function A,

00:00:14.985 --> 00:00:16.935
and that function does not exist,

00:00:16.935 --> 00:00:19.980
then the fallback function will be triggered automatically.

00:00:19.980 --> 00:00:23.895
There can only be one fallback function inside a contract.

00:00:23.895 --> 00:00:28.170
Now, fallback functions do not have a name so if you look on this screen,

00:00:28.170 --> 00:00:30.030
you will see there is no name,

00:00:30.030 --> 00:00:32.505
they're just declared using the keyword function,

00:00:32.505 --> 00:00:35.670
followed by an empty set of braces like shell.

00:00:35.670 --> 00:00:38.325
Now there are some restrictions for fallback functions.

00:00:38.325 --> 00:00:42.495
They cannot accept arguments nor can they return anything.

00:00:42.495 --> 00:00:45.380
We cannot have loops in a fallback function,

00:00:45.380 --> 00:00:49.985
maximum gas that can be spent inside a function is 2300.

00:00:49.985 --> 00:00:51.320
That means of course,

00:00:51.320 --> 00:00:53.570
we cannot have any loops.

00:00:53.570 --> 00:00:56.830
Now, let's talk about constructor functions,

00:00:56.830 --> 00:00:58.935
extremely important to understand.

00:00:58.935 --> 00:01:03.500
Now these are automatically called when the contract is initiated.

00:01:03.500 --> 00:01:08.810
They can accept arguments and do any kind of initialization that you would like to do.

00:01:08.810 --> 00:01:12.590
Solidity does not support constructor overloading,

00:01:12.590 --> 00:01:16.235
which means there can only be one constructor so you cannot have

00:01:16.235 --> 00:01:21.365
multiple constructors which means it does not support constructor overloading.

00:01:21.365 --> 00:01:23.330
Also, I wanted to mention,

00:01:23.330 --> 00:01:26.495
that it is not required to have a constructor function.

00:01:26.495 --> 00:01:29.315
You can only write if you need one.

00:01:29.315 --> 00:01:31.970
The next important thing that you would really

00:01:31.970 --> 00:01:34.255
like to understand and you should understand,

00:01:34.255 --> 00:01:36.405
are called function modifiers.

00:01:36.405 --> 00:01:38.540
Let's talk about function modifiers.

00:01:38.540 --> 00:01:40.100
Like the name says,

00:01:40.100 --> 00:01:42.920
they modify the way a function behaves.

00:01:42.920 --> 00:01:47.530
They can be added to any function to restrict access to that function.

00:01:47.530 --> 00:01:50.220
Let me show you how in a next slide.

00:01:50.220 --> 00:01:54.850
So, you define a modifier with the keyword modifier,

00:01:54.850 --> 00:01:57.740
followed by the name of the modifier.

00:01:57.740 --> 00:02:01.715
The modifier can also accept arguments if it needs to.

00:02:01.715 --> 00:02:03.500
Then you have a condition.

00:02:03.500 --> 00:02:05.210
If the condition is met,

00:02:05.210 --> 00:02:09.620
the function can be called or an exception will be thrown using revert.

00:02:09.620 --> 00:02:14.320
We will talk about exceptions in one of our future concepts.

00:02:14.320 --> 00:02:18.355
Now, it always ends with an underscore and then a semicolon.

00:02:18.355 --> 00:02:20.170
If you look on the screen, you see that

00:02:20.170 --> 00:02:24.830
the modifier is ending with an underscore and then a semicolon.

00:02:24.830 --> 00:02:27.020
Now, in this code on your screen,

00:02:27.020 --> 00:02:30.710
we have a modifier called owner only where we are checking

00:02:30.710 --> 00:02:34.730
to see if the message.sender is the owner of the contract.

00:02:34.730 --> 00:02:39.950
So we want an owner or only an owner to be able to call this function.

00:02:39.950 --> 00:02:43.495
Now we can apply this modifier to any function.

00:02:43.495 --> 00:02:47.170
On your screen in the function, anyone can call.

00:02:47.170 --> 00:02:52.115
We're not applying the modifier so that means anyone can call this function.

00:02:52.115 --> 00:02:55.185
But in the function, only owner can call,

00:02:55.185 --> 00:02:57.975
we are applying this modifier so that means,

00:02:57.975 --> 00:02:59.990
only the owner can call this function,

00:02:59.990 --> 00:03:02.915
our device modifier will throw an exception.

00:03:02.915 --> 00:03:05.435
Now let's look at a contract that implements

00:03:05.435 --> 00:03:09.150
all these kind of different functions that we've just talked about.

00:03:19.430 --> 00:03:23.280
Okay, so the first one I wanted to show you a very simple contract,

00:03:23.280 --> 00:03:26.990
all it's doing is has a constructor function and the name of

00:03:26.990 --> 00:03:31.010
the contract followed by this variable that we're declaring here.

00:03:31.010 --> 00:03:33.020
It's a public variable. What we're doing is when we

00:03:33.020 --> 00:03:35.180
initiate the contract we're sending it.

00:03:35.180 --> 00:03:39.290
So now this function will be called automatically as soon as I deploy the contract.

00:03:39.290 --> 00:03:40.640
So that means when I deploy,

00:03:40.640 --> 00:03:41.810
I'm going to provide a value,

00:03:41.810 --> 00:03:44.505
and that value will be automatically stored inside.

00:03:44.505 --> 00:03:47.615
So let's go deploy this and see how that works.

00:03:47.615 --> 00:03:50.150
So I'm going to deploy my constructor,

00:03:50.150 --> 00:03:52.100
and in fact let's give it a value.

00:03:52.100 --> 00:03:53.480
Let's give it a value of 100.

00:03:53.480 --> 00:03:55.745
Okay, so we're going to deploy it.

00:03:55.745 --> 00:03:58.190
Let's look at what a deployed amount is.

00:03:58.190 --> 00:03:59.450
See if you see the amount,

00:03:59.450 --> 00:04:00.695
initially we didn't set it.

00:04:00.695 --> 00:04:03.200
So now the amount is set to a 100.

00:04:03.200 --> 00:04:06.710
So also, in fact we will get to that in our next screen so if

00:04:06.710 --> 00:04:09.770
you see I don't have any function called amount, right?

00:04:09.770 --> 00:04:12.140
I don't have any function but remember I just taught you,

00:04:12.140 --> 00:04:15.050
anytime you have a variable that's declared

00:04:15.050 --> 00:04:18.500
public in the storage space you will automatically get a function.

00:04:18.500 --> 00:04:21.460
So this function was automatically created for us.

00:04:21.460 --> 00:04:24.050
So this function constructor was called

00:04:24.050 --> 00:04:27.005
automatically is declared with the keyword constructor.

00:04:27.005 --> 00:04:28.910
You can have any arguments that you want to pass

00:04:28.910 --> 00:04:31.520
along public and then what you doing whatever

00:04:31.520 --> 00:04:33.920
the input is coming automatically gets stored into

00:04:33.920 --> 00:04:36.950
our storage variable and then we get a getter function for this.

00:04:36.950 --> 00:04:41.465
Let's look another contract that shows a little bit more detail about functions.

00:04:41.465 --> 00:04:43.625
So again, pragma line,

00:04:43.625 --> 00:04:47.450
contract word, functions, F-U-N is the name of the function.

00:04:47.450 --> 00:04:50.750
And then we have two variables here.

00:04:50.750 --> 00:04:53.945
If you see, I have not declared them public,

00:04:53.945 --> 00:04:56.855
so that means when I initiate this contract,

00:04:56.855 --> 00:05:00.470
I'm not going to have any set of functions for this,

00:05:00.470 --> 00:05:02.060
getter functions for this.

00:05:02.060 --> 00:05:03.830
Then we have a constructor,

00:05:03.830 --> 00:05:06.500
so what we're doing is that we are getting

00:05:06.500 --> 00:05:10.495
these two inputs and automatically calling our constructor function,

00:05:10.495 --> 00:05:12.095
and that means we are storing

00:05:12.095 --> 00:05:15.170
these variables whatever that we send in into these variables.

00:05:15.170 --> 00:05:18.350
So the owner name is gonna be set to name that comes in,

00:05:18.350 --> 00:05:20.645
owner age is going to be set to that age that comes in.

00:05:20.645 --> 00:05:22.950
So that's constructor function.

00:05:22.950 --> 00:05:25.295
What we're doing is that we're changing.

00:05:25.295 --> 00:05:27.089
So if you see function,

00:05:27.089 --> 00:05:29.920
name of the function, followed by arguments,

00:05:29.920 --> 00:05:32.600
public that means it is going to be visible,

00:05:32.600 --> 00:05:34.070
anyone can call this function,

00:05:34.070 --> 00:05:36.290
and then we're changing the owner in this.

00:05:36.290 --> 00:05:38.660
The constructor was initially setting it up,

00:05:38.660 --> 00:05:39.785
and this is changing.

00:05:39.785 --> 00:05:43.415
So we're resetting the values of owner name equal to what I provide,

00:05:43.415 --> 00:05:45.805
and again, age to what I provide.

00:05:45.805 --> 00:05:48.380
Again, I'm not doing anything to this function but I

00:05:48.380 --> 00:05:50.720
wanted to show you this function is marked as private.

00:05:50.720 --> 00:05:53.405
That means if this function is ever inherited,

00:05:53.405 --> 00:05:55.070
or this contract is inherited,

00:05:55.070 --> 00:05:56.720
this function will not be visible.

00:05:56.720 --> 00:06:01.815
So it's only visible inside this contract and that is how you play the word private.

00:06:01.815 --> 00:06:06.095
Pure means this function does not look at an information of the contract.

00:06:06.095 --> 00:06:10.505
It does not try to change an information of the contract it's a pure function.

00:06:10.505 --> 00:06:12.470
In fact, I'll show you something.

00:06:12.470 --> 00:06:14.150
If I delete this,

00:06:14.150 --> 00:06:17.810
the compiler gives you a warning saying that the state could be set

00:06:17.810 --> 00:06:21.230
to pure just because it knows that there's nothing going on.

00:06:21.230 --> 00:06:23.600
So the compiler is pretty good and that it kind of gives you

00:06:23.600 --> 00:06:27.575
all these little warnings so you can really write your code nice and proper.

00:06:27.575 --> 00:06:31.565
The next function is called get owner info, it's actually retrieving.

00:06:31.565 --> 00:06:35.060
So if you see, it's sending information out so I'm getting the name and I'm

00:06:35.060 --> 00:06:39.335
setting it to that and I'm returning name and age by whatever it was set initially.

00:06:39.335 --> 00:06:44.480
Now, again, I wanted to show you the two ways you can return values, pretty interesting.

00:06:44.480 --> 00:06:48.180
So what you can do, you can in fact give it a variable name like we did in this case,

00:06:48.180 --> 00:06:50.625
so I said string name uint8,

00:06:50.625 --> 00:06:54.665
and all I did is that I set the name to whatever I wanted it to,

00:06:54.665 --> 00:06:56.180
age to whatever I want it to,

00:06:56.180 --> 00:06:58.675
it will automatically return name and age.

00:06:58.675 --> 00:07:02.165
You can do this as one way or you don't have to provide any names here.

00:07:02.165 --> 00:07:03.290
So if you see in this case,

00:07:03.290 --> 00:07:04.850
I'm not giving any name,

00:07:04.850 --> 00:07:07.130
this is when I'll have to use the word return.

00:07:07.130 --> 00:07:09.080
So I can say return owner name.

00:07:09.080 --> 00:07:11.795
So either you can do it this way, provide the name,

00:07:11.795 --> 00:07:15.500
set the values, you don't need to write any return statement.

00:07:15.500 --> 00:07:17.390
Or if you're not giving anything here,

00:07:17.390 --> 00:07:20.330
you will have to specifically say return this name.

00:07:20.330 --> 00:07:22.430
What this function is doing,

00:07:22.430 --> 00:07:23.810
it's getting the age.

00:07:23.810 --> 00:07:27.905
Again, I wanted to show you this function is not required at all.

00:07:27.905 --> 00:07:30.350
Just because that's just the way this function is setup,

00:07:30.350 --> 00:07:33.260
so this function is not required at all because we

00:07:33.260 --> 00:07:36.860
automatically get getter functions for owner age.

00:07:36.860 --> 00:07:39.815
In fact, we have not declared it public but if he hadn't made it public,

00:07:39.815 --> 00:07:43.640
we will get a getter function so this would not be required but just to show you.

00:07:43.640 --> 00:07:46.265
So again, this is a public function view,

00:07:46.265 --> 00:07:48.710
that means it's not changing an information.

00:07:48.710 --> 00:07:52.040
It is looking at information so if I try to put it pure,

00:07:52.040 --> 00:07:55.970
you'll see it gives me an error. I cannot make it pure.

00:07:55.970 --> 00:07:58.310
Okay so it's going to say you cannot look at

00:07:58.310 --> 00:08:00.860
information inside the contract if you're making it pure.

00:08:00.860 --> 00:08:02.815
So we'll have to change it back to view.

00:08:02.815 --> 00:08:07.655
So let's deploy this contract and play around with this.

00:08:07.655 --> 00:08:12.800
Let's delete this initial instance of the contract and let's deploy this contract.

00:08:12.800 --> 00:08:14.810
I'm going to initially give it some name,

00:08:14.810 --> 00:08:16.415
let's give it Udacity,

00:08:16.415 --> 00:08:18.695
and then I'm going to give it, was it age?

00:08:18.695 --> 00:08:21.220
Okay, let's just say we're 50 years old.

00:08:21.220 --> 00:08:23.805
Okay, so let's deploy it.

00:08:23.805 --> 00:08:27.600
So I gave it a few get,

00:08:27.600 --> 00:08:29.380
now let's go look at our function calls here.

00:08:29.380 --> 00:08:33.070
So we had a function that was set get owner info,

00:08:33.070 --> 00:08:34.825
so if I call get owner info,

00:08:34.825 --> 00:08:36.580
it's going to give me these two values back.

00:08:36.580 --> 00:08:39.295
Got it? This is exactly what I said. I could change it.

00:08:39.295 --> 00:08:42.510
So let's go change it to one, two,

00:08:42.510 --> 00:08:44.540
three, whatever I can think right now,

00:08:44.540 --> 00:08:46.000
let's give it another age of 100.

00:08:46.000 --> 00:08:48.160
Now I'm going to call set owner info,

00:08:48.160 --> 00:08:49.480
okay, so it changed it.

00:08:49.480 --> 00:08:51.205
Now if I call get owner info,

00:08:51.205 --> 00:08:53.825
it's going to change it to whatever I sent it to.

00:08:53.825 --> 00:08:56.250
Or you can always get get owner name,

00:08:56.250 --> 00:08:58.410
so we have the name set to one, two , three, four.

00:08:58.410 --> 00:08:59.880
So simple function way,

00:08:59.880 --> 00:09:03.460
so definitely get comfortable with function calls this way.

00:09:03.460 --> 00:09:06.835
These are all the function types that you can return here,

00:09:06.835 --> 00:09:10.190
you can write the return statement so simple syntax.

00:09:10.190 --> 00:09:12.305
So again, get this code from the GitHub page,

00:09:12.305 --> 00:09:16.530
play around with it and really get comfortable with the way functions work in solidity.

